
TouchGFX_Test_01_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000717c  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08107414  08107414  00017414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08107498  08107498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081074a0  081074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  081074a4  081074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  10000000  081074a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  10000010  081074b8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  10000070  08107518  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  100000d0  08107578  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  10000b9c  08107578  00020b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dad4  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004149  00000000  00000000  0004dbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b18  00000000  00000000  00051d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019a8  00000000  00000000  00053838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ddb7  00000000  00000000  000551e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015e4f  00000000  00000000  00092f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00196866  00000000  00000000  000a8de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0023f64c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007680  00000000  00000000  0023f6c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000d0 	.word	0x100000d0
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081073fc 	.word	0x081073fc

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000d4 	.word	0x100000d4
 81002d4:	081073fc 	.word	0x081073fc

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b972 	b.w	81005d4 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9e08      	ldr	r6, [sp, #32]
 810030e:	4604      	mov	r4, r0
 8100310:	4688      	mov	r8, r1
 8100312:	2b00      	cmp	r3, #0
 8100314:	d14b      	bne.n	81003ae <__udivmoddi4+0xa6>
 8100316:	428a      	cmp	r2, r1
 8100318:	4615      	mov	r5, r2
 810031a:	d967      	bls.n	81003ec <__udivmoddi4+0xe4>
 810031c:	fab2 f282 	clz	r2, r2
 8100320:	b14a      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100322:	f1c2 0720 	rsb	r7, r2, #32
 8100326:	fa01 f302 	lsl.w	r3, r1, r2
 810032a:	fa20 f707 	lsr.w	r7, r0, r7
 810032e:	4095      	lsls	r5, r2
 8100330:	ea47 0803 	orr.w	r8, r7, r3
 8100334:	4094      	lsls	r4, r2
 8100336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 810033a:	0c23      	lsrs	r3, r4, #16
 810033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100340:	fa1f fc85 	uxth.w	ip, r5
 8100344:	fb0e 8817 	mls	r8, lr, r7, r8
 8100348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810034c:	fb07 f10c 	mul.w	r1, r7, ip
 8100350:	4299      	cmp	r1, r3
 8100352:	d909      	bls.n	8100368 <__udivmoddi4+0x60>
 8100354:	18eb      	adds	r3, r5, r3
 8100356:	f107 30ff 	add.w	r0, r7, #4294967295
 810035a:	f080 811b 	bcs.w	8100594 <__udivmoddi4+0x28c>
 810035e:	4299      	cmp	r1, r3
 8100360:	f240 8118 	bls.w	8100594 <__udivmoddi4+0x28c>
 8100364:	3f02      	subs	r7, #2
 8100366:	442b      	add	r3, r5
 8100368:	1a5b      	subs	r3, r3, r1
 810036a:	b2a4      	uxth	r4, r4
 810036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8100370:	fb0e 3310 	mls	r3, lr, r0, r3
 8100374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100378:	fb00 fc0c 	mul.w	ip, r0, ip
 810037c:	45a4      	cmp	ip, r4
 810037e:	d909      	bls.n	8100394 <__udivmoddi4+0x8c>
 8100380:	192c      	adds	r4, r5, r4
 8100382:	f100 33ff 	add.w	r3, r0, #4294967295
 8100386:	f080 8107 	bcs.w	8100598 <__udivmoddi4+0x290>
 810038a:	45a4      	cmp	ip, r4
 810038c:	f240 8104 	bls.w	8100598 <__udivmoddi4+0x290>
 8100390:	3802      	subs	r0, #2
 8100392:	442c      	add	r4, r5
 8100394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100398:	eba4 040c 	sub.w	r4, r4, ip
 810039c:	2700      	movs	r7, #0
 810039e:	b11e      	cbz	r6, 81003a8 <__udivmoddi4+0xa0>
 81003a0:	40d4      	lsrs	r4, r2
 81003a2:	2300      	movs	r3, #0
 81003a4:	e9c6 4300 	strd	r4, r3, [r6]
 81003a8:	4639      	mov	r1, r7
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	428b      	cmp	r3, r1
 81003b0:	d909      	bls.n	81003c6 <__udivmoddi4+0xbe>
 81003b2:	2e00      	cmp	r6, #0
 81003b4:	f000 80eb 	beq.w	810058e <__udivmoddi4+0x286>
 81003b8:	2700      	movs	r7, #0
 81003ba:	e9c6 0100 	strd	r0, r1, [r6]
 81003be:	4638      	mov	r0, r7
 81003c0:	4639      	mov	r1, r7
 81003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003c6:	fab3 f783 	clz	r7, r3
 81003ca:	2f00      	cmp	r7, #0
 81003cc:	d147      	bne.n	810045e <__udivmoddi4+0x156>
 81003ce:	428b      	cmp	r3, r1
 81003d0:	d302      	bcc.n	81003d8 <__udivmoddi4+0xd0>
 81003d2:	4282      	cmp	r2, r0
 81003d4:	f200 80fa 	bhi.w	81005cc <__udivmoddi4+0x2c4>
 81003d8:	1a84      	subs	r4, r0, r2
 81003da:	eb61 0303 	sbc.w	r3, r1, r3
 81003de:	2001      	movs	r0, #1
 81003e0:	4698      	mov	r8, r3
 81003e2:	2e00      	cmp	r6, #0
 81003e4:	d0e0      	beq.n	81003a8 <__udivmoddi4+0xa0>
 81003e6:	e9c6 4800 	strd	r4, r8, [r6]
 81003ea:	e7dd      	b.n	81003a8 <__udivmoddi4+0xa0>
 81003ec:	b902      	cbnz	r2, 81003f0 <__udivmoddi4+0xe8>
 81003ee:	deff      	udf	#255	; 0xff
 81003f0:	fab2 f282 	clz	r2, r2
 81003f4:	2a00      	cmp	r2, #0
 81003f6:	f040 808f 	bne.w	8100518 <__udivmoddi4+0x210>
 81003fa:	1b49      	subs	r1, r1, r5
 81003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100400:	fa1f f885 	uxth.w	r8, r5
 8100404:	2701      	movs	r7, #1
 8100406:	fbb1 fcfe 	udiv	ip, r1, lr
 810040a:	0c23      	lsrs	r3, r4, #16
 810040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100414:	fb08 f10c 	mul.w	r1, r8, ip
 8100418:	4299      	cmp	r1, r3
 810041a:	d907      	bls.n	810042c <__udivmoddi4+0x124>
 810041c:	18eb      	adds	r3, r5, r3
 810041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100422:	d202      	bcs.n	810042a <__udivmoddi4+0x122>
 8100424:	4299      	cmp	r1, r3
 8100426:	f200 80cd 	bhi.w	81005c4 <__udivmoddi4+0x2bc>
 810042a:	4684      	mov	ip, r0
 810042c:	1a59      	subs	r1, r3, r1
 810042e:	b2a3      	uxth	r3, r4
 8100430:	fbb1 f0fe 	udiv	r0, r1, lr
 8100434:	fb0e 1410 	mls	r4, lr, r0, r1
 8100438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 810043c:	fb08 f800 	mul.w	r8, r8, r0
 8100440:	45a0      	cmp	r8, r4
 8100442:	d907      	bls.n	8100454 <__udivmoddi4+0x14c>
 8100444:	192c      	adds	r4, r5, r4
 8100446:	f100 33ff 	add.w	r3, r0, #4294967295
 810044a:	d202      	bcs.n	8100452 <__udivmoddi4+0x14a>
 810044c:	45a0      	cmp	r8, r4
 810044e:	f200 80b6 	bhi.w	81005be <__udivmoddi4+0x2b6>
 8100452:	4618      	mov	r0, r3
 8100454:	eba4 0408 	sub.w	r4, r4, r8
 8100458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 810045c:	e79f      	b.n	810039e <__udivmoddi4+0x96>
 810045e:	f1c7 0c20 	rsb	ip, r7, #32
 8100462:	40bb      	lsls	r3, r7
 8100464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100468:	ea4e 0e03 	orr.w	lr, lr, r3
 810046c:	fa01 f407 	lsl.w	r4, r1, r7
 8100470:	fa20 f50c 	lsr.w	r5, r0, ip
 8100474:	fa21 f30c 	lsr.w	r3, r1, ip
 8100478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 810047c:	4325      	orrs	r5, r4
 810047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8100482:	0c2c      	lsrs	r4, r5, #16
 8100484:	fb08 3319 	mls	r3, r8, r9, r3
 8100488:	fa1f fa8e 	uxth.w	sl, lr
 810048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100490:	fb09 f40a 	mul.w	r4, r9, sl
 8100494:	429c      	cmp	r4, r3
 8100496:	fa02 f207 	lsl.w	r2, r2, r7
 810049a:	fa00 f107 	lsl.w	r1, r0, r7
 810049e:	d90b      	bls.n	81004b8 <__udivmoddi4+0x1b0>
 81004a0:	eb1e 0303 	adds.w	r3, lr, r3
 81004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 81004a8:	f080 8087 	bcs.w	81005ba <__udivmoddi4+0x2b2>
 81004ac:	429c      	cmp	r4, r3
 81004ae:	f240 8084 	bls.w	81005ba <__udivmoddi4+0x2b2>
 81004b2:	f1a9 0902 	sub.w	r9, r9, #2
 81004b6:	4473      	add	r3, lr
 81004b8:	1b1b      	subs	r3, r3, r4
 81004ba:	b2ad      	uxth	r5, r5
 81004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 81004c0:	fb08 3310 	mls	r3, r8, r0, r3
 81004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 81004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 81004cc:	45a2      	cmp	sl, r4
 81004ce:	d908      	bls.n	81004e2 <__udivmoddi4+0x1da>
 81004d0:	eb1e 0404 	adds.w	r4, lr, r4
 81004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 81004d8:	d26b      	bcs.n	81005b2 <__udivmoddi4+0x2aa>
 81004da:	45a2      	cmp	sl, r4
 81004dc:	d969      	bls.n	81005b2 <__udivmoddi4+0x2aa>
 81004de:	3802      	subs	r0, #2
 81004e0:	4474      	add	r4, lr
 81004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 81004e6:	fba0 8902 	umull	r8, r9, r0, r2
 81004ea:	eba4 040a 	sub.w	r4, r4, sl
 81004ee:	454c      	cmp	r4, r9
 81004f0:	46c2      	mov	sl, r8
 81004f2:	464b      	mov	r3, r9
 81004f4:	d354      	bcc.n	81005a0 <__udivmoddi4+0x298>
 81004f6:	d051      	beq.n	810059c <__udivmoddi4+0x294>
 81004f8:	2e00      	cmp	r6, #0
 81004fa:	d069      	beq.n	81005d0 <__udivmoddi4+0x2c8>
 81004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8100500:	eb64 0403 	sbc.w	r4, r4, r3
 8100504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8100508:	40fd      	lsrs	r5, r7
 810050a:	40fc      	lsrs	r4, r7
 810050c:	ea4c 0505 	orr.w	r5, ip, r5
 8100510:	e9c6 5400 	strd	r5, r4, [r6]
 8100514:	2700      	movs	r7, #0
 8100516:	e747      	b.n	81003a8 <__udivmoddi4+0xa0>
 8100518:	f1c2 0320 	rsb	r3, r2, #32
 810051c:	fa20 f703 	lsr.w	r7, r0, r3
 8100520:	4095      	lsls	r5, r2
 8100522:	fa01 f002 	lsl.w	r0, r1, r2
 8100526:	fa21 f303 	lsr.w	r3, r1, r3
 810052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 810052e:	4338      	orrs	r0, r7
 8100530:	0c01      	lsrs	r1, r0, #16
 8100532:	fbb3 f7fe 	udiv	r7, r3, lr
 8100536:	fa1f f885 	uxth.w	r8, r5
 810053a:	fb0e 3317 	mls	r3, lr, r7, r3
 810053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100542:	fb07 f308 	mul.w	r3, r7, r8
 8100546:	428b      	cmp	r3, r1
 8100548:	fa04 f402 	lsl.w	r4, r4, r2
 810054c:	d907      	bls.n	810055e <__udivmoddi4+0x256>
 810054e:	1869      	adds	r1, r5, r1
 8100550:	f107 3cff 	add.w	ip, r7, #4294967295
 8100554:	d22f      	bcs.n	81005b6 <__udivmoddi4+0x2ae>
 8100556:	428b      	cmp	r3, r1
 8100558:	d92d      	bls.n	81005b6 <__udivmoddi4+0x2ae>
 810055a:	3f02      	subs	r7, #2
 810055c:	4429      	add	r1, r5
 810055e:	1acb      	subs	r3, r1, r3
 8100560:	b281      	uxth	r1, r0
 8100562:	fbb3 f0fe 	udiv	r0, r3, lr
 8100566:	fb0e 3310 	mls	r3, lr, r0, r3
 810056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810056e:	fb00 f308 	mul.w	r3, r0, r8
 8100572:	428b      	cmp	r3, r1
 8100574:	d907      	bls.n	8100586 <__udivmoddi4+0x27e>
 8100576:	1869      	adds	r1, r5, r1
 8100578:	f100 3cff 	add.w	ip, r0, #4294967295
 810057c:	d217      	bcs.n	81005ae <__udivmoddi4+0x2a6>
 810057e:	428b      	cmp	r3, r1
 8100580:	d915      	bls.n	81005ae <__udivmoddi4+0x2a6>
 8100582:	3802      	subs	r0, #2
 8100584:	4429      	add	r1, r5
 8100586:	1ac9      	subs	r1, r1, r3
 8100588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 810058c:	e73b      	b.n	8100406 <__udivmoddi4+0xfe>
 810058e:	4637      	mov	r7, r6
 8100590:	4630      	mov	r0, r6
 8100592:	e709      	b.n	81003a8 <__udivmoddi4+0xa0>
 8100594:	4607      	mov	r7, r0
 8100596:	e6e7      	b.n	8100368 <__udivmoddi4+0x60>
 8100598:	4618      	mov	r0, r3
 810059a:	e6fb      	b.n	8100394 <__udivmoddi4+0x8c>
 810059c:	4541      	cmp	r1, r8
 810059e:	d2ab      	bcs.n	81004f8 <__udivmoddi4+0x1f0>
 81005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 81005a4:	eb69 020e 	sbc.w	r2, r9, lr
 81005a8:	3801      	subs	r0, #1
 81005aa:	4613      	mov	r3, r2
 81005ac:	e7a4      	b.n	81004f8 <__udivmoddi4+0x1f0>
 81005ae:	4660      	mov	r0, ip
 81005b0:	e7e9      	b.n	8100586 <__udivmoddi4+0x27e>
 81005b2:	4618      	mov	r0, r3
 81005b4:	e795      	b.n	81004e2 <__udivmoddi4+0x1da>
 81005b6:	4667      	mov	r7, ip
 81005b8:	e7d1      	b.n	810055e <__udivmoddi4+0x256>
 81005ba:	4681      	mov	r9, r0
 81005bc:	e77c      	b.n	81004b8 <__udivmoddi4+0x1b0>
 81005be:	3802      	subs	r0, #2
 81005c0:	442c      	add	r4, r5
 81005c2:	e747      	b.n	8100454 <__udivmoddi4+0x14c>
 81005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 81005c8:	442b      	add	r3, r5
 81005ca:	e72f      	b.n	810042c <__udivmoddi4+0x124>
 81005cc:	4638      	mov	r0, r7
 81005ce:	e708      	b.n	81003e2 <__udivmoddi4+0xda>
 81005d0:	4637      	mov	r7, r6
 81005d2:	e6e9      	b.n	81003a8 <__udivmoddi4+0xa0>

081005d4 <__aeabi_idiv0>:
 81005d4:	4770      	bx	lr
 81005d6:	bf00      	nop

081005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005d8:	b480      	push	{r7}
 81005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005dc:	4b0b      	ldr	r3, [pc, #44]	; (810060c <SystemInit+0x34>)
 81005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005e2:	4a0a      	ldr	r2, [pc, #40]	; (810060c <SystemInit+0x34>)
 81005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005ec:	4b07      	ldr	r3, [pc, #28]	; (810060c <SystemInit+0x34>)
 81005ee:	691b      	ldr	r3, [r3, #16]
 81005f0:	4a06      	ldr	r2, [pc, #24]	; (810060c <SystemInit+0x34>)
 81005f2:	f043 0310 	orr.w	r3, r3, #16
 81005f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81005f8:	4b04      	ldr	r3, [pc, #16]	; (810060c <SystemInit+0x34>)
 81005fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81005fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100600:	bf00      	nop
 8100602:	46bd      	mov	sp, r7
 8100604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100608:	4770      	bx	lr
 810060a:	bf00      	nop
 810060c:	e000ed00 	.word	0xe000ed00

08100610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100610:	b580      	push	{r7, lr}
 8100612:	b082      	sub	sp, #8
 8100614:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100616:	4b28      	ldr	r3, [pc, #160]	; (81006b8 <main+0xa8>)
 8100618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810061c:	4a26      	ldr	r2, [pc, #152]	; (81006b8 <main+0xa8>)
 810061e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100626:	4b24      	ldr	r3, [pc, #144]	; (81006b8 <main+0xa8>)
 8100628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810062c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100630:	607b      	str	r3, [r7, #4]
 8100632:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100634:	2001      	movs	r0, #1
 8100636:	f002 fc69 	bl	8102f0c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810063a:	f003 fa79 	bl	8103b30 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810063e:	2201      	movs	r2, #1
 8100640:	2102      	movs	r1, #2
 8100642:	2000      	movs	r0, #0
 8100644:	f003 f9fe 	bl	8103a44 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100648:	4b1c      	ldr	r3, [pc, #112]	; (81006bc <main+0xac>)
 810064a:	681b      	ldr	r3, [r3, #0]
 810064c:	091b      	lsrs	r3, r3, #4
 810064e:	f003 030f 	and.w	r3, r3, #15
 8100652:	2b07      	cmp	r3, #7
 8100654:	d108      	bne.n	8100668 <main+0x58>
 8100656:	4b1a      	ldr	r3, [pc, #104]	; (81006c0 <main+0xb0>)
 8100658:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810065c:	4a18      	ldr	r2, [pc, #96]	; (81006c0 <main+0xb0>)
 810065e:	f043 0301 	orr.w	r3, r3, #1
 8100662:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100666:	e007      	b.n	8100678 <main+0x68>
 8100668:	4b15      	ldr	r3, [pc, #84]	; (81006c0 <main+0xb0>)
 810066a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810066e:	4a14      	ldr	r2, [pc, #80]	; (81006c0 <main+0xb0>)
 8100670:	f043 0301 	orr.w	r3, r3, #1
 8100674:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100678:	f001 f8ee 	bl	8101858 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810067c:	f000 fb1e 	bl	8100cbc <MX_GPIO_Init>
  MX_ETH_Init();
 8100680:	f000 f822 	bl	81006c8 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8100684:	f000 f872 	bl	810076c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8100688:	f000 f8d6 	bl	8100838 <MX_FDCAN2_Init>
  MX_FMC_Init();
 810068c:	f000 fac8 	bl	8100c20 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8100690:	f000 f938 	bl	8100904 <MX_QUADSPI_Init>
  MX_SAI2_Init();
 8100694:	f000 f962 	bl	810095c <MX_SAI2_Init>
  MX_SDMMC1_MMC_Init();
 8100698:	f000 fa1e 	bl	8100ad8 <MX_SDMMC1_MMC_Init>
  MX_USART3_UART_Init();
 810069c:	f000 fa42 	bl	8100b24 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 81006a0:	f000 fa8c 	bl	8100bbc <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 81006a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 81006a8:	4806      	ldr	r0, [pc, #24]	; (81006c4 <main+0xb4>)
 81006aa:	f002 fc14 	bl	8102ed6 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 81006ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81006b2:	f001 f985 	bl	81019c0 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 81006b6:	e7f5      	b.n	81006a4 <main+0x94>
 81006b8:	58024400 	.word	0x58024400
 81006bc:	e000ed00 	.word	0xe000ed00
 81006c0:	58026400 	.word	0x58026400
 81006c4:	58022000 	.word	0x58022000

081006c8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 81006c8:	b580      	push	{r7, lr}
 81006ca:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 81006cc:	4b22      	ldr	r3, [pc, #136]	; (8100758 <MX_ETH_Init+0x90>)
 81006ce:	4a23      	ldr	r2, [pc, #140]	; (810075c <MX_ETH_Init+0x94>)
 81006d0:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 81006d2:	4b21      	ldr	r3, [pc, #132]	; (8100758 <MX_ETH_Init+0x90>)
 81006d4:	685b      	ldr	r3, [r3, #4]
 81006d6:	2200      	movs	r2, #0
 81006d8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 81006da:	4b1f      	ldr	r3, [pc, #124]	; (8100758 <MX_ETH_Init+0x90>)
 81006dc:	685b      	ldr	r3, [r3, #4]
 81006de:	3301      	adds	r3, #1
 81006e0:	2280      	movs	r2, #128	; 0x80
 81006e2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 81006e4:	4b1c      	ldr	r3, [pc, #112]	; (8100758 <MX_ETH_Init+0x90>)
 81006e6:	685b      	ldr	r3, [r3, #4]
 81006e8:	3302      	adds	r3, #2
 81006ea:	22e1      	movs	r2, #225	; 0xe1
 81006ec:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 81006ee:	4b1a      	ldr	r3, [pc, #104]	; (8100758 <MX_ETH_Init+0x90>)
 81006f0:	685b      	ldr	r3, [r3, #4]
 81006f2:	3303      	adds	r3, #3
 81006f4:	2200      	movs	r2, #0
 81006f6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 81006f8:	4b17      	ldr	r3, [pc, #92]	; (8100758 <MX_ETH_Init+0x90>)
 81006fa:	685b      	ldr	r3, [r3, #4]
 81006fc:	3304      	adds	r3, #4
 81006fe:	2200      	movs	r2, #0
 8100700:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8100702:	4b15      	ldr	r3, [pc, #84]	; (8100758 <MX_ETH_Init+0x90>)
 8100704:	685b      	ldr	r3, [r3, #4]
 8100706:	3305      	adds	r3, #5
 8100708:	2200      	movs	r2, #0
 810070a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 810070c:	4b12      	ldr	r3, [pc, #72]	; (8100758 <MX_ETH_Init+0x90>)
 810070e:	2200      	movs	r2, #0
 8100710:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8100712:	4b11      	ldr	r3, [pc, #68]	; (8100758 <MX_ETH_Init+0x90>)
 8100714:	4a12      	ldr	r2, [pc, #72]	; (8100760 <MX_ETH_Init+0x98>)
 8100716:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8100718:	4b0f      	ldr	r3, [pc, #60]	; (8100758 <MX_ETH_Init+0x90>)
 810071a:	4a12      	ldr	r2, [pc, #72]	; (8100764 <MX_ETH_Init+0x9c>)
 810071c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 810071e:	4b0e      	ldr	r3, [pc, #56]	; (8100758 <MX_ETH_Init+0x90>)
 8100720:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8100724:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8100726:	480c      	ldr	r0, [pc, #48]	; (8100758 <MX_ETH_Init+0x90>)
 8100728:	f001 fa84 	bl	8101c34 <HAL_ETH_Init>
 810072c:	4603      	mov	r3, r0
 810072e:	2b00      	cmp	r3, #0
 8100730:	d001      	beq.n	8100736 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8100732:	f000 fb85 	bl	8100e40 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8100736:	2234      	movs	r2, #52	; 0x34
 8100738:	2100      	movs	r1, #0
 810073a:	480b      	ldr	r0, [pc, #44]	; (8100768 <MX_ETH_Init+0xa0>)
 810073c:	f006 fe55 	bl	81073ea <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100740:	4b09      	ldr	r3, [pc, #36]	; (8100768 <MX_ETH_Init+0xa0>)
 8100742:	2221      	movs	r2, #33	; 0x21
 8100744:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8100746:	4b08      	ldr	r3, [pc, #32]	; (8100768 <MX_ETH_Init+0xa0>)
 8100748:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 810074c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 810074e:	4b06      	ldr	r3, [pc, #24]	; (8100768 <MX_ETH_Init+0xa0>)
 8100750:	2200      	movs	r2, #0
 8100752:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8100754:	bf00      	nop
 8100756:	bd80      	pop	{r7, pc}
 8100758:	10000a08 	.word	0x10000a08
 810075c:	40028000 	.word	0x40028000
 8100760:	10000070 	.word	0x10000070
 8100764:	10000010 	.word	0x10000010
 8100768:	10000a78 	.word	0x10000a78

0810076c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 810076c:	b580      	push	{r7, lr}
 810076e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8100770:	4b2f      	ldr	r3, [pc, #188]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 8100772:	4a30      	ldr	r2, [pc, #192]	; (8100834 <MX_FDCAN1_Init+0xc8>)
 8100774:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8100776:	4b2e      	ldr	r3, [pc, #184]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 8100778:	f44f 7280 	mov.w	r2, #256	; 0x100
 810077c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 810077e:	4b2c      	ldr	r3, [pc, #176]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 8100780:	2200      	movs	r2, #0
 8100782:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8100784:	4b2a      	ldr	r3, [pc, #168]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 8100786:	2200      	movs	r2, #0
 8100788:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 810078a:	4b29      	ldr	r3, [pc, #164]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 810078c:	2200      	movs	r2, #0
 810078e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8100790:	4b27      	ldr	r3, [pc, #156]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 8100792:	2200      	movs	r2, #0
 8100794:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8100796:	4b26      	ldr	r3, [pc, #152]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 8100798:	2201      	movs	r2, #1
 810079a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 810079c:	4b24      	ldr	r3, [pc, #144]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 810079e:	2201      	movs	r2, #1
 81007a0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 81007a2:	4b23      	ldr	r3, [pc, #140]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007a4:	2202      	movs	r2, #2
 81007a6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 81007a8:	4b21      	ldr	r3, [pc, #132]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007aa:	2202      	movs	r2, #2
 81007ac:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 81007ae:	4b20      	ldr	r3, [pc, #128]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007b0:	2201      	movs	r2, #1
 81007b2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 81007b4:	4b1e      	ldr	r3, [pc, #120]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007b6:	2201      	movs	r2, #1
 81007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 81007ba:	4b1d      	ldr	r3, [pc, #116]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007bc:	2201      	movs	r2, #1
 81007be:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 81007c0:	4b1b      	ldr	r3, [pc, #108]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007c2:	2201      	movs	r2, #1
 81007c4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 81007c6:	4b1a      	ldr	r3, [pc, #104]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007c8:	2200      	movs	r2, #0
 81007ca:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 81007cc:	4b18      	ldr	r3, [pc, #96]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007ce:	2200      	movs	r2, #0
 81007d0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 81007d2:	4b17      	ldr	r3, [pc, #92]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007d4:	2200      	movs	r2, #0
 81007d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 81007d8:	4b15      	ldr	r3, [pc, #84]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007da:	2200      	movs	r2, #0
 81007dc:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 81007de:	4b14      	ldr	r3, [pc, #80]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007e0:	2204      	movs	r2, #4
 81007e2:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 81007e4:	4b12      	ldr	r3, [pc, #72]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007e6:	2200      	movs	r2, #0
 81007e8:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 81007ea:	4b11      	ldr	r3, [pc, #68]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007ec:	2204      	movs	r2, #4
 81007ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 81007f0:	4b0f      	ldr	r3, [pc, #60]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007f2:	2200      	movs	r2, #0
 81007f4:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 81007f6:	4b0e      	ldr	r3, [pc, #56]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007f8:	2204      	movs	r2, #4
 81007fa:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 81007fc:	4b0c      	ldr	r3, [pc, #48]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 81007fe:	2200      	movs	r2, #0
 8100800:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8100802:	4b0b      	ldr	r3, [pc, #44]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 8100804:	2200      	movs	r2, #0
 8100806:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8100808:	4b09      	ldr	r3, [pc, #36]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 810080a:	2200      	movs	r2, #0
 810080c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 810080e:	4b08      	ldr	r3, [pc, #32]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 8100810:	2200      	movs	r2, #0
 8100812:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100814:	4b06      	ldr	r3, [pc, #24]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 8100816:	2204      	movs	r2, #4
 8100818:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 810081a:	4805      	ldr	r0, [pc, #20]	; (8100830 <MX_FDCAN1_Init+0xc4>)
 810081c:	f001 fe20 	bl	8102460 <HAL_FDCAN_Init>
 8100820:	4603      	mov	r3, r0
 8100822:	2b00      	cmp	r3, #0
 8100824:	d001      	beq.n	810082a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8100826:	f000 fb0b 	bl	8100e40 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 810082a:	bf00      	nop
 810082c:	bd80      	pop	{r7, pc}
 810082e:	bf00      	nop
 8100830:	10000934 	.word	0x10000934
 8100834:	4000a000 	.word	0x4000a000

08100838 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8100838:	b580      	push	{r7, lr}
 810083a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 810083c:	4b2f      	ldr	r3, [pc, #188]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 810083e:	4a30      	ldr	r2, [pc, #192]	; (8100900 <MX_FDCAN2_Init+0xc8>)
 8100840:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8100842:	4b2e      	ldr	r3, [pc, #184]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 8100844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100848:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 810084a:	4b2c      	ldr	r3, [pc, #176]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 810084c:	2200      	movs	r2, #0
 810084e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8100850:	4b2a      	ldr	r3, [pc, #168]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 8100852:	2200      	movs	r2, #0
 8100854:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8100856:	4b29      	ldr	r3, [pc, #164]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 8100858:	2200      	movs	r2, #0
 810085a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 810085c:	4b27      	ldr	r3, [pc, #156]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 810085e:	2200      	movs	r2, #0
 8100860:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8100862:	4b26      	ldr	r3, [pc, #152]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 8100864:	2201      	movs	r2, #1
 8100866:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8100868:	4b24      	ldr	r3, [pc, #144]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 810086a:	2201      	movs	r2, #1
 810086c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 810086e:	4b23      	ldr	r3, [pc, #140]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 8100870:	2202      	movs	r2, #2
 8100872:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8100874:	4b21      	ldr	r3, [pc, #132]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 8100876:	2202      	movs	r2, #2
 8100878:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 810087a:	4b20      	ldr	r3, [pc, #128]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 810087c:	2201      	movs	r2, #1
 810087e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8100880:	4b1e      	ldr	r3, [pc, #120]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 8100882:	2201      	movs	r2, #1
 8100884:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8100886:	4b1d      	ldr	r3, [pc, #116]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 8100888:	2201      	movs	r2, #1
 810088a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 810088c:	4b1b      	ldr	r3, [pc, #108]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 810088e:	2201      	movs	r2, #1
 8100890:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8100892:	4b1a      	ldr	r3, [pc, #104]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 8100894:	2200      	movs	r2, #0
 8100896:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8100898:	4b18      	ldr	r3, [pc, #96]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 810089a:	2200      	movs	r2, #0
 810089c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 810089e:	4b17      	ldr	r3, [pc, #92]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008a0:	2200      	movs	r2, #0
 81008a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 81008a4:	4b15      	ldr	r3, [pc, #84]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008a6:	2200      	movs	r2, #0
 81008a8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 81008aa:	4b14      	ldr	r3, [pc, #80]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008ac:	2204      	movs	r2, #4
 81008ae:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 81008b0:	4b12      	ldr	r3, [pc, #72]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008b2:	2200      	movs	r2, #0
 81008b4:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 81008b6:	4b11      	ldr	r3, [pc, #68]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008b8:	2204      	movs	r2, #4
 81008ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 81008bc:	4b0f      	ldr	r3, [pc, #60]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008be:	2200      	movs	r2, #0
 81008c0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 81008c2:	4b0e      	ldr	r3, [pc, #56]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008c4:	2204      	movs	r2, #4
 81008c6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 81008c8:	4b0c      	ldr	r3, [pc, #48]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008ca:	2200      	movs	r2, #0
 81008cc:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 81008ce:	4b0b      	ldr	r3, [pc, #44]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008d0:	2200      	movs	r2, #0
 81008d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 81008d4:	4b09      	ldr	r3, [pc, #36]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008d6:	2200      	movs	r2, #0
 81008d8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 81008da:	4b08      	ldr	r3, [pc, #32]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008dc:	2200      	movs	r2, #0
 81008de:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 81008e0:	4b06      	ldr	r3, [pc, #24]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008e2:	2204      	movs	r2, #4
 81008e4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 81008e6:	4805      	ldr	r0, [pc, #20]	; (81008fc <MX_FDCAN2_Init+0xc4>)
 81008e8:	f001 fdba 	bl	8102460 <HAL_FDCAN_Init>
 81008ec:	4603      	mov	r3, r0
 81008ee:	2b00      	cmp	r3, #0
 81008f0:	d001      	beq.n	81008f6 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 81008f2:	f000 faa5 	bl	8100e40 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 81008f6:	bf00      	nop
 81008f8:	bd80      	pop	{r7, pc}
 81008fa:	bf00      	nop
 81008fc:	10000aac 	.word	0x10000aac
 8100900:	4000a400 	.word	0x4000a400

08100904 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8100904:	b580      	push	{r7, lr}
 8100906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8100908:	4b12      	ldr	r3, [pc, #72]	; (8100954 <MX_QUADSPI_Init+0x50>)
 810090a:	4a13      	ldr	r2, [pc, #76]	; (8100958 <MX_QUADSPI_Init+0x54>)
 810090c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 810090e:	4b11      	ldr	r3, [pc, #68]	; (8100954 <MX_QUADSPI_Init+0x50>)
 8100910:	22ff      	movs	r2, #255	; 0xff
 8100912:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8100914:	4b0f      	ldr	r3, [pc, #60]	; (8100954 <MX_QUADSPI_Init+0x50>)
 8100916:	2201      	movs	r2, #1
 8100918:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 810091a:	4b0e      	ldr	r3, [pc, #56]	; (8100954 <MX_QUADSPI_Init+0x50>)
 810091c:	2200      	movs	r2, #0
 810091e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8100920:	4b0c      	ldr	r3, [pc, #48]	; (8100954 <MX_QUADSPI_Init+0x50>)
 8100922:	2201      	movs	r2, #1
 8100924:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8100926:	4b0b      	ldr	r3, [pc, #44]	; (8100954 <MX_QUADSPI_Init+0x50>)
 8100928:	2200      	movs	r2, #0
 810092a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 810092c:	4b09      	ldr	r3, [pc, #36]	; (8100954 <MX_QUADSPI_Init+0x50>)
 810092e:	2200      	movs	r2, #0
 8100930:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8100932:	4b08      	ldr	r3, [pc, #32]	; (8100954 <MX_QUADSPI_Init+0x50>)
 8100934:	2200      	movs	r2, #0
 8100936:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8100938:	4b06      	ldr	r3, [pc, #24]	; (8100954 <MX_QUADSPI_Init+0x50>)
 810093a:	2200      	movs	r2, #0
 810093c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 810093e:	4805      	ldr	r0, [pc, #20]	; (8100954 <MX_QUADSPI_Init+0x50>)
 8100940:	f003 f904 	bl	8103b4c <HAL_QSPI_Init>
 8100944:	4603      	mov	r3, r0
 8100946:	2b00      	cmp	r3, #0
 8100948:	d001      	beq.n	810094e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 810094a:	f000 fa79 	bl	8100e40 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 810094e:	bf00      	nop
 8100950:	bd80      	pop	{r7, pc}
 8100952:	bf00      	nop
 8100954:	10000b4c 	.word	0x10000b4c
 8100958:	52005000 	.word	0x52005000

0810095c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 810095c:	b580      	push	{r7, lr}
 810095e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8100960:	4b58      	ldr	r3, [pc, #352]	; (8100ac4 <MX_SAI2_Init+0x168>)
 8100962:	4a59      	ldr	r2, [pc, #356]	; (8100ac8 <MX_SAI2_Init+0x16c>)
 8100964:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8100966:	4b57      	ldr	r3, [pc, #348]	; (8100ac4 <MX_SAI2_Init+0x168>)
 8100968:	2200      	movs	r2, #0
 810096a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 810096c:	4b55      	ldr	r3, [pc, #340]	; (8100ac4 <MX_SAI2_Init+0x168>)
 810096e:	2200      	movs	r2, #0
 8100970:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8100972:	4b54      	ldr	r3, [pc, #336]	; (8100ac4 <MX_SAI2_Init+0x168>)
 8100974:	2240      	movs	r2, #64	; 0x40
 8100976:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100978:	4b52      	ldr	r3, [pc, #328]	; (8100ac4 <MX_SAI2_Init+0x168>)
 810097a:	2200      	movs	r2, #0
 810097c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 810097e:	4b51      	ldr	r3, [pc, #324]	; (8100ac4 <MX_SAI2_Init+0x168>)
 8100980:	2200      	movs	r2, #0
 8100982:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8100984:	4b4f      	ldr	r3, [pc, #316]	; (8100ac4 <MX_SAI2_Init+0x168>)
 8100986:	2200      	movs	r2, #0
 8100988:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 810098a:	4b4e      	ldr	r3, [pc, #312]	; (8100ac4 <MX_SAI2_Init+0x168>)
 810098c:	2200      	movs	r2, #0
 810098e:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8100990:	4b4c      	ldr	r3, [pc, #304]	; (8100ac4 <MX_SAI2_Init+0x168>)
 8100992:	2200      	movs	r2, #0
 8100994:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100996:	4b4b      	ldr	r3, [pc, #300]	; (8100ac4 <MX_SAI2_Init+0x168>)
 8100998:	2200      	movs	r2, #0
 810099a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 810099c:	4b49      	ldr	r3, [pc, #292]	; (8100ac4 <MX_SAI2_Init+0x168>)
 810099e:	4a4b      	ldr	r2, [pc, #300]	; (8100acc <MX_SAI2_Init+0x170>)
 81009a0:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 81009a2:	4b48      	ldr	r3, [pc, #288]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009a4:	2200      	movs	r2, #0
 81009a6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 81009a8:	4b46      	ldr	r3, [pc, #280]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009aa:	2200      	movs	r2, #0
 81009ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 81009ae:	4b45      	ldr	r3, [pc, #276]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009b0:	2200      	movs	r2, #0
 81009b2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 81009b4:	4b43      	ldr	r3, [pc, #268]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009b6:	2200      	movs	r2, #0
 81009b8:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 81009ba:	4b42      	ldr	r3, [pc, #264]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009bc:	2200      	movs	r2, #0
 81009be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 81009c2:	4b40      	ldr	r3, [pc, #256]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009c4:	2201      	movs	r2, #1
 81009c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 81009c8:	4b3e      	ldr	r3, [pc, #248]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 81009ce:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 81009d0:	4b3c      	ldr	r3, [pc, #240]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009d2:	2208      	movs	r2, #8
 81009d4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 81009d6:	4b3b      	ldr	r3, [pc, #236]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009d8:	2201      	movs	r2, #1
 81009da:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 81009dc:	4b39      	ldr	r3, [pc, #228]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009de:	2200      	movs	r2, #0
 81009e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 81009e2:	4b38      	ldr	r3, [pc, #224]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009e4:	2200      	movs	r2, #0
 81009e6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 81009e8:	4b36      	ldr	r3, [pc, #216]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009ea:	2200      	movs	r2, #0
 81009ec:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 81009ee:	4b35      	ldr	r3, [pc, #212]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009f0:	2200      	movs	r2, #0
 81009f2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 81009f4:	4b33      	ldr	r3, [pc, #204]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009f6:	2200      	movs	r2, #0
 81009f8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 81009fa:	4b32      	ldr	r3, [pc, #200]	; (8100ac4 <MX_SAI2_Init+0x168>)
 81009fc:	2201      	movs	r2, #1
 81009fe:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8100a00:	4b30      	ldr	r3, [pc, #192]	; (8100ac4 <MX_SAI2_Init+0x168>)
 8100a02:	2200      	movs	r2, #0
 8100a04:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8100a06:	482f      	ldr	r0, [pc, #188]	; (8100ac4 <MX_SAI2_Init+0x168>)
 8100a08:	f004 f99c 	bl	8104d44 <HAL_SAI_Init>
 8100a0c:	4603      	mov	r3, r0
 8100a0e:	2b00      	cmp	r3, #0
 8100a10:	d001      	beq.n	8100a16 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8100a12:	f000 fa15 	bl	8100e40 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8100a16:	4b2e      	ldr	r3, [pc, #184]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a18:	4a2e      	ldr	r2, [pc, #184]	; (8100ad4 <MX_SAI2_Init+0x178>)
 8100a1a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8100a1c:	4b2c      	ldr	r3, [pc, #176]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a1e:	2200      	movs	r2, #0
 8100a20:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8100a22:	4b2b      	ldr	r3, [pc, #172]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a24:	2203      	movs	r2, #3
 8100a26:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8100a28:	4b29      	ldr	r3, [pc, #164]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a2a:	2240      	movs	r2, #64	; 0x40
 8100a2c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100a2e:	4b28      	ldr	r3, [pc, #160]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a30:	2200      	movs	r2, #0
 8100a32:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100a34:	4b26      	ldr	r3, [pc, #152]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a36:	2200      	movs	r2, #0
 8100a38:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8100a3a:	4b25      	ldr	r3, [pc, #148]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a3c:	2201      	movs	r2, #1
 8100a3e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100a40:	4b23      	ldr	r3, [pc, #140]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a42:	2200      	movs	r2, #0
 8100a44:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100a46:	4b22      	ldr	r3, [pc, #136]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a48:	2200      	movs	r2, #0
 8100a4a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100a4c:	4b20      	ldr	r3, [pc, #128]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a4e:	2200      	movs	r2, #0
 8100a50:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8100a52:	4b1f      	ldr	r3, [pc, #124]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a54:	2200      	movs	r2, #0
 8100a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8100a58:	4b1d      	ldr	r3, [pc, #116]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a5a:	2200      	movs	r2, #0
 8100a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100a5e:	4b1c      	ldr	r3, [pc, #112]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a60:	2200      	movs	r2, #0
 8100a62:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8100a64:	4b1a      	ldr	r3, [pc, #104]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a66:	2200      	movs	r2, #0
 8100a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8100a6c:	4b18      	ldr	r3, [pc, #96]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a6e:	2201      	movs	r2, #1
 8100a70:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100a72:	4b17      	ldr	r3, [pc, #92]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100a78:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8100a7a:	4b15      	ldr	r3, [pc, #84]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a7c:	2208      	movs	r2, #8
 8100a7e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8100a80:	4b13      	ldr	r3, [pc, #76]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a82:	2201      	movs	r2, #1
 8100a84:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100a86:	4b12      	ldr	r3, [pc, #72]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a88:	2200      	movs	r2, #0
 8100a8a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100a8c:	4b10      	ldr	r3, [pc, #64]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a8e:	2200      	movs	r2, #0
 8100a90:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100a92:	4b0f      	ldr	r3, [pc, #60]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a94:	2200      	movs	r2, #0
 8100a96:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8100a98:	4b0d      	ldr	r3, [pc, #52]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100a9a:	2200      	movs	r2, #0
 8100a9c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100a9e:	4b0c      	ldr	r3, [pc, #48]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100aa0:	2200      	movs	r2, #0
 8100aa2:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8100aa4:	4b0a      	ldr	r3, [pc, #40]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100aa6:	2201      	movs	r2, #1
 8100aa8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8100aaa:	4b09      	ldr	r3, [pc, #36]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100aac:	2200      	movs	r2, #0
 8100aae:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8100ab0:	4807      	ldr	r0, [pc, #28]	; (8100ad0 <MX_SAI2_Init+0x174>)
 8100ab2:	f004 f947 	bl	8104d44 <HAL_SAI_Init>
 8100ab6:	4603      	mov	r3, r0
 8100ab8:	2b00      	cmp	r3, #0
 8100aba:	d001      	beq.n	8100ac0 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8100abc:	f000 f9c0 	bl	8100e40 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8100ac0:	bf00      	nop
 8100ac2:	bd80      	pop	{r7, pc}
 8100ac4:	10000190 	.word	0x10000190
 8100ac8:	40015c04 	.word	0x40015c04
 8100acc:	0002ee00 	.word	0x0002ee00
 8100ad0:	100000f8 	.word	0x100000f8
 8100ad4:	40015c24 	.word	0x40015c24

08100ad8 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8100ad8:	b580      	push	{r7, lr}
 8100ada:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8100adc:	4b0f      	ldr	r3, [pc, #60]	; (8100b1c <MX_SDMMC1_MMC_Init+0x44>)
 8100ade:	4a10      	ldr	r2, [pc, #64]	; (8100b20 <MX_SDMMC1_MMC_Init+0x48>)
 8100ae0:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100ae2:	4b0e      	ldr	r3, [pc, #56]	; (8100b1c <MX_SDMMC1_MMC_Init+0x44>)
 8100ae4:	2200      	movs	r2, #0
 8100ae6:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100ae8:	4b0c      	ldr	r3, [pc, #48]	; (8100b1c <MX_SDMMC1_MMC_Init+0x44>)
 8100aea:	2200      	movs	r2, #0
 8100aec:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8100aee:	4b0b      	ldr	r3, [pc, #44]	; (8100b1c <MX_SDMMC1_MMC_Init+0x44>)
 8100af0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8100af4:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100af6:	4b09      	ldr	r3, [pc, #36]	; (8100b1c <MX_SDMMC1_MMC_Init+0x44>)
 8100af8:	2200      	movs	r2, #0
 8100afa:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8100afc:	4b07      	ldr	r3, [pc, #28]	; (8100b1c <MX_SDMMC1_MMC_Init+0x44>)
 8100afe:	2200      	movs	r2, #0
 8100b00:	615a      	str	r2, [r3, #20]
  hmmc1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8100b02:	4b06      	ldr	r3, [pc, #24]	; (8100b1c <MX_SDMMC1_MMC_Init+0x44>)
 8100b04:	2201      	movs	r2, #1
 8100b06:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8100b08:	4804      	ldr	r0, [pc, #16]	; (8100b1c <MX_SDMMC1_MMC_Init+0x44>)
 8100b0a:	f002 fa11 	bl	8102f30 <HAL_MMC_Init>
 8100b0e:	4603      	mov	r3, r0
 8100b10:	2b00      	cmp	r3, #0
 8100b12:	d001      	beq.n	8100b18 <MX_SDMMC1_MMC_Init+0x40>
  {
    Error_Handler();
 8100b14:	f000 f994 	bl	8100e40 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100b18:	bf00      	nop
 8100b1a:	bd80      	pop	{r7, pc}
 8100b1c:	100006bc 	.word	0x100006bc
 8100b20:	52007000 	.word	0x52007000

08100b24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100b24:	b580      	push	{r7, lr}
 8100b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100b28:	4b22      	ldr	r3, [pc, #136]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b2a:	4a23      	ldr	r2, [pc, #140]	; (8100bb8 <MX_USART3_UART_Init+0x94>)
 8100b2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100b2e:	4b21      	ldr	r3, [pc, #132]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100b34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100b36:	4b1f      	ldr	r3, [pc, #124]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b38:	2200      	movs	r2, #0
 8100b3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100b3c:	4b1d      	ldr	r3, [pc, #116]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b3e:	2200      	movs	r2, #0
 8100b40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100b42:	4b1c      	ldr	r3, [pc, #112]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b44:	2200      	movs	r2, #0
 8100b46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100b48:	4b1a      	ldr	r3, [pc, #104]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b4a:	220c      	movs	r2, #12
 8100b4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100b4e:	4b19      	ldr	r3, [pc, #100]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b50:	2200      	movs	r2, #0
 8100b52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100b54:	4b17      	ldr	r3, [pc, #92]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b56:	2200      	movs	r2, #0
 8100b58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100b5a:	4b16      	ldr	r3, [pc, #88]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b5c:	2200      	movs	r2, #0
 8100b5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100b60:	4b14      	ldr	r3, [pc, #80]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b62:	2200      	movs	r2, #0
 8100b64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100b66:	4b13      	ldr	r3, [pc, #76]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b68:	2200      	movs	r2, #0
 8100b6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100b6c:	4811      	ldr	r0, [pc, #68]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b6e:	f004 fbfd 	bl	810536c <HAL_UART_Init>
 8100b72:	4603      	mov	r3, r0
 8100b74:	2b00      	cmp	r3, #0
 8100b76:	d001      	beq.n	8100b7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100b78:	f000 f962 	bl	8100e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100b7c:	2100      	movs	r1, #0
 8100b7e:	480d      	ldr	r0, [pc, #52]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b80:	f005 fb97 	bl	81062b2 <HAL_UARTEx_SetTxFifoThreshold>
 8100b84:	4603      	mov	r3, r0
 8100b86:	2b00      	cmp	r3, #0
 8100b88:	d001      	beq.n	8100b8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100b8a:	f000 f959 	bl	8100e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100b8e:	2100      	movs	r1, #0
 8100b90:	4808      	ldr	r0, [pc, #32]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100b92:	f005 fbcc 	bl	810632e <HAL_UARTEx_SetRxFifoThreshold>
 8100b96:	4603      	mov	r3, r0
 8100b98:	2b00      	cmp	r3, #0
 8100b9a:	d001      	beq.n	8100ba0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100b9c:	f000 f950 	bl	8100e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100ba0:	4804      	ldr	r0, [pc, #16]	; (8100bb4 <MX_USART3_UART_Init+0x90>)
 8100ba2:	f005 fb4d 	bl	8106240 <HAL_UARTEx_DisableFifoMode>
 8100ba6:	4603      	mov	r3, r0
 8100ba8:	2b00      	cmp	r3, #0
 8100baa:	d001      	beq.n	8100bb0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100bac:	f000 f948 	bl	8100e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100bb0:	bf00      	nop
 8100bb2:	bd80      	pop	{r7, pc}
 8100bb4:	10000228 	.word	0x10000228
 8100bb8:	40004800 	.word	0x40004800

08100bbc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8100bbc:	b580      	push	{r7, lr}
 8100bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8100bc0:	4b15      	ldr	r3, [pc, #84]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100bc2:	4a16      	ldr	r2, [pc, #88]	; (8100c1c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8100bc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8100bc6:	4b14      	ldr	r3, [pc, #80]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100bc8:	2209      	movs	r2, #9
 8100bca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8100bcc:	4b12      	ldr	r3, [pc, #72]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100bce:	2202      	movs	r2, #2
 8100bd0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8100bd2:	4b11      	ldr	r3, [pc, #68]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100bd4:	2200      	movs	r2, #0
 8100bd6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8100bd8:	4b0f      	ldr	r3, [pc, #60]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100bda:	2202      	movs	r2, #2
 8100bdc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8100bde:	4b0e      	ldr	r3, [pc, #56]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100be0:	2200      	movs	r2, #0
 8100be2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8100be4:	4b0c      	ldr	r3, [pc, #48]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100be6:	2200      	movs	r2, #0
 8100be8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8100bea:	4b0b      	ldr	r3, [pc, #44]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100bec:	2200      	movs	r2, #0
 8100bee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8100bf0:	4b09      	ldr	r3, [pc, #36]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100bf2:	2201      	movs	r2, #1
 8100bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8100bf6:	4b08      	ldr	r3, [pc, #32]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100bf8:	2201      	movs	r2, #1
 8100bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8100bfc:	4b06      	ldr	r3, [pc, #24]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100bfe:	2200      	movs	r2, #0
 8100c00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8100c02:	4805      	ldr	r0, [pc, #20]	; (8100c18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100c04:	f002 fdd6 	bl	81037b4 <HAL_PCD_Init>
 8100c08:	4603      	mov	r3, r0
 8100c0a:	2b00      	cmp	r3, #0
 8100c0c:	d001      	beq.n	8100c12 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8100c0e:	f000 f917 	bl	8100e40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8100c12:	bf00      	nop
 8100c14:	bd80      	pop	{r7, pc}
 8100c16:	bf00      	nop
 8100c18:	100002b4 	.word	0x100002b4
 8100c1c:	40080000 	.word	0x40080000

08100c20 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8100c20:	b580      	push	{r7, lr}
 8100c22:	b088      	sub	sp, #32
 8100c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8100c26:	1d3b      	adds	r3, r7, #4
 8100c28:	2200      	movs	r2, #0
 8100c2a:	601a      	str	r2, [r3, #0]
 8100c2c:	605a      	str	r2, [r3, #4]
 8100c2e:	609a      	str	r2, [r3, #8]
 8100c30:	60da      	str	r2, [r3, #12]
 8100c32:	611a      	str	r2, [r3, #16]
 8100c34:	615a      	str	r2, [r3, #20]
 8100c36:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8100c38:	4b1e      	ldr	r3, [pc, #120]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c3a:	4a1f      	ldr	r2, [pc, #124]	; (8100cb8 <MX_FMC_Init+0x98>)
 8100c3c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8100c3e:	4b1d      	ldr	r3, [pc, #116]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c40:	2201      	movs	r2, #1
 8100c42:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8100c44:	4b1b      	ldr	r3, [pc, #108]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c46:	2200      	movs	r2, #0
 8100c48:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8100c4a:	4b1a      	ldr	r3, [pc, #104]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c4c:	2204      	movs	r2, #4
 8100c4e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8100c50:	4b18      	ldr	r3, [pc, #96]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c52:	2210      	movs	r2, #16
 8100c54:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8100c56:	4b17      	ldr	r3, [pc, #92]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c58:	2240      	movs	r2, #64	; 0x40
 8100c5a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8100c5c:	4b15      	ldr	r3, [pc, #84]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c5e:	2280      	movs	r2, #128	; 0x80
 8100c60:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8100c62:	4b14      	ldr	r3, [pc, #80]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c64:	2200      	movs	r2, #0
 8100c66:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8100c68:	4b12      	ldr	r3, [pc, #72]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c6a:	2200      	movs	r2, #0
 8100c6c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8100c6e:	4b11      	ldr	r3, [pc, #68]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c70:	2200      	movs	r2, #0
 8100c72:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8100c74:	4b0f      	ldr	r3, [pc, #60]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c76:	2200      	movs	r2, #0
 8100c78:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8100c7a:	2310      	movs	r3, #16
 8100c7c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8100c7e:	2310      	movs	r3, #16
 8100c80:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8100c82:	2310      	movs	r3, #16
 8100c84:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8100c86:	2310      	movs	r3, #16
 8100c88:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8100c8a:	2310      	movs	r3, #16
 8100c8c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8100c8e:	2310      	movs	r3, #16
 8100c90:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8100c92:	2310      	movs	r3, #16
 8100c94:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8100c96:	1d3b      	adds	r3, r7, #4
 8100c98:	4619      	mov	r1, r3
 8100c9a:	4806      	ldr	r0, [pc, #24]	; (8100cb4 <MX_FMC_Init+0x94>)
 8100c9c:	f004 fb2a 	bl	81052f4 <HAL_SDRAM_Init>
 8100ca0:	4603      	mov	r3, r0
 8100ca2:	2b00      	cmp	r3, #0
 8100ca4:	d001      	beq.n	8100caa <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8100ca6:	f000 f8cb 	bl	8100e40 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8100caa:	bf00      	nop
 8100cac:	3720      	adds	r7, #32
 8100cae:	46bd      	mov	sp, r7
 8100cb0:	bd80      	pop	{r7, pc}
 8100cb2:	bf00      	nop
 8100cb4:	100009d4 	.word	0x100009d4
 8100cb8:	52004140 	.word	0x52004140

08100cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100cbc:	b580      	push	{r7, lr}
 8100cbe:	b08e      	sub	sp, #56	; 0x38
 8100cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100cc6:	2200      	movs	r2, #0
 8100cc8:	601a      	str	r2, [r3, #0]
 8100cca:	605a      	str	r2, [r3, #4]
 8100ccc:	609a      	str	r2, [r3, #8]
 8100cce:	60da      	str	r2, [r3, #12]
 8100cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100cd2:	4b58      	ldr	r3, [pc, #352]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cd8:	4a56      	ldr	r2, [pc, #344]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ce2:	4b54      	ldr	r3, [pc, #336]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100cec:	623b      	str	r3, [r7, #32]
 8100cee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100cf0:	4b50      	ldr	r3, [pc, #320]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cf6:	4a4f      	ldr	r2, [pc, #316]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100cf8:	f043 0302 	orr.w	r3, r3, #2
 8100cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d00:	4b4c      	ldr	r3, [pc, #304]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d06:	f003 0302 	and.w	r3, r3, #2
 8100d0a:	61fb      	str	r3, [r7, #28]
 8100d0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100d0e:	4b49      	ldr	r3, [pc, #292]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d14:	4a47      	ldr	r2, [pc, #284]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d1e:	4b45      	ldr	r3, [pc, #276]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100d28:	61bb      	str	r3, [r7, #24]
 8100d2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100d2c:	4b41      	ldr	r3, [pc, #260]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d32:	4a40      	ldr	r2, [pc, #256]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d34:	f043 0304 	orr.w	r3, r3, #4
 8100d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d3c:	4b3d      	ldr	r3, [pc, #244]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d42:	f003 0304 	and.w	r3, r3, #4
 8100d46:	617b      	str	r3, [r7, #20]
 8100d48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100d4a:	4b3a      	ldr	r3, [pc, #232]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d50:	4a38      	ldr	r2, [pc, #224]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d52:	f043 0310 	orr.w	r3, r3, #16
 8100d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d5a:	4b36      	ldr	r3, [pc, #216]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d60:	f003 0310 	and.w	r3, r3, #16
 8100d64:	613b      	str	r3, [r7, #16]
 8100d66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100d68:	4b32      	ldr	r3, [pc, #200]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d6e:	4a31      	ldr	r2, [pc, #196]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d78:	4b2e      	ldr	r3, [pc, #184]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100d82:	60fb      	str	r3, [r7, #12]
 8100d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100d86:	4b2b      	ldr	r3, [pc, #172]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d8c:	4a29      	ldr	r2, [pc, #164]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d8e:	f043 0308 	orr.w	r3, r3, #8
 8100d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d96:	4b27      	ldr	r3, [pc, #156]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d9c:	f003 0308 	and.w	r3, r3, #8
 8100da0:	60bb      	str	r3, [r7, #8]
 8100da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100da4:	4b23      	ldr	r3, [pc, #140]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100daa:	4a22      	ldr	r2, [pc, #136]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100dac:	f043 0301 	orr.w	r3, r3, #1
 8100db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100db4:	4b1f      	ldr	r3, [pc, #124]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dba:	f003 0301 	and.w	r3, r3, #1
 8100dbe:	607b      	str	r3, [r7, #4]
 8100dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100dc2:	4b1c      	ldr	r3, [pc, #112]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dc8:	4a1a      	ldr	r2, [pc, #104]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100dca:	f043 0320 	orr.w	r3, r3, #32
 8100dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100dd2:	4b18      	ldr	r3, [pc, #96]	; (8100e34 <MX_GPIO_Init+0x178>)
 8100dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dd8:	f003 0320 	and.w	r3, r3, #32
 8100ddc:	603b      	str	r3, [r7, #0]
 8100dde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100de0:	2200      	movs	r2, #0
 8100de2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8100de6:	4814      	ldr	r0, [pc, #80]	; (8100e38 <MX_GPIO_Init+0x17c>)
 8100de8:	f002 f85c 	bl	8102ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8100dec:	2330      	movs	r3, #48	; 0x30
 8100dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100df0:	2302      	movs	r3, #2
 8100df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100df4:	2300      	movs	r3, #0
 8100df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100df8:	2300      	movs	r3, #0
 8100dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8100dfc:	230a      	movs	r3, #10
 8100dfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100e04:	4619      	mov	r1, r3
 8100e06:	480d      	ldr	r0, [pc, #52]	; (8100e3c <MX_GPIO_Init+0x180>)
 8100e08:	f001 fe9c 	bl	8102b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8100e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100e12:	2301      	movs	r3, #1
 8100e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e16:	2300      	movs	r3, #0
 8100e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e1a:	2300      	movs	r3, #0
 8100e1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8100e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100e22:	4619      	mov	r1, r3
 8100e24:	4804      	ldr	r0, [pc, #16]	; (8100e38 <MX_GPIO_Init+0x17c>)
 8100e26:	f001 fe8d 	bl	8102b44 <HAL_GPIO_Init>

}
 8100e2a:	bf00      	nop
 8100e2c:	3738      	adds	r7, #56	; 0x38
 8100e2e:	46bd      	mov	sp, r7
 8100e30:	bd80      	pop	{r7, pc}
 8100e32:	bf00      	nop
 8100e34:	58024400 	.word	0x58024400
 8100e38:	58022000 	.word	0x58022000
 8100e3c:	58021000 	.word	0x58021000

08100e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100e40:	b480      	push	{r7}
 8100e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8100e44:	bf00      	nop
 8100e46:	46bd      	mov	sp, r7
 8100e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e4c:	4770      	bx	lr
	...

08100e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100e50:	b480      	push	{r7}
 8100e52:	b083      	sub	sp, #12
 8100e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100e56:	4b0a      	ldr	r3, [pc, #40]	; (8100e80 <HAL_MspInit+0x30>)
 8100e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100e5c:	4a08      	ldr	r2, [pc, #32]	; (8100e80 <HAL_MspInit+0x30>)
 8100e5e:	f043 0302 	orr.w	r3, r3, #2
 8100e62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100e66:	4b06      	ldr	r3, [pc, #24]	; (8100e80 <HAL_MspInit+0x30>)
 8100e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100e6c:	f003 0302 	and.w	r3, r3, #2
 8100e70:	607b      	str	r3, [r7, #4]
 8100e72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100e74:	bf00      	nop
 8100e76:	370c      	adds	r7, #12
 8100e78:	46bd      	mov	sp, r7
 8100e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e7e:	4770      	bx	lr
 8100e80:	58024400 	.word	0x58024400

08100e84 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8100e84:	b580      	push	{r7, lr}
 8100e86:	b092      	sub	sp, #72	; 0x48
 8100e88:	af00      	add	r7, sp, #0
 8100e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100e8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100e90:	2200      	movs	r2, #0
 8100e92:	601a      	str	r2, [r3, #0]
 8100e94:	605a      	str	r2, [r3, #4]
 8100e96:	609a      	str	r2, [r3, #8]
 8100e98:	60da      	str	r2, [r3, #12]
 8100e9a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8100e9c:	687b      	ldr	r3, [r7, #4]
 8100e9e:	681b      	ldr	r3, [r3, #0]
 8100ea0:	4a87      	ldr	r2, [pc, #540]	; (81010c0 <HAL_ETH_MspInit+0x23c>)
 8100ea2:	4293      	cmp	r3, r2
 8100ea4:	f040 8108 	bne.w	81010b8 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8100ea8:	4b86      	ldr	r3, [pc, #536]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100eaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100eae:	4a85      	ldr	r2, [pc, #532]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100eb4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100eb8:	4b82      	ldr	r3, [pc, #520]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100eba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8100ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8100ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8100ec6:	4b7f      	ldr	r3, [pc, #508]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100ec8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100ecc:	4a7d      	ldr	r2, [pc, #500]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100ed2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100ed6:	4b7b      	ldr	r3, [pc, #492]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100ed8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8100ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8100ee4:	4b77      	ldr	r3, [pc, #476]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100ee6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100eea:	4a76      	ldr	r2, [pc, #472]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100ef0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100ef4:	4b73      	ldr	r3, [pc, #460]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100ef6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8100f00:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8100f02:	4b70      	ldr	r3, [pc, #448]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f08:	4a6e      	ldr	r2, [pc, #440]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f12:	4b6c      	ldr	r3, [pc, #432]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8100f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8100f20:	4b68      	ldr	r3, [pc, #416]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f26:	4a67      	ldr	r2, [pc, #412]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f28:	f043 0310 	orr.w	r3, r3, #16
 8100f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f30:	4b64      	ldr	r3, [pc, #400]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f36:	f003 0310 	and.w	r3, r3, #16
 8100f3a:	623b      	str	r3, [r7, #32]
 8100f3c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8100f3e:	4b61      	ldr	r3, [pc, #388]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f44:	4a5f      	ldr	r2, [pc, #380]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f4e:	4b5d      	ldr	r3, [pc, #372]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100f58:	61fb      	str	r3, [r7, #28]
 8100f5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100f5c:	4b59      	ldr	r3, [pc, #356]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f62:	4a58      	ldr	r2, [pc, #352]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f64:	f043 0304 	orr.w	r3, r3, #4
 8100f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f6c:	4b55      	ldr	r3, [pc, #340]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f72:	f003 0304 	and.w	r3, r3, #4
 8100f76:	61bb      	str	r3, [r7, #24]
 8100f78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8100f7a:	4b52      	ldr	r3, [pc, #328]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f80:	4a50      	ldr	r2, [pc, #320]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f8a:	4b4e      	ldr	r3, [pc, #312]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100f94:	617b      	str	r3, [r7, #20]
 8100f96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100f98:	4b4a      	ldr	r3, [pc, #296]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f9e:	4a49      	ldr	r2, [pc, #292]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100fa0:	f043 0301 	orr.w	r3, r3, #1
 8100fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100fa8:	4b46      	ldr	r3, [pc, #280]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fae:	f003 0301 	and.w	r3, r3, #1
 8100fb2:	613b      	str	r3, [r7, #16]
 8100fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100fb6:	4b43      	ldr	r3, [pc, #268]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fbc:	4a41      	ldr	r2, [pc, #260]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100fbe:	f043 0302 	orr.w	r3, r3, #2
 8100fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100fc6:	4b3f      	ldr	r3, [pc, #252]	; (81010c4 <HAL_ETH_MspInit+0x240>)
 8100fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fcc:	f003 0302 	and.w	r3, r3, #2
 8100fd0:	60fb      	str	r3, [r7, #12]
 8100fd2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8100fd4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8100fd8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100fda:	2302      	movs	r3, #2
 8100fdc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fde:	2300      	movs	r3, #0
 8100fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fe2:	2300      	movs	r3, #0
 8100fe4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100fe6:	230b      	movs	r3, #11
 8100fe8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100fea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100fee:	4619      	mov	r1, r3
 8100ff0:	4835      	ldr	r0, [pc, #212]	; (81010c8 <HAL_ETH_MspInit+0x244>)
 8100ff2:	f001 fda7 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8100ff6:	2304      	movs	r3, #4
 8100ff8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ffa:	2302      	movs	r3, #2
 8100ffc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ffe:	2300      	movs	r3, #0
 8101000:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101002:	2300      	movs	r3, #0
 8101004:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101006:	230b      	movs	r3, #11
 8101008:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 810100a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 810100e:	4619      	mov	r1, r3
 8101010:	482e      	ldr	r0, [pc, #184]	; (81010cc <HAL_ETH_MspInit+0x248>)
 8101012:	f001 fd97 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8101016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810101a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810101c:	2302      	movs	r3, #2
 810101e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101020:	2300      	movs	r3, #0
 8101022:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101024:	2300      	movs	r3, #0
 8101026:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101028:	230b      	movs	r3, #11
 810102a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 810102c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8101030:	4619      	mov	r1, r3
 8101032:	4827      	ldr	r0, [pc, #156]	; (81010d0 <HAL_ETH_MspInit+0x24c>)
 8101034:	f001 fd86 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8101038:	233e      	movs	r3, #62	; 0x3e
 810103a:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810103c:	2302      	movs	r3, #2
 810103e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101040:	2300      	movs	r3, #0
 8101042:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101044:	2300      	movs	r3, #0
 8101046:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101048:	230b      	movs	r3, #11
 810104a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810104c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8101050:	4619      	mov	r1, r3
 8101052:	4820      	ldr	r0, [pc, #128]	; (81010d4 <HAL_ETH_MspInit+0x250>)
 8101054:	f001 fd76 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8101058:	230c      	movs	r3, #12
 810105a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810105c:	2302      	movs	r3, #2
 810105e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101060:	2300      	movs	r3, #0
 8101062:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101064:	2300      	movs	r3, #0
 8101066:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101068:	230b      	movs	r3, #11
 810106a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 810106c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8101070:	4619      	mov	r1, r3
 8101072:	4819      	ldr	r0, [pc, #100]	; (81010d8 <HAL_ETH_MspInit+0x254>)
 8101074:	f001 fd66 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8101078:	2386      	movs	r3, #134	; 0x86
 810107a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810107c:	2302      	movs	r3, #2
 810107e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101080:	2300      	movs	r3, #0
 8101082:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101084:	2300      	movs	r3, #0
 8101086:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101088:	230b      	movs	r3, #11
 810108a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810108c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8101090:	4619      	mov	r1, r3
 8101092:	4812      	ldr	r0, [pc, #72]	; (81010dc <HAL_ETH_MspInit+0x258>)
 8101094:	f001 fd56 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 8101098:	2303      	movs	r3, #3
 810109a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810109c:	2302      	movs	r3, #2
 810109e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010a0:	2300      	movs	r3, #0
 81010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010a4:	2300      	movs	r3, #0
 81010a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81010a8:	230b      	movs	r3, #11
 81010aa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81010ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 81010b0:	4619      	mov	r1, r3
 81010b2:	480b      	ldr	r0, [pc, #44]	; (81010e0 <HAL_ETH_MspInit+0x25c>)
 81010b4:	f001 fd46 	bl	8102b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 81010b8:	bf00      	nop
 81010ba:	3748      	adds	r7, #72	; 0x48
 81010bc:	46bd      	mov	sp, r7
 81010be:	bd80      	pop	{r7, pc}
 81010c0:	40028000 	.word	0x40028000
 81010c4:	58024400 	.word	0x58024400
 81010c8:	58021800 	.word	0x58021800
 81010cc:	58021000 	.word	0x58021000
 81010d0:	58022000 	.word	0x58022000
 81010d4:	58020800 	.word	0x58020800
 81010d8:	58021c00 	.word	0x58021c00
 81010dc:	58020000 	.word	0x58020000
 81010e0:	58020400 	.word	0x58020400

081010e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 81010e4:	b580      	push	{r7, lr}
 81010e6:	b08c      	sub	sp, #48	; 0x30
 81010e8:	af00      	add	r7, sp, #0
 81010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010ec:	f107 031c 	add.w	r3, r7, #28
 81010f0:	2200      	movs	r2, #0
 81010f2:	601a      	str	r2, [r3, #0]
 81010f4:	605a      	str	r2, [r3, #4]
 81010f6:	609a      	str	r2, [r3, #8]
 81010f8:	60da      	str	r2, [r3, #12]
 81010fa:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 81010fc:	687b      	ldr	r3, [r7, #4]
 81010fe:	681b      	ldr	r3, [r3, #0]
 8101100:	4a3e      	ldr	r2, [pc, #248]	; (81011fc <HAL_FDCAN_MspInit+0x118>)
 8101102:	4293      	cmp	r3, r2
 8101104:	d138      	bne.n	8101178 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8101106:	4b3e      	ldr	r3, [pc, #248]	; (8101200 <HAL_FDCAN_MspInit+0x11c>)
 8101108:	681b      	ldr	r3, [r3, #0]
 810110a:	3301      	adds	r3, #1
 810110c:	4a3c      	ldr	r2, [pc, #240]	; (8101200 <HAL_FDCAN_MspInit+0x11c>)
 810110e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8101110:	4b3b      	ldr	r3, [pc, #236]	; (8101200 <HAL_FDCAN_MspInit+0x11c>)
 8101112:	681b      	ldr	r3, [r3, #0]
 8101114:	2b01      	cmp	r3, #1
 8101116:	d10e      	bne.n	8101136 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8101118:	4b3a      	ldr	r3, [pc, #232]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 810111a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 810111e:	4a39      	ldr	r2, [pc, #228]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 8101120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101124:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8101128:	4b36      	ldr	r3, [pc, #216]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 810112a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 810112e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101132:	61bb      	str	r3, [r7, #24]
 8101134:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101136:	4b33      	ldr	r3, [pc, #204]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 8101138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810113c:	4a31      	ldr	r2, [pc, #196]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 810113e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101146:	4b2f      	ldr	r3, [pc, #188]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 8101148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810114c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101150:	617b      	str	r3, [r7, #20]
 8101152:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN2_RXH14_Pin|FDCAN1_TX_Pin;
 8101154:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8101158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810115a:	2302      	movs	r3, #2
 810115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810115e:	2300      	movs	r3, #0
 8101160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101162:	2300      	movs	r3, #0
 8101164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8101166:	2309      	movs	r3, #9
 8101168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 810116a:	f107 031c 	add.w	r3, r7, #28
 810116e:	4619      	mov	r1, r3
 8101170:	4825      	ldr	r0, [pc, #148]	; (8101208 <HAL_FDCAN_MspInit+0x124>)
 8101172:	f001 fce7 	bl	8102b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8101176:	e03c      	b.n	81011f2 <HAL_FDCAN_MspInit+0x10e>
  else if(hfdcan->Instance==FDCAN2)
 8101178:	687b      	ldr	r3, [r7, #4]
 810117a:	681b      	ldr	r3, [r3, #0]
 810117c:	4a23      	ldr	r2, [pc, #140]	; (810120c <HAL_FDCAN_MspInit+0x128>)
 810117e:	4293      	cmp	r3, r2
 8101180:	d137      	bne.n	81011f2 <HAL_FDCAN_MspInit+0x10e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8101182:	4b1f      	ldr	r3, [pc, #124]	; (8101200 <HAL_FDCAN_MspInit+0x11c>)
 8101184:	681b      	ldr	r3, [r3, #0]
 8101186:	3301      	adds	r3, #1
 8101188:	4a1d      	ldr	r2, [pc, #116]	; (8101200 <HAL_FDCAN_MspInit+0x11c>)
 810118a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 810118c:	4b1c      	ldr	r3, [pc, #112]	; (8101200 <HAL_FDCAN_MspInit+0x11c>)
 810118e:	681b      	ldr	r3, [r3, #0]
 8101190:	2b01      	cmp	r3, #1
 8101192:	d10e      	bne.n	81011b2 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8101194:	4b1b      	ldr	r3, [pc, #108]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 8101196:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 810119a:	4a1a      	ldr	r2, [pc, #104]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 810119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81011a0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 81011a4:	4b17      	ldr	r3, [pc, #92]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 81011a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 81011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81011ae:	613b      	str	r3, [r7, #16]
 81011b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81011b2:	4b14      	ldr	r3, [pc, #80]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 81011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011b8:	4a12      	ldr	r2, [pc, #72]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 81011ba:	f043 0302 	orr.w	r3, r3, #2
 81011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011c2:	4b10      	ldr	r3, [pc, #64]	; (8101204 <HAL_FDCAN_MspInit+0x120>)
 81011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011c8:	f003 0302 	and.w	r3, r3, #2
 81011cc:	60fb      	str	r3, [r7, #12]
 81011ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 81011d0:	f242 0320 	movw	r3, #8224	; 0x2020
 81011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011d6:	2302      	movs	r3, #2
 81011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011da:	2300      	movs	r3, #0
 81011dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011de:	2300      	movs	r3, #0
 81011e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 81011e2:	2309      	movs	r3, #9
 81011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81011e6:	f107 031c 	add.w	r3, r7, #28
 81011ea:	4619      	mov	r1, r3
 81011ec:	4808      	ldr	r0, [pc, #32]	; (8101210 <HAL_FDCAN_MspInit+0x12c>)
 81011ee:	f001 fca9 	bl	8102b44 <HAL_GPIO_Init>
}
 81011f2:	bf00      	nop
 81011f4:	3730      	adds	r7, #48	; 0x30
 81011f6:	46bd      	mov	sp, r7
 81011f8:	bd80      	pop	{r7, pc}
 81011fa:	bf00      	nop
 81011fc:	4000a000 	.word	0x4000a000
 8101200:	100000ec 	.word	0x100000ec
 8101204:	58024400 	.word	0x58024400
 8101208:	58021c00 	.word	0x58021c00
 810120c:	4000a400 	.word	0x4000a400
 8101210:	58020400 	.word	0x58020400

08101214 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8101214:	b580      	push	{r7, lr}
 8101216:	b08c      	sub	sp, #48	; 0x30
 8101218:	af00      	add	r7, sp, #0
 810121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810121c:	f107 031c 	add.w	r3, r7, #28
 8101220:	2200      	movs	r2, #0
 8101222:	601a      	str	r2, [r3, #0]
 8101224:	605a      	str	r2, [r3, #4]
 8101226:	609a      	str	r2, [r3, #8]
 8101228:	60da      	str	r2, [r3, #12]
 810122a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	681b      	ldr	r3, [r3, #0]
 8101230:	4a42      	ldr	r2, [pc, #264]	; (810133c <HAL_QSPI_MspInit+0x128>)
 8101232:	4293      	cmp	r3, r2
 8101234:	d17e      	bne.n	8101334 <HAL_QSPI_MspInit+0x120>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8101236:	4b42      	ldr	r3, [pc, #264]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 8101238:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810123c:	4a40      	ldr	r2, [pc, #256]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 810123e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101242:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101246:	4b3e      	ldr	r3, [pc, #248]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 8101248:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810124c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101250:	61bb      	str	r3, [r7, #24]
 8101252:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101254:	4b3a      	ldr	r3, [pc, #232]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 8101256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810125a:	4a39      	ldr	r2, [pc, #228]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 810125c:	f043 0302 	orr.w	r3, r3, #2
 8101260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101264:	4b36      	ldr	r3, [pc, #216]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 8101266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810126a:	f003 0302 	and.w	r3, r3, #2
 810126e:	617b      	str	r3, [r7, #20]
 8101270:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101272:	4b33      	ldr	r3, [pc, #204]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 8101274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101278:	4a31      	ldr	r2, [pc, #196]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 810127a:	f043 0320 	orr.w	r3, r3, #32
 810127e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101282:	4b2f      	ldr	r3, [pc, #188]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 8101284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101288:	f003 0320 	and.w	r3, r3, #32
 810128c:	613b      	str	r3, [r7, #16]
 810128e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101290:	4b2b      	ldr	r3, [pc, #172]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 8101292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101296:	4a2a      	ldr	r2, [pc, #168]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 8101298:	f043 0308 	orr.w	r3, r3, #8
 810129c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012a0:	4b27      	ldr	r3, [pc, #156]	; (8101340 <HAL_QSPI_MspInit+0x12c>)
 81012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a6:	f003 0308 	and.w	r3, r3, #8
 81012aa:	60fb      	str	r3, [r7, #12]
 81012ac:	68fb      	ldr	r3, [r7, #12]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81012ae:	2340      	movs	r3, #64	; 0x40
 81012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012b2:	2302      	movs	r3, #2
 81012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012b6:	2300      	movs	r3, #0
 81012b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012ba:	2300      	movs	r3, #0
 81012bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81012be:	230a      	movs	r3, #10
 81012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81012c2:	f107 031c 	add.w	r3, r7, #28
 81012c6:	4619      	mov	r1, r3
 81012c8:	481e      	ldr	r0, [pc, #120]	; (8101344 <HAL_QSPI_MspInit+0x130>)
 81012ca:	f001 fc3b 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 81012ce:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 81012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012d4:	2302      	movs	r3, #2
 81012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012d8:	2300      	movs	r3, #0
 81012da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012dc:	2300      	movs	r3, #0
 81012de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81012e0:	2309      	movs	r3, #9
 81012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81012e4:	f107 031c 	add.w	r3, r7, #28
 81012e8:	4619      	mov	r1, r3
 81012ea:	4817      	ldr	r0, [pc, #92]	; (8101348 <HAL_QSPI_MspInit+0x134>)
 81012ec:	f001 fc2a 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81012f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 81012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012f6:	2302      	movs	r3, #2
 81012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012fa:	2300      	movs	r3, #0
 81012fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012fe:	2300      	movs	r3, #0
 8101300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101302:	230a      	movs	r3, #10
 8101304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101306:	f107 031c 	add.w	r3, r7, #28
 810130a:	4619      	mov	r1, r3
 810130c:	480e      	ldr	r0, [pc, #56]	; (8101348 <HAL_QSPI_MspInit+0x134>)
 810130e:	f001 fc19 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8101312:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101318:	2302      	movs	r3, #2
 810131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810131c:	2300      	movs	r3, #0
 810131e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101320:	2300      	movs	r3, #0
 8101322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101324:	2309      	movs	r3, #9
 8101326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101328:	f107 031c 	add.w	r3, r7, #28
 810132c:	4619      	mov	r1, r3
 810132e:	4807      	ldr	r0, [pc, #28]	; (810134c <HAL_QSPI_MspInit+0x138>)
 8101330:	f001 fc08 	bl	8102b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8101334:	bf00      	nop
 8101336:	3730      	adds	r7, #48	; 0x30
 8101338:	46bd      	mov	sp, r7
 810133a:	bd80      	pop	{r7, pc}
 810133c:	52005000 	.word	0x52005000
 8101340:	58024400 	.word	0x58024400
 8101344:	58020400 	.word	0x58020400
 8101348:	58021400 	.word	0x58021400
 810134c:	58020c00 	.word	0x58020c00

08101350 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8101350:	b580      	push	{r7, lr}
 8101352:	b08c      	sub	sp, #48	; 0x30
 8101354:	af00      	add	r7, sp, #0
 8101356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101358:	f107 031c 	add.w	r3, r7, #28
 810135c:	2200      	movs	r2, #0
 810135e:	601a      	str	r2, [r3, #0]
 8101360:	605a      	str	r2, [r3, #4]
 8101362:	609a      	str	r2, [r3, #8]
 8101364:	60da      	str	r2, [r3, #12]
 8101366:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8101368:	687b      	ldr	r3, [r7, #4]
 810136a:	681b      	ldr	r3, [r3, #0]
 810136c:	4a3a      	ldr	r2, [pc, #232]	; (8101458 <HAL_MMC_MspInit+0x108>)
 810136e:	4293      	cmp	r3, r2
 8101370:	d16d      	bne.n	810144e <HAL_MMC_MspInit+0xfe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101372:	4b3a      	ldr	r3, [pc, #232]	; (810145c <HAL_MMC_MspInit+0x10c>)
 8101374:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101378:	4a38      	ldr	r2, [pc, #224]	; (810145c <HAL_MMC_MspInit+0x10c>)
 810137a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810137e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101382:	4b36      	ldr	r3, [pc, #216]	; (810145c <HAL_MMC_MspInit+0x10c>)
 8101384:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810138c:	61bb      	str	r3, [r7, #24]
 810138e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101390:	4b32      	ldr	r3, [pc, #200]	; (810145c <HAL_MMC_MspInit+0x10c>)
 8101392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101396:	4a31      	ldr	r2, [pc, #196]	; (810145c <HAL_MMC_MspInit+0x10c>)
 8101398:	f043 0304 	orr.w	r3, r3, #4
 810139c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013a0:	4b2e      	ldr	r3, [pc, #184]	; (810145c <HAL_MMC_MspInit+0x10c>)
 81013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013a6:	f003 0304 	and.w	r3, r3, #4
 81013aa:	617b      	str	r3, [r7, #20]
 81013ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81013ae:	4b2b      	ldr	r3, [pc, #172]	; (810145c <HAL_MMC_MspInit+0x10c>)
 81013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013b4:	4a29      	ldr	r2, [pc, #164]	; (810145c <HAL_MMC_MspInit+0x10c>)
 81013b6:	f043 0302 	orr.w	r3, r3, #2
 81013ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013be:	4b27      	ldr	r3, [pc, #156]	; (810145c <HAL_MMC_MspInit+0x10c>)
 81013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013c4:	f003 0302 	and.w	r3, r3, #2
 81013c8:	613b      	str	r3, [r7, #16]
 81013ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81013cc:	4b23      	ldr	r3, [pc, #140]	; (810145c <HAL_MMC_MspInit+0x10c>)
 81013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013d2:	4a22      	ldr	r2, [pc, #136]	; (810145c <HAL_MMC_MspInit+0x10c>)
 81013d4:	f043 0308 	orr.w	r3, r3, #8
 81013d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013dc:	4b1f      	ldr	r3, [pc, #124]	; (810145c <HAL_MMC_MspInit+0x10c>)
 81013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013e2:	f003 0308 	and.w	r3, r3, #8
 81013e6:	60fb      	str	r3, [r7, #12]
 81013e8:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D7
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 81013ea:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 81013ee:	61fb      	str	r3, [r7, #28]
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013f0:	2302      	movs	r3, #2
 81013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013f4:	2300      	movs	r3, #0
 81013f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81013f8:	2303      	movs	r3, #3
 81013fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81013fc:	230c      	movs	r3, #12
 81013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101400:	f107 031c 	add.w	r3, r7, #28
 8101404:	4619      	mov	r1, r3
 8101406:	4816      	ldr	r0, [pc, #88]	; (8101460 <HAL_MMC_MspInit+0x110>)
 8101408:	f001 fb9c 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 810140c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101412:	2302      	movs	r3, #2
 8101414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101416:	2300      	movs	r3, #0
 8101418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810141a:	2303      	movs	r3, #3
 810141c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 810141e:	230c      	movs	r3, #12
 8101420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101422:	f107 031c 	add.w	r3, r7, #28
 8101426:	4619      	mov	r1, r3
 8101428:	480e      	ldr	r0, [pc, #56]	; (8101464 <HAL_MMC_MspInit+0x114>)
 810142a:	f001 fb8b 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 810142e:	2304      	movs	r3, #4
 8101430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101432:	2302      	movs	r3, #2
 8101434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101436:	2300      	movs	r3, #0
 8101438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810143a:	2303      	movs	r3, #3
 810143c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 810143e:	230c      	movs	r3, #12
 8101440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8101442:	f107 031c 	add.w	r3, r7, #28
 8101446:	4619      	mov	r1, r3
 8101448:	4807      	ldr	r0, [pc, #28]	; (8101468 <HAL_MMC_MspInit+0x118>)
 810144a:	f001 fb7b 	bl	8102b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 810144e:	bf00      	nop
 8101450:	3730      	adds	r7, #48	; 0x30
 8101452:	46bd      	mov	sp, r7
 8101454:	bd80      	pop	{r7, pc}
 8101456:	bf00      	nop
 8101458:	52007000 	.word	0x52007000
 810145c:	58024400 	.word	0x58024400
 8101460:	58020800 	.word	0x58020800
 8101464:	58020400 	.word	0x58020400
 8101468:	58020c00 	.word	0x58020c00

0810146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 810146c:	b580      	push	{r7, lr}
 810146e:	b08a      	sub	sp, #40	; 0x28
 8101470:	af00      	add	r7, sp, #0
 8101472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101474:	f107 0314 	add.w	r3, r7, #20
 8101478:	2200      	movs	r2, #0
 810147a:	601a      	str	r2, [r3, #0]
 810147c:	605a      	str	r2, [r3, #4]
 810147e:	609a      	str	r2, [r3, #8]
 8101480:	60da      	str	r2, [r3, #12]
 8101482:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	681b      	ldr	r3, [r3, #0]
 8101488:	4a1a      	ldr	r2, [pc, #104]	; (81014f4 <HAL_UART_MspInit+0x88>)
 810148a:	4293      	cmp	r3, r2
 810148c:	d12e      	bne.n	81014ec <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810148e:	4b1a      	ldr	r3, [pc, #104]	; (81014f8 <HAL_UART_MspInit+0x8c>)
 8101490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101494:	4a18      	ldr	r2, [pc, #96]	; (81014f8 <HAL_UART_MspInit+0x8c>)
 8101496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810149a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810149e:	4b16      	ldr	r3, [pc, #88]	; (81014f8 <HAL_UART_MspInit+0x8c>)
 81014a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81014a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81014a8:	613b      	str	r3, [r7, #16]
 81014aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014ac:	4b12      	ldr	r3, [pc, #72]	; (81014f8 <HAL_UART_MspInit+0x8c>)
 81014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014b2:	4a11      	ldr	r2, [pc, #68]	; (81014f8 <HAL_UART_MspInit+0x8c>)
 81014b4:	f043 0302 	orr.w	r3, r3, #2
 81014b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014bc:	4b0e      	ldr	r3, [pc, #56]	; (81014f8 <HAL_UART_MspInit+0x8c>)
 81014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014c2:	f003 0302 	and.w	r3, r3, #2
 81014c6:	60fb      	str	r3, [r7, #12]
 81014c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 81014ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014d0:	2302      	movs	r3, #2
 81014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014d4:	2300      	movs	r3, #0
 81014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014d8:	2300      	movs	r3, #0
 81014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81014dc:	2307      	movs	r3, #7
 81014de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81014e0:	f107 0314 	add.w	r3, r7, #20
 81014e4:	4619      	mov	r1, r3
 81014e6:	4805      	ldr	r0, [pc, #20]	; (81014fc <HAL_UART_MspInit+0x90>)
 81014e8:	f001 fb2c 	bl	8102b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81014ec:	bf00      	nop
 81014ee:	3728      	adds	r7, #40	; 0x28
 81014f0:	46bd      	mov	sp, r7
 81014f2:	bd80      	pop	{r7, pc}
 81014f4:	40004800 	.word	0x40004800
 81014f8:	58024400 	.word	0x58024400
 81014fc:	58020400 	.word	0x58020400

08101500 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8101500:	b580      	push	{r7, lr}
 8101502:	b08a      	sub	sp, #40	; 0x28
 8101504:	af00      	add	r7, sp, #0
 8101506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101508:	f107 0314 	add.w	r3, r7, #20
 810150c:	2200      	movs	r2, #0
 810150e:	601a      	str	r2, [r3, #0]
 8101510:	605a      	str	r2, [r3, #4]
 8101512:	609a      	str	r2, [r3, #8]
 8101514:	60da      	str	r2, [r3, #12]
 8101516:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8101518:	687b      	ldr	r3, [r7, #4]
 810151a:	681b      	ldr	r3, [r3, #0]
 810151c:	4a21      	ldr	r2, [pc, #132]	; (81015a4 <HAL_PCD_MspInit+0xa4>)
 810151e:	4293      	cmp	r3, r2
 8101520:	d13b      	bne.n	810159a <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101522:	4b21      	ldr	r3, [pc, #132]	; (81015a8 <HAL_PCD_MspInit+0xa8>)
 8101524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101528:	4a1f      	ldr	r2, [pc, #124]	; (81015a8 <HAL_PCD_MspInit+0xa8>)
 810152a:	f043 0301 	orr.w	r3, r3, #1
 810152e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101532:	4b1d      	ldr	r3, [pc, #116]	; (81015a8 <HAL_PCD_MspInit+0xa8>)
 8101534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101538:	f003 0301 	and.w	r3, r3, #1
 810153c:	613b      	str	r3, [r7, #16]
 810153e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8101540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101546:	2300      	movs	r3, #0
 8101548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810154a:	2300      	movs	r3, #0
 810154c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 810154e:	f107 0314 	add.w	r3, r7, #20
 8101552:	4619      	mov	r1, r3
 8101554:	4815      	ldr	r0, [pc, #84]	; (81015ac <HAL_PCD_MspInit+0xac>)
 8101556:	f001 faf5 	bl	8102b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 810155a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 810155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101560:	2302      	movs	r3, #2
 8101562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101564:	2300      	movs	r3, #0
 8101566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101568:	2300      	movs	r3, #0
 810156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 810156c:	230a      	movs	r3, #10
 810156e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101570:	f107 0314 	add.w	r3, r7, #20
 8101574:	4619      	mov	r1, r3
 8101576:	480d      	ldr	r0, [pc, #52]	; (81015ac <HAL_PCD_MspInit+0xac>)
 8101578:	f001 fae4 	bl	8102b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 810157c:	4b0a      	ldr	r3, [pc, #40]	; (81015a8 <HAL_PCD_MspInit+0xa8>)
 810157e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101582:	4a09      	ldr	r2, [pc, #36]	; (81015a8 <HAL_PCD_MspInit+0xa8>)
 8101584:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8101588:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810158c:	4b06      	ldr	r3, [pc, #24]	; (81015a8 <HAL_PCD_MspInit+0xa8>)
 810158e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101596:	60fb      	str	r3, [r7, #12]
 8101598:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 810159a:	bf00      	nop
 810159c:	3728      	adds	r7, #40	; 0x28
 810159e:	46bd      	mov	sp, r7
 81015a0:	bd80      	pop	{r7, pc}
 81015a2:	bf00      	nop
 81015a4:	40080000 	.word	0x40080000
 81015a8:	58024400 	.word	0x58024400
 81015ac:	58020000 	.word	0x58020000

081015b0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 81015b0:	b580      	push	{r7, lr}
 81015b2:	b086      	sub	sp, #24
 81015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 81015b6:	1d3b      	adds	r3, r7, #4
 81015b8:	2200      	movs	r2, #0
 81015ba:	601a      	str	r2, [r3, #0]
 81015bc:	605a      	str	r2, [r3, #4]
 81015be:	609a      	str	r2, [r3, #8]
 81015c0:	60da      	str	r2, [r3, #12]
 81015c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 81015c4:	4b34      	ldr	r3, [pc, #208]	; (8101698 <HAL_FMC_MspInit+0xe8>)
 81015c6:	681b      	ldr	r3, [r3, #0]
 81015c8:	2b00      	cmp	r3, #0
 81015ca:	d161      	bne.n	8101690 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 81015cc:	4b32      	ldr	r3, [pc, #200]	; (8101698 <HAL_FMC_MspInit+0xe8>)
 81015ce:	2201      	movs	r2, #1
 81015d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 81015d2:	4b32      	ldr	r3, [pc, #200]	; (810169c <HAL_FMC_MspInit+0xec>)
 81015d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 81015d8:	4a30      	ldr	r2, [pc, #192]	; (810169c <HAL_FMC_MspInit+0xec>)
 81015da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81015de:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 81015e2:	4b2e      	ldr	r3, [pc, #184]	; (810169c <HAL_FMC_MspInit+0xec>)
 81015e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 81015e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81015ec:	603b      	str	r3, [r7, #0]
 81015ee:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 81015f0:	f64f 7383 	movw	r3, #65411	; 0xff83
 81015f4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015f6:	2302      	movs	r3, #2
 81015f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015fa:	2300      	movs	r3, #0
 81015fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81015fe:	2303      	movs	r3, #3
 8101600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101602:	230c      	movs	r3, #12
 8101604:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101606:	1d3b      	adds	r3, r7, #4
 8101608:	4619      	mov	r1, r3
 810160a:	4825      	ldr	r0, [pc, #148]	; (81016a0 <HAL_FMC_MspInit+0xf0>)
 810160c:	f001 fa9a 	bl	8102b44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8101610:	f248 1333 	movw	r3, #33075	; 0x8133
 8101614:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101616:	2302      	movs	r3, #2
 8101618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810161a:	2300      	movs	r3, #0
 810161c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810161e:	2303      	movs	r3, #3
 8101620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101622:	230c      	movs	r3, #12
 8101624:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101626:	1d3b      	adds	r3, r7, #4
 8101628:	4619      	mov	r1, r3
 810162a:	481e      	ldr	r0, [pc, #120]	; (81016a4 <HAL_FMC_MspInit+0xf4>)
 810162c:	f001 fa8a 	bl	8102b44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8101630:	f24c 7303 	movw	r3, #50947	; 0xc703
 8101634:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101636:	2302      	movs	r3, #2
 8101638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810163a:	2300      	movs	r3, #0
 810163c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810163e:	2303      	movs	r3, #3
 8101640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101642:	230c      	movs	r3, #12
 8101644:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101646:	1d3b      	adds	r3, r7, #4
 8101648:	4619      	mov	r1, r3
 810164a:	4817      	ldr	r0, [pc, #92]	; (81016a8 <HAL_FMC_MspInit+0xf8>)
 810164c:	f001 fa7a 	bl	8102b44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8101650:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8101654:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101656:	2302      	movs	r3, #2
 8101658:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810165a:	2300      	movs	r3, #0
 810165c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810165e:	2303      	movs	r3, #3
 8101660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101662:	230c      	movs	r3, #12
 8101664:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101666:	1d3b      	adds	r3, r7, #4
 8101668:	4619      	mov	r1, r3
 810166a:	4810      	ldr	r0, [pc, #64]	; (81016ac <HAL_FMC_MspInit+0xfc>)
 810166c:	f001 fa6a 	bl	8102b44 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8101670:	23e0      	movs	r3, #224	; 0xe0
 8101672:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101674:	2302      	movs	r3, #2
 8101676:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101678:	2300      	movs	r3, #0
 810167a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810167c:	2303      	movs	r3, #3
 810167e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101680:	230c      	movs	r3, #12
 8101682:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101684:	1d3b      	adds	r3, r7, #4
 8101686:	4619      	mov	r1, r3
 8101688:	4809      	ldr	r0, [pc, #36]	; (81016b0 <HAL_FMC_MspInit+0x100>)
 810168a:	f001 fa5b 	bl	8102b44 <HAL_GPIO_Init>
 810168e:	e000      	b.n	8101692 <HAL_FMC_MspInit+0xe2>
    return;
 8101690:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8101692:	3718      	adds	r7, #24
 8101694:	46bd      	mov	sp, r7
 8101696:	bd80      	pop	{r7, pc}
 8101698:	100000f0 	.word	0x100000f0
 810169c:	58024400 	.word	0x58024400
 81016a0:	58021000 	.word	0x58021000
 81016a4:	58021800 	.word	0x58021800
 81016a8:	58020c00 	.word	0x58020c00
 81016ac:	58021400 	.word	0x58021400
 81016b0:	58021c00 	.word	0x58021c00

081016b4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 81016b4:	b580      	push	{r7, lr}
 81016b6:	b082      	sub	sp, #8
 81016b8:	af00      	add	r7, sp, #0
 81016ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 81016bc:	f7ff ff78 	bl	81015b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 81016c0:	bf00      	nop
 81016c2:	3708      	adds	r7, #8
 81016c4:	46bd      	mov	sp, r7
 81016c6:	bd80      	pop	{r7, pc}

081016c8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 81016c8:	b580      	push	{r7, lr}
 81016ca:	b08a      	sub	sp, #40	; 0x28
 81016cc:	af00      	add	r7, sp, #0
 81016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 81016d0:	687b      	ldr	r3, [r7, #4]
 81016d2:	681b      	ldr	r3, [r3, #0]
 81016d4:	4a2e      	ldr	r2, [pc, #184]	; (8101790 <HAL_SAI_MspInit+0xc8>)
 81016d6:	4293      	cmp	r3, r2
 81016d8:	d127      	bne.n	810172a <HAL_SAI_MspInit+0x62>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 81016da:	4b2e      	ldr	r3, [pc, #184]	; (8101794 <HAL_SAI_MspInit+0xcc>)
 81016dc:	681b      	ldr	r3, [r3, #0]
 81016de:	2b00      	cmp	r3, #0
 81016e0:	d10e      	bne.n	8101700 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 81016e2:	4b2d      	ldr	r3, [pc, #180]	; (8101798 <HAL_SAI_MspInit+0xd0>)
 81016e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81016e8:	4a2b      	ldr	r2, [pc, #172]	; (8101798 <HAL_SAI_MspInit+0xd0>)
 81016ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81016ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81016f2:	4b29      	ldr	r3, [pc, #164]	; (8101798 <HAL_SAI_MspInit+0xd0>)
 81016f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81016f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81016fc:	613b      	str	r3, [r7, #16]
 81016fe:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8101700:	4b24      	ldr	r3, [pc, #144]	; (8101794 <HAL_SAI_MspInit+0xcc>)
 8101702:	681b      	ldr	r3, [r3, #0]
 8101704:	3301      	adds	r3, #1
 8101706:	4a23      	ldr	r2, [pc, #140]	; (8101794 <HAL_SAI_MspInit+0xcc>)
 8101708:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 810170a:	23f0      	movs	r3, #240	; 0xf0
 810170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810170e:	2302      	movs	r3, #2
 8101710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101712:	2300      	movs	r3, #0
 8101714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101716:	2300      	movs	r3, #0
 8101718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 810171a:	230a      	movs	r3, #10
 810171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 810171e:	f107 0314 	add.w	r3, r7, #20
 8101722:	4619      	mov	r1, r3
 8101724:	481d      	ldr	r0, [pc, #116]	; (810179c <HAL_SAI_MspInit+0xd4>)
 8101726:	f001 fa0d 	bl	8102b44 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 810172a:	687b      	ldr	r3, [r7, #4]
 810172c:	681b      	ldr	r3, [r3, #0]
 810172e:	4a1c      	ldr	r2, [pc, #112]	; (81017a0 <HAL_SAI_MspInit+0xd8>)
 8101730:	4293      	cmp	r3, r2
 8101732:	d128      	bne.n	8101786 <HAL_SAI_MspInit+0xbe>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8101734:	4b17      	ldr	r3, [pc, #92]	; (8101794 <HAL_SAI_MspInit+0xcc>)
 8101736:	681b      	ldr	r3, [r3, #0]
 8101738:	2b00      	cmp	r3, #0
 810173a:	d10e      	bne.n	810175a <HAL_SAI_MspInit+0x92>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 810173c:	4b16      	ldr	r3, [pc, #88]	; (8101798 <HAL_SAI_MspInit+0xd0>)
 810173e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101742:	4a15      	ldr	r2, [pc, #84]	; (8101798 <HAL_SAI_MspInit+0xd0>)
 8101744:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101748:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810174c:	4b12      	ldr	r3, [pc, #72]	; (8101798 <HAL_SAI_MspInit+0xd0>)
 810174e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101756:	60fb      	str	r3, [r7, #12]
 8101758:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 810175a:	4b0e      	ldr	r3, [pc, #56]	; (8101794 <HAL_SAI_MspInit+0xcc>)
 810175c:	681b      	ldr	r3, [r3, #0]
 810175e:	3301      	adds	r3, #1
 8101760:	4a0c      	ldr	r2, [pc, #48]	; (8101794 <HAL_SAI_MspInit+0xcc>)
 8101762:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8101764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8101768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810176a:	2302      	movs	r3, #2
 810176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810176e:	2300      	movs	r3, #0
 8101770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101772:	2300      	movs	r3, #0
 8101774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8101776:	230a      	movs	r3, #10
 8101778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810177a:	f107 0314 	add.w	r3, r7, #20
 810177e:	4619      	mov	r1, r3
 8101780:	4808      	ldr	r0, [pc, #32]	; (81017a4 <HAL_SAI_MspInit+0xdc>)
 8101782:	f001 f9df 	bl	8102b44 <HAL_GPIO_Init>

    }
}
 8101786:	bf00      	nop
 8101788:	3728      	adds	r7, #40	; 0x28
 810178a:	46bd      	mov	sp, r7
 810178c:	bd80      	pop	{r7, pc}
 810178e:	bf00      	nop
 8101790:	40015c04 	.word	0x40015c04
 8101794:	100000f4 	.word	0x100000f4
 8101798:	58024400 	.word	0x58024400
 810179c:	58022000 	.word	0x58022000
 81017a0:	40015c24 	.word	0x40015c24
 81017a4:	58021800 	.word	0x58021800

081017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81017a8:	b480      	push	{r7}
 81017aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 81017ac:	bf00      	nop
 81017ae:	46bd      	mov	sp, r7
 81017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017b4:	4770      	bx	lr

081017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81017b6:	b480      	push	{r7}
 81017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81017ba:	e7fe      	b.n	81017ba <HardFault_Handler+0x4>

081017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81017bc:	b480      	push	{r7}
 81017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81017c0:	e7fe      	b.n	81017c0 <MemManage_Handler+0x4>

081017c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81017c2:	b480      	push	{r7}
 81017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81017c6:	e7fe      	b.n	81017c6 <BusFault_Handler+0x4>

081017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81017c8:	b480      	push	{r7}
 81017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81017cc:	e7fe      	b.n	81017cc <UsageFault_Handler+0x4>

081017ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81017ce:	b480      	push	{r7}
 81017d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81017d2:	bf00      	nop
 81017d4:	46bd      	mov	sp, r7
 81017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017da:	4770      	bx	lr

081017dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81017dc:	b480      	push	{r7}
 81017de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81017e0:	bf00      	nop
 81017e2:	46bd      	mov	sp, r7
 81017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e8:	4770      	bx	lr

081017ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81017ea:	b480      	push	{r7}
 81017ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81017ee:	bf00      	nop
 81017f0:	46bd      	mov	sp, r7
 81017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017f6:	4770      	bx	lr

081017f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81017f8:	b580      	push	{r7, lr}
 81017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81017fc:	f000 f8c0 	bl	8101980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101800:	bf00      	nop
 8101802:	bd80      	pop	{r7, pc}

08101804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8101804:	f8df d034 	ldr.w	sp, [pc, #52]	; 810183c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8101808:	f7fe fee6 	bl	81005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 810180c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 810180e:	e003      	b.n	8101818 <LoopCopyDataInit>

08101810 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8101810:	4b0b      	ldr	r3, [pc, #44]	; (8101840 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8101812:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8101814:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8101816:	3104      	adds	r1, #4

08101818 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8101818:	480a      	ldr	r0, [pc, #40]	; (8101844 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 810181a:	4b0b      	ldr	r3, [pc, #44]	; (8101848 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 810181c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 810181e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8101820:	d3f6      	bcc.n	8101810 <CopyDataInit>
  ldr  r2, =_sbss
 8101822:	4a0a      	ldr	r2, [pc, #40]	; (810184c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8101824:	e002      	b.n	810182c <LoopFillZerobss>

08101826 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8101826:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8101828:	f842 3b04 	str.w	r3, [r2], #4

0810182c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 810182c:	4b08      	ldr	r3, [pc, #32]	; (8101850 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 810182e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8101830:	d3f9      	bcc.n	8101826 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8101832:	f005 fdab 	bl	810738c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101836:	f7fe feeb 	bl	8100610 <main>
  bx  lr    
 810183a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810183c:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8101840:	081074a8 	.word	0x081074a8
  ldr  r0, =_sdata
 8101844:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8101848:	10000010 	.word	0x10000010
  ldr  r2, =_sbss
 810184c:	100000d0 	.word	0x100000d0
  ldr  r3, = _ebss
 8101850:	10000b9c 	.word	0x10000b9c

08101854 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101854:	e7fe      	b.n	8101854 <ADC3_IRQHandler>
	...

08101858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101858:	b580      	push	{r7, lr}
 810185a:	b082      	sub	sp, #8
 810185c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810185e:	4b28      	ldr	r3, [pc, #160]	; (8101900 <HAL_Init+0xa8>)
 8101860:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101864:	4a26      	ldr	r2, [pc, #152]	; (8101900 <HAL_Init+0xa8>)
 8101866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810186a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810186e:	4b24      	ldr	r3, [pc, #144]	; (8101900 <HAL_Init+0xa8>)
 8101870:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101878:	603b      	str	r3, [r7, #0]
 810187a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810187c:	4b21      	ldr	r3, [pc, #132]	; (8101904 <HAL_Init+0xac>)
 810187e:	681b      	ldr	r3, [r3, #0]
 8101880:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101884:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101888:	4a1e      	ldr	r2, [pc, #120]	; (8101904 <HAL_Init+0xac>)
 810188a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810188e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101890:	4b1c      	ldr	r3, [pc, #112]	; (8101904 <HAL_Init+0xac>)
 8101892:	681b      	ldr	r3, [r3, #0]
 8101894:	4a1b      	ldr	r2, [pc, #108]	; (8101904 <HAL_Init+0xac>)
 8101896:	f043 0301 	orr.w	r3, r3, #1
 810189a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810189c:	2003      	movs	r0, #3
 810189e:	f000 f983 	bl	8101ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81018a2:	f002 fa0d 	bl	8103cc0 <HAL_RCC_GetSysClockFreq>
 81018a6:	4601      	mov	r1, r0
 81018a8:	4b15      	ldr	r3, [pc, #84]	; (8101900 <HAL_Init+0xa8>)
 81018aa:	699b      	ldr	r3, [r3, #24]
 81018ac:	0a1b      	lsrs	r3, r3, #8
 81018ae:	f003 030f 	and.w	r3, r3, #15
 81018b2:	4a15      	ldr	r2, [pc, #84]	; (8101908 <HAL_Init+0xb0>)
 81018b4:	5cd3      	ldrb	r3, [r2, r3]
 81018b6:	f003 031f 	and.w	r3, r3, #31
 81018ba:	fa21 f303 	lsr.w	r3, r1, r3
 81018be:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81018c0:	4b0f      	ldr	r3, [pc, #60]	; (8101900 <HAL_Init+0xa8>)
 81018c2:	699b      	ldr	r3, [r3, #24]
 81018c4:	f003 030f 	and.w	r3, r3, #15
 81018c8:	4a0f      	ldr	r2, [pc, #60]	; (8101908 <HAL_Init+0xb0>)
 81018ca:	5cd3      	ldrb	r3, [r2, r3]
 81018cc:	f003 031f 	and.w	r3, r3, #31
 81018d0:	687a      	ldr	r2, [r7, #4]
 81018d2:	fa22 f303 	lsr.w	r3, r2, r3
 81018d6:	4a0d      	ldr	r2, [pc, #52]	; (810190c <HAL_Init+0xb4>)
 81018d8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81018da:	4b0c      	ldr	r3, [pc, #48]	; (810190c <HAL_Init+0xb4>)
 81018dc:	681b      	ldr	r3, [r3, #0]
 81018de:	4a0c      	ldr	r2, [pc, #48]	; (8101910 <HAL_Init+0xb8>)
 81018e0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81018e2:	2000      	movs	r0, #0
 81018e4:	f000 f816 	bl	8101914 <HAL_InitTick>
 81018e8:	4603      	mov	r3, r0
 81018ea:	2b00      	cmp	r3, #0
 81018ec:	d001      	beq.n	81018f2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81018ee:	2301      	movs	r3, #1
 81018f0:	e002      	b.n	81018f8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81018f2:	f7ff faad 	bl	8100e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81018f6:	2300      	movs	r3, #0
}
 81018f8:	4618      	mov	r0, r3
 81018fa:	3708      	adds	r7, #8
 81018fc:	46bd      	mov	sp, r7
 81018fe:	bd80      	pop	{r7, pc}
 8101900:	58024400 	.word	0x58024400
 8101904:	40024400 	.word	0x40024400
 8101908:	08107470 	.word	0x08107470
 810190c:	10000004 	.word	0x10000004
 8101910:	10000000 	.word	0x10000000

08101914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101914:	b580      	push	{r7, lr}
 8101916:	b082      	sub	sp, #8
 8101918:	af00      	add	r7, sp, #0
 810191a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810191c:	4b15      	ldr	r3, [pc, #84]	; (8101974 <HAL_InitTick+0x60>)
 810191e:	781b      	ldrb	r3, [r3, #0]
 8101920:	2b00      	cmp	r3, #0
 8101922:	d101      	bne.n	8101928 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101924:	2301      	movs	r3, #1
 8101926:	e021      	b.n	810196c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101928:	4b13      	ldr	r3, [pc, #76]	; (8101978 <HAL_InitTick+0x64>)
 810192a:	681a      	ldr	r2, [r3, #0]
 810192c:	4b11      	ldr	r3, [pc, #68]	; (8101974 <HAL_InitTick+0x60>)
 810192e:	781b      	ldrb	r3, [r3, #0]
 8101930:	4619      	mov	r1, r3
 8101932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101936:	fbb3 f3f1 	udiv	r3, r3, r1
 810193a:	fbb2 f3f3 	udiv	r3, r2, r3
 810193e:	4618      	mov	r0, r3
 8101940:	f000 f957 	bl	8101bf2 <HAL_SYSTICK_Config>
 8101944:	4603      	mov	r3, r0
 8101946:	2b00      	cmp	r3, #0
 8101948:	d001      	beq.n	810194e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810194a:	2301      	movs	r3, #1
 810194c:	e00e      	b.n	810196c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810194e:	687b      	ldr	r3, [r7, #4]
 8101950:	2b0f      	cmp	r3, #15
 8101952:	d80a      	bhi.n	810196a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101954:	2200      	movs	r2, #0
 8101956:	6879      	ldr	r1, [r7, #4]
 8101958:	f04f 30ff 	mov.w	r0, #4294967295
 810195c:	f000 f92f 	bl	8101bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101960:	4a06      	ldr	r2, [pc, #24]	; (810197c <HAL_InitTick+0x68>)
 8101962:	687b      	ldr	r3, [r7, #4]
 8101964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101966:	2300      	movs	r3, #0
 8101968:	e000      	b.n	810196c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810196a:	2301      	movs	r3, #1
}
 810196c:	4618      	mov	r0, r3
 810196e:	3708      	adds	r7, #8
 8101970:	46bd      	mov	sp, r7
 8101972:	bd80      	pop	{r7, pc}
 8101974:	1000000c 	.word	0x1000000c
 8101978:	10000000 	.word	0x10000000
 810197c:	10000008 	.word	0x10000008

08101980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101980:	b480      	push	{r7}
 8101982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101984:	4b06      	ldr	r3, [pc, #24]	; (81019a0 <HAL_IncTick+0x20>)
 8101986:	781b      	ldrb	r3, [r3, #0]
 8101988:	461a      	mov	r2, r3
 810198a:	4b06      	ldr	r3, [pc, #24]	; (81019a4 <HAL_IncTick+0x24>)
 810198c:	681b      	ldr	r3, [r3, #0]
 810198e:	4413      	add	r3, r2
 8101990:	4a04      	ldr	r2, [pc, #16]	; (81019a4 <HAL_IncTick+0x24>)
 8101992:	6013      	str	r3, [r2, #0]
}
 8101994:	bf00      	nop
 8101996:	46bd      	mov	sp, r7
 8101998:	f85d 7b04 	ldr.w	r7, [sp], #4
 810199c:	4770      	bx	lr
 810199e:	bf00      	nop
 81019a0:	1000000c 	.word	0x1000000c
 81019a4:	10000b98 	.word	0x10000b98

081019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81019a8:	b480      	push	{r7}
 81019aa:	af00      	add	r7, sp, #0
  return uwTick;
 81019ac:	4b03      	ldr	r3, [pc, #12]	; (81019bc <HAL_GetTick+0x14>)
 81019ae:	681b      	ldr	r3, [r3, #0]
}
 81019b0:	4618      	mov	r0, r3
 81019b2:	46bd      	mov	sp, r7
 81019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019b8:	4770      	bx	lr
 81019ba:	bf00      	nop
 81019bc:	10000b98 	.word	0x10000b98

081019c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81019c0:	b580      	push	{r7, lr}
 81019c2:	b084      	sub	sp, #16
 81019c4:	af00      	add	r7, sp, #0
 81019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81019c8:	f7ff ffee 	bl	81019a8 <HAL_GetTick>
 81019cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81019ce:	687b      	ldr	r3, [r7, #4]
 81019d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81019d2:	68fb      	ldr	r3, [r7, #12]
 81019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81019d8:	d005      	beq.n	81019e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81019da:	4b09      	ldr	r3, [pc, #36]	; (8101a00 <HAL_Delay+0x40>)
 81019dc:	781b      	ldrb	r3, [r3, #0]
 81019de:	461a      	mov	r2, r3
 81019e0:	68fb      	ldr	r3, [r7, #12]
 81019e2:	4413      	add	r3, r2
 81019e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81019e6:	bf00      	nop
 81019e8:	f7ff ffde 	bl	81019a8 <HAL_GetTick>
 81019ec:	4602      	mov	r2, r0
 81019ee:	68bb      	ldr	r3, [r7, #8]
 81019f0:	1ad3      	subs	r3, r2, r3
 81019f2:	68fa      	ldr	r2, [r7, #12]
 81019f4:	429a      	cmp	r2, r3
 81019f6:	d8f7      	bhi.n	81019e8 <HAL_Delay+0x28>
  {
  }
}
 81019f8:	bf00      	nop
 81019fa:	3710      	adds	r7, #16
 81019fc:	46bd      	mov	sp, r7
 81019fe:	bd80      	pop	{r7, pc}
 8101a00:	1000000c 	.word	0x1000000c

08101a04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101a04:	b480      	push	{r7}
 8101a06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101a08:	4b03      	ldr	r3, [pc, #12]	; (8101a18 <HAL_GetREVID+0x14>)
 8101a0a:	681b      	ldr	r3, [r3, #0]
 8101a0c:	0c1b      	lsrs	r3, r3, #16
}
 8101a0e:	4618      	mov	r0, r3
 8101a10:	46bd      	mov	sp, r7
 8101a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a16:	4770      	bx	lr
 8101a18:	5c001000 	.word	0x5c001000

08101a1c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8101a1c:	b480      	push	{r7}
 8101a1e:	b083      	sub	sp, #12
 8101a20:	af00      	add	r7, sp, #0
 8101a22:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8101a24:	4b06      	ldr	r3, [pc, #24]	; (8101a40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8101a26:	685b      	ldr	r3, [r3, #4]
 8101a28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8101a2c:	4904      	ldr	r1, [pc, #16]	; (8101a40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	4313      	orrs	r3, r2
 8101a32:	604b      	str	r3, [r1, #4]
}
 8101a34:	bf00      	nop
 8101a36:	370c      	adds	r7, #12
 8101a38:	46bd      	mov	sp, r7
 8101a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a3e:	4770      	bx	lr
 8101a40:	58000400 	.word	0x58000400

08101a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101a44:	b480      	push	{r7}
 8101a46:	b085      	sub	sp, #20
 8101a48:	af00      	add	r7, sp, #0
 8101a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101a4c:	687b      	ldr	r3, [r7, #4]
 8101a4e:	f003 0307 	and.w	r3, r3, #7
 8101a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101a54:	4b0c      	ldr	r3, [pc, #48]	; (8101a88 <__NVIC_SetPriorityGrouping+0x44>)
 8101a56:	68db      	ldr	r3, [r3, #12]
 8101a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101a5a:	68ba      	ldr	r2, [r7, #8]
 8101a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101a60:	4013      	ands	r3, r2
 8101a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101a64:	68fb      	ldr	r3, [r7, #12]
 8101a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101a68:	68bb      	ldr	r3, [r7, #8]
 8101a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101a76:	4a04      	ldr	r2, [pc, #16]	; (8101a88 <__NVIC_SetPriorityGrouping+0x44>)
 8101a78:	68bb      	ldr	r3, [r7, #8]
 8101a7a:	60d3      	str	r3, [r2, #12]
}
 8101a7c:	bf00      	nop
 8101a7e:	3714      	adds	r7, #20
 8101a80:	46bd      	mov	sp, r7
 8101a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a86:	4770      	bx	lr
 8101a88:	e000ed00 	.word	0xe000ed00

08101a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101a8c:	b480      	push	{r7}
 8101a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101a90:	4b04      	ldr	r3, [pc, #16]	; (8101aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8101a92:	68db      	ldr	r3, [r3, #12]
 8101a94:	0a1b      	lsrs	r3, r3, #8
 8101a96:	f003 0307 	and.w	r3, r3, #7
}
 8101a9a:	4618      	mov	r0, r3
 8101a9c:	46bd      	mov	sp, r7
 8101a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa2:	4770      	bx	lr
 8101aa4:	e000ed00 	.word	0xe000ed00

08101aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101aa8:	b480      	push	{r7}
 8101aaa:	b083      	sub	sp, #12
 8101aac:	af00      	add	r7, sp, #0
 8101aae:	4603      	mov	r3, r0
 8101ab0:	6039      	str	r1, [r7, #0]
 8101ab2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101ab4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ab8:	2b00      	cmp	r3, #0
 8101aba:	db0a      	blt.n	8101ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101abc:	683b      	ldr	r3, [r7, #0]
 8101abe:	b2da      	uxtb	r2, r3
 8101ac0:	490c      	ldr	r1, [pc, #48]	; (8101af4 <__NVIC_SetPriority+0x4c>)
 8101ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ac6:	0112      	lsls	r2, r2, #4
 8101ac8:	b2d2      	uxtb	r2, r2
 8101aca:	440b      	add	r3, r1
 8101acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101ad0:	e00a      	b.n	8101ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101ad2:	683b      	ldr	r3, [r7, #0]
 8101ad4:	b2da      	uxtb	r2, r3
 8101ad6:	4908      	ldr	r1, [pc, #32]	; (8101af8 <__NVIC_SetPriority+0x50>)
 8101ad8:	88fb      	ldrh	r3, [r7, #6]
 8101ada:	f003 030f 	and.w	r3, r3, #15
 8101ade:	3b04      	subs	r3, #4
 8101ae0:	0112      	lsls	r2, r2, #4
 8101ae2:	b2d2      	uxtb	r2, r2
 8101ae4:	440b      	add	r3, r1
 8101ae6:	761a      	strb	r2, [r3, #24]
}
 8101ae8:	bf00      	nop
 8101aea:	370c      	adds	r7, #12
 8101aec:	46bd      	mov	sp, r7
 8101aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101af2:	4770      	bx	lr
 8101af4:	e000e100 	.word	0xe000e100
 8101af8:	e000ed00 	.word	0xe000ed00

08101afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101afc:	b480      	push	{r7}
 8101afe:	b089      	sub	sp, #36	; 0x24
 8101b00:	af00      	add	r7, sp, #0
 8101b02:	60f8      	str	r0, [r7, #12]
 8101b04:	60b9      	str	r1, [r7, #8]
 8101b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101b08:	68fb      	ldr	r3, [r7, #12]
 8101b0a:	f003 0307 	and.w	r3, r3, #7
 8101b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101b10:	69fb      	ldr	r3, [r7, #28]
 8101b12:	f1c3 0307 	rsb	r3, r3, #7
 8101b16:	2b04      	cmp	r3, #4
 8101b18:	bf28      	it	cs
 8101b1a:	2304      	movcs	r3, #4
 8101b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101b1e:	69fb      	ldr	r3, [r7, #28]
 8101b20:	3304      	adds	r3, #4
 8101b22:	2b06      	cmp	r3, #6
 8101b24:	d902      	bls.n	8101b2c <NVIC_EncodePriority+0x30>
 8101b26:	69fb      	ldr	r3, [r7, #28]
 8101b28:	3b03      	subs	r3, #3
 8101b2a:	e000      	b.n	8101b2e <NVIC_EncodePriority+0x32>
 8101b2c:	2300      	movs	r3, #0
 8101b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101b30:	f04f 32ff 	mov.w	r2, #4294967295
 8101b34:	69bb      	ldr	r3, [r7, #24]
 8101b36:	fa02 f303 	lsl.w	r3, r2, r3
 8101b3a:	43da      	mvns	r2, r3
 8101b3c:	68bb      	ldr	r3, [r7, #8]
 8101b3e:	401a      	ands	r2, r3
 8101b40:	697b      	ldr	r3, [r7, #20]
 8101b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101b44:	f04f 31ff 	mov.w	r1, #4294967295
 8101b48:	697b      	ldr	r3, [r7, #20]
 8101b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8101b4e:	43d9      	mvns	r1, r3
 8101b50:	687b      	ldr	r3, [r7, #4]
 8101b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101b54:	4313      	orrs	r3, r2
         );
}
 8101b56:	4618      	mov	r0, r3
 8101b58:	3724      	adds	r7, #36	; 0x24
 8101b5a:	46bd      	mov	sp, r7
 8101b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b60:	4770      	bx	lr
	...

08101b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101b64:	b580      	push	{r7, lr}
 8101b66:	b082      	sub	sp, #8
 8101b68:	af00      	add	r7, sp, #0
 8101b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	3b01      	subs	r3, #1
 8101b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101b74:	d301      	bcc.n	8101b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101b76:	2301      	movs	r3, #1
 8101b78:	e00f      	b.n	8101b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101b7a:	4a0a      	ldr	r2, [pc, #40]	; (8101ba4 <SysTick_Config+0x40>)
 8101b7c:	687b      	ldr	r3, [r7, #4]
 8101b7e:	3b01      	subs	r3, #1
 8101b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101b82:	210f      	movs	r1, #15
 8101b84:	f04f 30ff 	mov.w	r0, #4294967295
 8101b88:	f7ff ff8e 	bl	8101aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101b8c:	4b05      	ldr	r3, [pc, #20]	; (8101ba4 <SysTick_Config+0x40>)
 8101b8e:	2200      	movs	r2, #0
 8101b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101b92:	4b04      	ldr	r3, [pc, #16]	; (8101ba4 <SysTick_Config+0x40>)
 8101b94:	2207      	movs	r2, #7
 8101b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101b98:	2300      	movs	r3, #0
}
 8101b9a:	4618      	mov	r0, r3
 8101b9c:	3708      	adds	r7, #8
 8101b9e:	46bd      	mov	sp, r7
 8101ba0:	bd80      	pop	{r7, pc}
 8101ba2:	bf00      	nop
 8101ba4:	e000e010 	.word	0xe000e010

08101ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101ba8:	b580      	push	{r7, lr}
 8101baa:	b082      	sub	sp, #8
 8101bac:	af00      	add	r7, sp, #0
 8101bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101bb0:	6878      	ldr	r0, [r7, #4]
 8101bb2:	f7ff ff47 	bl	8101a44 <__NVIC_SetPriorityGrouping>
}
 8101bb6:	bf00      	nop
 8101bb8:	3708      	adds	r7, #8
 8101bba:	46bd      	mov	sp, r7
 8101bbc:	bd80      	pop	{r7, pc}

08101bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101bbe:	b580      	push	{r7, lr}
 8101bc0:	b086      	sub	sp, #24
 8101bc2:	af00      	add	r7, sp, #0
 8101bc4:	4603      	mov	r3, r0
 8101bc6:	60b9      	str	r1, [r7, #8]
 8101bc8:	607a      	str	r2, [r7, #4]
 8101bca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101bcc:	f7ff ff5e 	bl	8101a8c <__NVIC_GetPriorityGrouping>
 8101bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101bd2:	687a      	ldr	r2, [r7, #4]
 8101bd4:	68b9      	ldr	r1, [r7, #8]
 8101bd6:	6978      	ldr	r0, [r7, #20]
 8101bd8:	f7ff ff90 	bl	8101afc <NVIC_EncodePriority>
 8101bdc:	4602      	mov	r2, r0
 8101bde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101be2:	4611      	mov	r1, r2
 8101be4:	4618      	mov	r0, r3
 8101be6:	f7ff ff5f 	bl	8101aa8 <__NVIC_SetPriority>
}
 8101bea:	bf00      	nop
 8101bec:	3718      	adds	r7, #24
 8101bee:	46bd      	mov	sp, r7
 8101bf0:	bd80      	pop	{r7, pc}

08101bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101bf2:	b580      	push	{r7, lr}
 8101bf4:	b082      	sub	sp, #8
 8101bf6:	af00      	add	r7, sp, #0
 8101bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101bfa:	6878      	ldr	r0, [r7, #4]
 8101bfc:	f7ff ffb2 	bl	8101b64 <SysTick_Config>
 8101c00:	4603      	mov	r3, r0
}
 8101c02:	4618      	mov	r0, r3
 8101c04:	3708      	adds	r7, #8
 8101c06:	46bd      	mov	sp, r7
 8101c08:	bd80      	pop	{r7, pc}
	...

08101c0c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101c0c:	b480      	push	{r7}
 8101c0e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101c10:	4b07      	ldr	r3, [pc, #28]	; (8101c30 <HAL_GetCurrentCPUID+0x24>)
 8101c12:	681b      	ldr	r3, [r3, #0]
 8101c14:	091b      	lsrs	r3, r3, #4
 8101c16:	f003 030f 	and.w	r3, r3, #15
 8101c1a:	2b07      	cmp	r3, #7
 8101c1c:	d101      	bne.n	8101c22 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101c1e:	2303      	movs	r3, #3
 8101c20:	e000      	b.n	8101c24 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101c22:	2301      	movs	r3, #1
  }
}
 8101c24:	4618      	mov	r0, r3
 8101c26:	46bd      	mov	sp, r7
 8101c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c2c:	4770      	bx	lr
 8101c2e:	bf00      	nop
 8101c30:	e000ed00 	.word	0xe000ed00

08101c34 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8101c34:	b580      	push	{r7, lr}
 8101c36:	b084      	sub	sp, #16
 8101c38:	af00      	add	r7, sp, #0
 8101c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8101c3c:	687b      	ldr	r3, [r7, #4]
 8101c3e:	2b00      	cmp	r3, #0
 8101c40:	d101      	bne.n	8101c46 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8101c42:	2301      	movs	r3, #1
 8101c44:	e0c8      	b.n	8101dd8 <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101c4a:	2b00      	cmp	r3, #0
 8101c4c:	d102      	bne.n	8101c54 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8101c4e:	6878      	ldr	r0, [r7, #4]
 8101c50:	f7ff f918 	bl	8100e84 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8101c54:	687b      	ldr	r3, [r7, #4]
 8101c56:	2223      	movs	r2, #35	; 0x23
 8101c58:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101c5a:	4b61      	ldr	r3, [pc, #388]	; (8101de0 <HAL_ETH_Init+0x1ac>)
 8101c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c60:	4a5f      	ldr	r2, [pc, #380]	; (8101de0 <HAL_ETH_Init+0x1ac>)
 8101c62:	f043 0302 	orr.w	r3, r3, #2
 8101c66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101c6a:	4b5d      	ldr	r3, [pc, #372]	; (8101de0 <HAL_ETH_Init+0x1ac>)
 8101c6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c70:	f003 0302 	and.w	r3, r3, #2
 8101c74:	60bb      	str	r3, [r7, #8]
 8101c76:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8101c78:	687b      	ldr	r3, [r7, #4]
 8101c7a:	7a1b      	ldrb	r3, [r3, #8]
 8101c7c:	2b00      	cmp	r3, #0
 8101c7e:	d103      	bne.n	8101c88 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8101c80:	2000      	movs	r0, #0
 8101c82:	f7ff fecb 	bl	8101a1c <HAL_SYSCFG_ETHInterfaceSelect>
 8101c86:	e003      	b.n	8101c90 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8101c88:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8101c8c:	f7ff fec6 	bl	8101a1c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8101c90:	687b      	ldr	r3, [r7, #4]
 8101c92:	681b      	ldr	r3, [r3, #0]
 8101c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101c98:	681a      	ldr	r2, [r3, #0]
 8101c9a:	687b      	ldr	r3, [r7, #4]
 8101c9c:	681b      	ldr	r3, [r3, #0]
 8101c9e:	f042 0201 	orr.w	r2, r2, #1
 8101ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101ca8:	f7ff fe7e 	bl	81019a8 <HAL_GetTick>
 8101cac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8101cae:	e00f      	b.n	8101cd0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8101cb0:	f7ff fe7a 	bl	81019a8 <HAL_GetTick>
 8101cb4:	4602      	mov	r2, r0
 8101cb6:	68fb      	ldr	r3, [r7, #12]
 8101cb8:	1ad3      	subs	r3, r2, r3
 8101cba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8101cbe:	d907      	bls.n	8101cd0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8101cc0:	687b      	ldr	r3, [r7, #4]
 8101cc2:	2204      	movs	r2, #4
 8101cc4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8101cc6:	687b      	ldr	r3, [r7, #4]
 8101cc8:	22e0      	movs	r2, #224	; 0xe0
 8101cca:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8101ccc:	2301      	movs	r3, #1
 8101cce:	e083      	b.n	8101dd8 <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8101cd0:	687b      	ldr	r3, [r7, #4]
 8101cd2:	681b      	ldr	r3, [r3, #0]
 8101cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101cd8:	681b      	ldr	r3, [r3, #0]
 8101cda:	f003 0301 	and.w	r3, r3, #1
 8101cde:	2b00      	cmp	r3, #0
 8101ce0:	d1e6      	bne.n	8101cb0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8101ce2:	6878      	ldr	r0, [r7, #4]
 8101ce4:	f000 fac0 	bl	8102268 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8101ce8:	f002 f95c 	bl	8103fa4 <HAL_RCC_GetHCLKFreq>
 8101cec:	4602      	mov	r2, r0
 8101cee:	4b3d      	ldr	r3, [pc, #244]	; (8101de4 <HAL_ETH_Init+0x1b0>)
 8101cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8101cf4:	0c9a      	lsrs	r2, r3, #18
 8101cf6:	687b      	ldr	r3, [r7, #4]
 8101cf8:	681b      	ldr	r3, [r3, #0]
 8101cfa:	3a01      	subs	r2, #1
 8101cfc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8101d00:	6878      	ldr	r0, [r7, #4]
 8101d02:	f000 fa13 	bl	810212c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8101d06:	687b      	ldr	r3, [r7, #4]
 8101d08:	681b      	ldr	r3, [r3, #0]
 8101d0a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8101d0e:	681b      	ldr	r3, [r3, #0]
 8101d10:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8101d14:	687b      	ldr	r3, [r7, #4]
 8101d16:	681b      	ldr	r3, [r3, #0]
 8101d18:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8101d1c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8101d20:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	695b      	ldr	r3, [r3, #20]
 8101d26:	f003 0303 	and.w	r3, r3, #3
 8101d2a:	2b00      	cmp	r3, #0
 8101d2c:	d007      	beq.n	8101d3e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8101d2e:	687b      	ldr	r3, [r7, #4]
 8101d30:	2201      	movs	r2, #1
 8101d32:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	22e0      	movs	r2, #224	; 0xe0
 8101d38:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8101d3a:	2301      	movs	r3, #1
 8101d3c:	e04c      	b.n	8101dd8 <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	681b      	ldr	r3, [r3, #0]
 8101d42:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8101d46:	3308      	adds	r3, #8
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8101d4e:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8101d52:	687a      	ldr	r2, [r7, #4]
 8101d54:	6952      	ldr	r2, [r2, #20]
 8101d56:	0052      	lsls	r2, r2, #1
 8101d58:	6879      	ldr	r1, [r7, #4]
 8101d5a:	6809      	ldr	r1, [r1, #0]
 8101d5c:	431a      	orrs	r2, r3
 8101d5e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8101d62:	3308      	adds	r3, #8
 8101d64:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8101d66:	6878      	ldr	r0, [r7, #4]
 8101d68:	f000 fad6 	bl	8102318 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8101d6c:	6878      	ldr	r0, [r7, #4]
 8101d6e:	f000 fb1a 	bl	81023a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	685b      	ldr	r3, [r3, #4]
 8101d76:	3305      	adds	r3, #5
 8101d78:	781b      	ldrb	r3, [r3, #0]
 8101d7a:	021a      	lsls	r2, r3, #8
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	685b      	ldr	r3, [r3, #4]
 8101d80:	3304      	adds	r3, #4
 8101d82:	781b      	ldrb	r3, [r3, #0]
 8101d84:	4619      	mov	r1, r3
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	681b      	ldr	r3, [r3, #0]
 8101d8a:	430a      	orrs	r2, r1
 8101d8c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101d90:	687b      	ldr	r3, [r7, #4]
 8101d92:	685b      	ldr	r3, [r3, #4]
 8101d94:	3303      	adds	r3, #3
 8101d96:	781b      	ldrb	r3, [r3, #0]
 8101d98:	061a      	lsls	r2, r3, #24
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	685b      	ldr	r3, [r3, #4]
 8101d9e:	3302      	adds	r3, #2
 8101da0:	781b      	ldrb	r3, [r3, #0]
 8101da2:	041b      	lsls	r3, r3, #16
 8101da4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8101da6:	687b      	ldr	r3, [r7, #4]
 8101da8:	685b      	ldr	r3, [r3, #4]
 8101daa:	3301      	adds	r3, #1
 8101dac:	781b      	ldrb	r3, [r3, #0]
 8101dae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101db0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8101db2:	687b      	ldr	r3, [r7, #4]
 8101db4:	685b      	ldr	r3, [r3, #4]
 8101db6:	781b      	ldrb	r3, [r3, #0]
 8101db8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101dba:	687b      	ldr	r3, [r7, #4]
 8101dbc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8101dbe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101dc0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8101dc4:	687b      	ldr	r3, [r7, #4]
 8101dc6:	2200      	movs	r2, #0
 8101dc8:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8101dca:	687b      	ldr	r3, [r7, #4]
 8101dcc:	2210      	movs	r2, #16
 8101dce:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8101dd0:	687b      	ldr	r3, [r7, #4]
 8101dd2:	2210      	movs	r2, #16
 8101dd4:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8101dd6:	2300      	movs	r3, #0
}
 8101dd8:	4618      	mov	r0, r3
 8101dda:	3710      	adds	r7, #16
 8101ddc:	46bd      	mov	sp, r7
 8101dde:	bd80      	pop	{r7, pc}
 8101de0:	58024400 	.word	0x58024400
 8101de4:	431bde83 	.word	0x431bde83

08101de8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8101de8:	b480      	push	{r7}
 8101dea:	b085      	sub	sp, #20
 8101dec:	af00      	add	r7, sp, #0
 8101dee:	6078      	str	r0, [r7, #4]
 8101df0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8101df2:	683b      	ldr	r3, [r7, #0]
 8101df4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8101df6:	683b      	ldr	r3, [r7, #0]
 8101df8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8101dfa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8101dfc:	683b      	ldr	r3, [r7, #0]
 8101dfe:	791b      	ldrb	r3, [r3, #4]
 8101e00:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8101e02:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8101e04:	683b      	ldr	r3, [r7, #0]
 8101e06:	7b1b      	ldrb	r3, [r3, #12]
 8101e08:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8101e0a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8101e0c:	683b      	ldr	r3, [r7, #0]
 8101e0e:	7b5b      	ldrb	r3, [r3, #13]
 8101e10:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8101e12:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8101e14:	683b      	ldr	r3, [r7, #0]
 8101e16:	7b9b      	ldrb	r3, [r3, #14]
 8101e18:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8101e1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8101e1c:	683b      	ldr	r3, [r7, #0]
 8101e1e:	7bdb      	ldrb	r3, [r3, #15]
 8101e20:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8101e22:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8101e24:	683a      	ldr	r2, [r7, #0]
 8101e26:	7c12      	ldrb	r2, [r2, #16]
 8101e28:	2a00      	cmp	r2, #0
 8101e2a:	d102      	bne.n	8101e32 <ETH_SetMACConfig+0x4a>
 8101e2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8101e30:	e000      	b.n	8101e34 <ETH_SetMACConfig+0x4c>
 8101e32:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8101e34:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8101e36:	683a      	ldr	r2, [r7, #0]
 8101e38:	7c52      	ldrb	r2, [r2, #17]
 8101e3a:	2a00      	cmp	r2, #0
 8101e3c:	d102      	bne.n	8101e44 <ETH_SetMACConfig+0x5c>
 8101e3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101e42:	e000      	b.n	8101e46 <ETH_SetMACConfig+0x5e>
 8101e44:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8101e46:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8101e48:	683b      	ldr	r3, [r7, #0]
 8101e4a:	7c9b      	ldrb	r3, [r3, #18]
 8101e4c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8101e4e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8101e50:	683b      	ldr	r3, [r7, #0]
 8101e52:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8101e54:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8101e56:	683b      	ldr	r3, [r7, #0]
 8101e58:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8101e5a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8101e5c:	683b      	ldr	r3, [r7, #0]
 8101e5e:	7f1b      	ldrb	r3, [r3, #28]
 8101e60:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8101e62:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8101e64:	683b      	ldr	r3, [r7, #0]
 8101e66:	7f5b      	ldrb	r3, [r3, #29]
 8101e68:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8101e6a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8101e6c:	683a      	ldr	r2, [r7, #0]
 8101e6e:	7f92      	ldrb	r2, [r2, #30]
 8101e70:	2a00      	cmp	r2, #0
 8101e72:	d102      	bne.n	8101e7a <ETH_SetMACConfig+0x92>
 8101e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101e78:	e000      	b.n	8101e7c <ETH_SetMACConfig+0x94>
 8101e7a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8101e7c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8101e7e:	683b      	ldr	r3, [r7, #0]
 8101e80:	7fdb      	ldrb	r3, [r3, #31]
 8101e82:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8101e84:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8101e86:	683a      	ldr	r2, [r7, #0]
 8101e88:	f892 2020 	ldrb.w	r2, [r2, #32]
 8101e8c:	2a00      	cmp	r2, #0
 8101e8e:	d102      	bne.n	8101e96 <ETH_SetMACConfig+0xae>
 8101e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101e94:	e000      	b.n	8101e98 <ETH_SetMACConfig+0xb0>
 8101e96:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8101e98:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8101e9a:	683b      	ldr	r3, [r7, #0]
 8101e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8101e9e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8101ea0:	683b      	ldr	r3, [r7, #0]
 8101ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8101ea6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8101ea8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8101eaa:	683b      	ldr	r3, [r7, #0]
 8101eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8101eae:	4313      	orrs	r3, r2
 8101eb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	681b      	ldr	r3, [r3, #0]
 8101eb6:	681a      	ldr	r2, [r3, #0]
 8101eb8:	4b57      	ldr	r3, [pc, #348]	; (8102018 <ETH_SetMACConfig+0x230>)
 8101eba:	4013      	ands	r3, r2
 8101ebc:	687a      	ldr	r2, [r7, #4]
 8101ebe:	6812      	ldr	r2, [r2, #0]
 8101ec0:	68f9      	ldr	r1, [r7, #12]
 8101ec2:	430b      	orrs	r3, r1
 8101ec4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8101ec6:	683b      	ldr	r3, [r7, #0]
 8101ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101eca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8101ecc:	683b      	ldr	r3, [r7, #0]
 8101ece:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8101ed2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8101ed4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8101ed6:	683b      	ldr	r3, [r7, #0]
 8101ed8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8101edc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8101ede:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8101ee0:	683b      	ldr	r3, [r7, #0]
 8101ee2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8101ee6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8101ee8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8101eea:	683a      	ldr	r2, [r7, #0]
 8101eec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8101ef0:	2a00      	cmp	r2, #0
 8101ef2:	d102      	bne.n	8101efa <ETH_SetMACConfig+0x112>
 8101ef4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8101ef8:	e000      	b.n	8101efc <ETH_SetMACConfig+0x114>
 8101efa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8101efc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8101efe:	683b      	ldr	r3, [r7, #0]
 8101f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8101f02:	4313      	orrs	r3, r2
 8101f04:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	681b      	ldr	r3, [r3, #0]
 8101f0a:	685a      	ldr	r2, [r3, #4]
 8101f0c:	4b43      	ldr	r3, [pc, #268]	; (810201c <ETH_SetMACConfig+0x234>)
 8101f0e:	4013      	ands	r3, r2
 8101f10:	687a      	ldr	r2, [r7, #4]
 8101f12:	6812      	ldr	r2, [r2, #0]
 8101f14:	68f9      	ldr	r1, [r7, #12]
 8101f16:	430b      	orrs	r3, r1
 8101f18:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8101f1a:	683b      	ldr	r3, [r7, #0]
 8101f1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101f20:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8101f22:	683b      	ldr	r3, [r7, #0]
 8101f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8101f26:	4313      	orrs	r3, r2
 8101f28:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	681b      	ldr	r3, [r3, #0]
 8101f2e:	68db      	ldr	r3, [r3, #12]
 8101f30:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8101f34:	f023 0301 	bic.w	r3, r3, #1
 8101f38:	687a      	ldr	r2, [r7, #4]
 8101f3a:	6812      	ldr	r2, [r2, #0]
 8101f3c:	68f9      	ldr	r1, [r7, #12]
 8101f3e:	430b      	orrs	r3, r1
 8101f40:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8101f42:	683b      	ldr	r3, [r7, #0]
 8101f44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8101f48:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8101f4a:	683b      	ldr	r3, [r7, #0]
 8101f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8101f4e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8101f50:	683a      	ldr	r2, [r7, #0]
 8101f52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8101f56:	2a00      	cmp	r2, #0
 8101f58:	d101      	bne.n	8101f5e <ETH_SetMACConfig+0x176>
 8101f5a:	2280      	movs	r2, #128	; 0x80
 8101f5c:	e000      	b.n	8101f60 <ETH_SetMACConfig+0x178>
 8101f5e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8101f60:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8101f62:	683b      	ldr	r3, [r7, #0]
 8101f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101f66:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8101f68:	4313      	orrs	r3, r2
 8101f6a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	681b      	ldr	r3, [r3, #0]
 8101f70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101f72:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8101f76:	4013      	ands	r3, r2
 8101f78:	687a      	ldr	r2, [r7, #4]
 8101f7a:	6812      	ldr	r2, [r2, #0]
 8101f7c:	68f9      	ldr	r1, [r7, #12]
 8101f7e:	430b      	orrs	r3, r1
 8101f80:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8101f82:	683b      	ldr	r3, [r7, #0]
 8101f84:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8101f88:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8101f8a:	683b      	ldr	r3, [r7, #0]
 8101f8c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8101f90:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8101f92:	4313      	orrs	r3, r2
 8101f94:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	681b      	ldr	r3, [r3, #0]
 8101f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101f9e:	f023 0103 	bic.w	r1, r3, #3
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	681b      	ldr	r3, [r3, #0]
 8101fa6:	68fa      	ldr	r2, [r7, #12]
 8101fa8:	430a      	orrs	r2, r1
 8101faa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	681b      	ldr	r3, [r3, #0]
 8101fb2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8101fb6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8101fba:	683b      	ldr	r3, [r7, #0]
 8101fbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	681b      	ldr	r3, [r3, #0]
 8101fc2:	430a      	orrs	r2, r1
 8101fc4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8101fc8:	683b      	ldr	r3, [r7, #0]
 8101fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8101fcc:	683a      	ldr	r2, [r7, #0]
 8101fce:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8101fd2:	2a00      	cmp	r2, #0
 8101fd4:	d101      	bne.n	8101fda <ETH_SetMACConfig+0x1f2>
 8101fd6:	2240      	movs	r2, #64	; 0x40
 8101fd8:	e000      	b.n	8101fdc <ETH_SetMACConfig+0x1f4>
 8101fda:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8101fdc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8101fde:	683b      	ldr	r3, [r7, #0]
 8101fe0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8101fe4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8101fe6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8101fe8:	683b      	ldr	r3, [r7, #0]
 8101fea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8101fee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8101ff0:	4313      	orrs	r3, r2
 8101ff2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8101ffc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8102000:	687b      	ldr	r3, [r7, #4]
 8102002:	681b      	ldr	r3, [r3, #0]
 8102004:	68fa      	ldr	r2, [r7, #12]
 8102006:	430a      	orrs	r2, r1
 8102008:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 810200c:	bf00      	nop
 810200e:	3714      	adds	r7, #20
 8102010:	46bd      	mov	sp, r7
 8102012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102016:	4770      	bx	lr
 8102018:	00048083 	.word	0x00048083
 810201c:	c0f88000 	.word	0xc0f88000

08102020 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8102020:	b480      	push	{r7}
 8102022:	b085      	sub	sp, #20
 8102024:	af00      	add	r7, sp, #0
 8102026:	6078      	str	r0, [r7, #4]
 8102028:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	681b      	ldr	r3, [r3, #0]
 810202e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8102032:	681b      	ldr	r3, [r3, #0]
 8102034:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8102038:	f023 0302 	bic.w	r3, r3, #2
 810203c:	683a      	ldr	r2, [r7, #0]
 810203e:	6812      	ldr	r2, [r2, #0]
 8102040:	6879      	ldr	r1, [r7, #4]
 8102042:	6809      	ldr	r1, [r1, #0]
 8102044:	431a      	orrs	r2, r3
 8102046:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 810204a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810204c:	683b      	ldr	r3, [r7, #0]
 810204e:	791b      	ldrb	r3, [r3, #4]
 8102050:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8102052:	683b      	ldr	r3, [r7, #0]
 8102054:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8102056:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8102058:	683b      	ldr	r3, [r7, #0]
 810205a:	7b1b      	ldrb	r3, [r3, #12]
 810205c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810205e:	4313      	orrs	r3, r2
 8102060:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810206a:	3304      	adds	r3, #4
 810206c:	681b      	ldr	r3, [r3, #0]
 810206e:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8102072:	f023 0301 	bic.w	r3, r3, #1
 8102076:	687a      	ldr	r2, [r7, #4]
 8102078:	6811      	ldr	r1, [r2, #0]
 810207a:	68fa      	ldr	r2, [r7, #12]
 810207c:	431a      	orrs	r2, r3
 810207e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8102082:	3304      	adds	r3, #4
 8102084:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8102086:	683b      	ldr	r3, [r7, #0]
 8102088:	7b5b      	ldrb	r3, [r3, #13]
 810208a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 810208c:	683b      	ldr	r3, [r7, #0]
 810208e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8102090:	4313      	orrs	r3, r2
 8102092:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	681b      	ldr	r3, [r3, #0]
 8102098:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810209c:	681a      	ldr	r2, [r3, #0]
 810209e:	4b21      	ldr	r3, [pc, #132]	; (8102124 <ETH_SetDMAConfig+0x104>)
 81020a0:	4013      	ands	r3, r2
 81020a2:	687a      	ldr	r2, [r7, #4]
 81020a4:	6811      	ldr	r1, [r2, #0]
 81020a6:	68fa      	ldr	r2, [r7, #12]
 81020a8:	431a      	orrs	r2, r3
 81020aa:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 81020ae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 81020b0:	683b      	ldr	r3, [r7, #0]
 81020b2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 81020b4:	683b      	ldr	r3, [r7, #0]
 81020b6:	7d1b      	ldrb	r3, [r3, #20]
 81020b8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 81020ba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 81020bc:	683b      	ldr	r3, [r7, #0]
 81020be:	7f5b      	ldrb	r3, [r3, #29]
 81020c0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 81020c2:	4313      	orrs	r3, r2
 81020c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	681b      	ldr	r3, [r3, #0]
 81020ca:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 81020ce:	3304      	adds	r3, #4
 81020d0:	681a      	ldr	r2, [r3, #0]
 81020d2:	4b15      	ldr	r3, [pc, #84]	; (8102128 <ETH_SetDMAConfig+0x108>)
 81020d4:	4013      	ands	r3, r2
 81020d6:	687a      	ldr	r2, [r7, #4]
 81020d8:	6811      	ldr	r1, [r2, #0]
 81020da:	68fa      	ldr	r2, [r7, #12]
 81020dc:	431a      	orrs	r2, r3
 81020de:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 81020e2:	3304      	adds	r3, #4
 81020e4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81020e6:	683b      	ldr	r3, [r7, #0]
 81020e8:	7f1b      	ldrb	r3, [r3, #28]
 81020ea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 81020ec:	683b      	ldr	r3, [r7, #0]
 81020ee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81020f0:	4313      	orrs	r3, r2
 81020f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 81020f4:	687b      	ldr	r3, [r7, #4]
 81020f6:	681b      	ldr	r3, [r3, #0]
 81020f8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 81020fc:	3308      	adds	r3, #8
 81020fe:	681b      	ldr	r3, [r3, #0]
 8102100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102104:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8102108:	687a      	ldr	r2, [r7, #4]
 810210a:	6811      	ldr	r1, [r2, #0]
 810210c:	68fa      	ldr	r2, [r7, #12]
 810210e:	431a      	orrs	r2, r3
 8102110:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8102114:	3308      	adds	r3, #8
 8102116:	601a      	str	r2, [r3, #0]
}
 8102118:	bf00      	nop
 810211a:	3714      	adds	r7, #20
 810211c:	46bd      	mov	sp, r7
 810211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102122:	4770      	bx	lr
 8102124:	fffec000 	.word	0xfffec000
 8102128:	ffc0efef 	.word	0xffc0efef

0810212c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 810212c:	b580      	push	{r7, lr}
 810212e:	b0a4      	sub	sp, #144	; 0x90
 8102130:	af00      	add	r7, sp, #0
 8102132:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8102134:	2301      	movs	r3, #1
 8102136:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 810213a:	2300      	movs	r3, #0
 810213c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 810213e:	2300      	movs	r3, #0
 8102140:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8102144:	2300      	movs	r3, #0
 8102146:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 810214a:	2301      	movs	r3, #1
 810214c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8102150:	2301      	movs	r3, #1
 8102152:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8102156:	2301      	movs	r3, #1
 8102158:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 810215c:	2300      	movs	r3, #0
 810215e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8102162:	2301      	movs	r3, #1
 8102164:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8102168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810216c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 810216e:	2300      	movs	r3, #0
 8102170:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8102174:	2300      	movs	r3, #0
 8102176:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8102178:	2300      	movs	r3, #0
 810217a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 810217e:	2300      	movs	r3, #0
 8102180:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8102184:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8102188:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 810218a:	2300      	movs	r3, #0
 810218c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8102190:	2300      	movs	r3, #0
 8102192:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8102194:	2301      	movs	r3, #1
 8102196:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 810219a:	2300      	movs	r3, #0
 810219c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 81021a0:	2300      	movs	r3, #0
 81021a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 81021a6:	2300      	movs	r3, #0
 81021a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 81021aa:	2300      	movs	r3, #0
 81021ac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 81021ae:	2300      	movs	r3, #0
 81021b0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 81021b2:	2300      	movs	r3, #0
 81021b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 81021b8:	2300      	movs	r3, #0
 81021ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 81021be:	2301      	movs	r3, #1
 81021c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 81021c4:	2320      	movs	r3, #32
 81021c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 81021ca:	2301      	movs	r3, #1
 81021cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 81021d0:	2300      	movs	r3, #0
 81021d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 81021d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 81021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 81021dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81021e0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 81021e2:	2300      	movs	r3, #0
 81021e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 81021e8:	2302      	movs	r3, #2
 81021ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 81021ee:	2300      	movs	r3, #0
 81021f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 81021f4:	2300      	movs	r3, #0
 81021f6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 81021fa:	2300      	movs	r3, #0
 81021fc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8102200:	2301      	movs	r3, #1
 8102202:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8102206:	2300      	movs	r3, #0
 8102208:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 810220a:	2301      	movs	r3, #1
 810220c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8102210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8102214:	4619      	mov	r1, r3
 8102216:	6878      	ldr	r0, [r7, #4]
 8102218:	f7ff fde6 	bl	8101de8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 810221c:	2301      	movs	r3, #1
 810221e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8102220:	2301      	movs	r3, #1
 8102222:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8102224:	2300      	movs	r3, #0
 8102226:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8102228:	2300      	movs	r3, #0
 810222a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 810222e:	2300      	movs	r3, #0
 8102230:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8102232:	2300      	movs	r3, #0
 8102234:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8102236:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 810223a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 810223c:	2300      	movs	r3, #0
 810223e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8102240:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8102244:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8102246:	2300      	movs	r3, #0
 8102248:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 810224c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8102250:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8102252:	f107 0308 	add.w	r3, r7, #8
 8102256:	4619      	mov	r1, r3
 8102258:	6878      	ldr	r0, [r7, #4]
 810225a:	f7ff fee1 	bl	8102020 <ETH_SetDMAConfig>
}
 810225e:	bf00      	nop
 8102260:	3790      	adds	r7, #144	; 0x90
 8102262:	46bd      	mov	sp, r7
 8102264:	bd80      	pop	{r7, pc}
	...

08102268 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8102268:	b580      	push	{r7, lr}
 810226a:	b084      	sub	sp, #16
 810226c:	af00      	add	r7, sp, #0
 810226e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	681b      	ldr	r3, [r3, #0]
 8102274:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8102278:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810227a:	68fb      	ldr	r3, [r7, #12]
 810227c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102280:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8102282:	f001 fe8f 	bl	8103fa4 <HAL_RCC_GetHCLKFreq>
 8102286:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8102288:	68bb      	ldr	r3, [r7, #8]
 810228a:	4a1e      	ldr	r2, [pc, #120]	; (8102304 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 810228c:	4293      	cmp	r3, r2
 810228e:	d908      	bls.n	81022a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8102290:	68bb      	ldr	r3, [r7, #8]
 8102292:	4a1d      	ldr	r2, [pc, #116]	; (8102308 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8102294:	4293      	cmp	r3, r2
 8102296:	d804      	bhi.n	81022a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8102298:	68fb      	ldr	r3, [r7, #12]
 810229a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810229e:	60fb      	str	r3, [r7, #12]
 81022a0:	e027      	b.n	81022f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 81022a2:	68bb      	ldr	r3, [r7, #8]
 81022a4:	4a18      	ldr	r2, [pc, #96]	; (8102308 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 81022a6:	4293      	cmp	r3, r2
 81022a8:	d908      	bls.n	81022bc <ETH_MAC_MDIO_ClkConfig+0x54>
 81022aa:	68bb      	ldr	r3, [r7, #8]
 81022ac:	4a17      	ldr	r2, [pc, #92]	; (810230c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 81022ae:	4293      	cmp	r3, r2
 81022b0:	d804      	bhi.n	81022bc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 81022b2:	68fb      	ldr	r3, [r7, #12]
 81022b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 81022b8:	60fb      	str	r3, [r7, #12]
 81022ba:	e01a      	b.n	81022f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 81022bc:	68bb      	ldr	r3, [r7, #8]
 81022be:	4a13      	ldr	r2, [pc, #76]	; (810230c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 81022c0:	4293      	cmp	r3, r2
 81022c2:	d903      	bls.n	81022cc <ETH_MAC_MDIO_ClkConfig+0x64>
 81022c4:	68bb      	ldr	r3, [r7, #8]
 81022c6:	4a12      	ldr	r2, [pc, #72]	; (8102310 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 81022c8:	4293      	cmp	r3, r2
 81022ca:	d911      	bls.n	81022f0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 81022cc:	68bb      	ldr	r3, [r7, #8]
 81022ce:	4a10      	ldr	r2, [pc, #64]	; (8102310 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 81022d0:	4293      	cmp	r3, r2
 81022d2:	d908      	bls.n	81022e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 81022d4:	68bb      	ldr	r3, [r7, #8]
 81022d6:	4a0f      	ldr	r2, [pc, #60]	; (8102314 <ETH_MAC_MDIO_ClkConfig+0xac>)
 81022d8:	4293      	cmp	r3, r2
 81022da:	d804      	bhi.n	81022e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 81022dc:	68fb      	ldr	r3, [r7, #12]
 81022de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81022e2:	60fb      	str	r3, [r7, #12]
 81022e4:	e005      	b.n	81022f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 81022e6:	68fb      	ldr	r3, [r7, #12]
 81022e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 81022ec:	60fb      	str	r3, [r7, #12]
 81022ee:	e000      	b.n	81022f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 81022f0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 81022f2:	687b      	ldr	r3, [r7, #4]
 81022f4:	681b      	ldr	r3, [r3, #0]
 81022f6:	68fa      	ldr	r2, [r7, #12]
 81022f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 81022fc:	bf00      	nop
 81022fe:	3710      	adds	r7, #16
 8102300:	46bd      	mov	sp, r7
 8102302:	bd80      	pop	{r7, pc}
 8102304:	01312cff 	.word	0x01312cff
 8102308:	02160ebf 	.word	0x02160ebf
 810230c:	039386ff 	.word	0x039386ff
 8102310:	05f5e0ff 	.word	0x05f5e0ff
 8102314:	08f0d17f 	.word	0x08f0d17f

08102318 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8102318:	b480      	push	{r7}
 810231a:	b085      	sub	sp, #20
 810231c:	af00      	add	r7, sp, #0
 810231e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8102320:	2300      	movs	r3, #0
 8102322:	60fb      	str	r3, [r7, #12]
 8102324:	e01d      	b.n	8102362 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8102326:	687b      	ldr	r3, [r7, #4]
 8102328:	68d9      	ldr	r1, [r3, #12]
 810232a:	68fa      	ldr	r2, [r7, #12]
 810232c:	4613      	mov	r3, r2
 810232e:	005b      	lsls	r3, r3, #1
 8102330:	4413      	add	r3, r2
 8102332:	00db      	lsls	r3, r3, #3
 8102334:	440b      	add	r3, r1
 8102336:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8102338:	68bb      	ldr	r3, [r7, #8]
 810233a:	2200      	movs	r2, #0
 810233c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 810233e:	68bb      	ldr	r3, [r7, #8]
 8102340:	2200      	movs	r2, #0
 8102342:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8102344:	68bb      	ldr	r3, [r7, #8]
 8102346:	2200      	movs	r2, #0
 8102348:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 810234a:	68bb      	ldr	r3, [r7, #8]
 810234c:	2200      	movs	r2, #0
 810234e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8102350:	68b9      	ldr	r1, [r7, #8]
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	68fa      	ldr	r2, [r7, #12]
 8102356:	3206      	adds	r2, #6
 8102358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810235c:	68fb      	ldr	r3, [r7, #12]
 810235e:	3301      	adds	r3, #1
 8102360:	60fb      	str	r3, [r7, #12]
 8102362:	68fb      	ldr	r3, [r7, #12]
 8102364:	2b03      	cmp	r3, #3
 8102366:	d9de      	bls.n	8102326 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	2200      	movs	r2, #0
 810236c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	681b      	ldr	r3, [r3, #0]
 8102372:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8102376:	330c      	adds	r3, #12
 8102378:	2203      	movs	r2, #3
 810237a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	68da      	ldr	r2, [r3, #12]
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	681b      	ldr	r3, [r3, #0]
 8102384:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8102388:	3314      	adds	r3, #20
 810238a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	68da      	ldr	r2, [r3, #12]
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	681b      	ldr	r3, [r3, #0]
 8102394:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8102398:	601a      	str	r2, [r3, #0]
}
 810239a:	bf00      	nop
 810239c:	3714      	adds	r7, #20
 810239e:	46bd      	mov	sp, r7
 81023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023a4:	4770      	bx	lr

081023a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81023a6:	b480      	push	{r7}
 81023a8:	b085      	sub	sp, #20
 81023aa:	af00      	add	r7, sp, #0
 81023ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81023ae:	2300      	movs	r3, #0
 81023b0:	60fb      	str	r3, [r7, #12]
 81023b2:	e024      	b.n	81023fe <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	6919      	ldr	r1, [r3, #16]
 81023b8:	68fa      	ldr	r2, [r7, #12]
 81023ba:	4613      	mov	r3, r2
 81023bc:	005b      	lsls	r3, r3, #1
 81023be:	4413      	add	r3, r2
 81023c0:	00db      	lsls	r3, r3, #3
 81023c2:	440b      	add	r3, r1
 81023c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 81023c6:	68bb      	ldr	r3, [r7, #8]
 81023c8:	2200      	movs	r2, #0
 81023ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 81023cc:	68bb      	ldr	r3, [r7, #8]
 81023ce:	2200      	movs	r2, #0
 81023d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 81023d2:	68bb      	ldr	r3, [r7, #8]
 81023d4:	2200      	movs	r2, #0
 81023d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 81023d8:	68bb      	ldr	r3, [r7, #8]
 81023da:	2200      	movs	r2, #0
 81023dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 81023de:	68bb      	ldr	r3, [r7, #8]
 81023e0:	2200      	movs	r2, #0
 81023e2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 81023e4:	68bb      	ldr	r3, [r7, #8]
 81023e6:	2200      	movs	r2, #0
 81023e8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 81023ea:	68ba      	ldr	r2, [r7, #8]
 81023ec:	6879      	ldr	r1, [r7, #4]
 81023ee:	68fb      	ldr	r3, [r7, #12]
 81023f0:	330a      	adds	r3, #10
 81023f2:	009b      	lsls	r3, r3, #2
 81023f4:	440b      	add	r3, r1
 81023f6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81023f8:	68fb      	ldr	r3, [r7, #12]
 81023fa:	3301      	adds	r3, #1
 81023fc:	60fb      	str	r3, [r7, #12]
 81023fe:	68fb      	ldr	r3, [r7, #12]
 8102400:	2b03      	cmp	r3, #3
 8102402:	d9d7      	bls.n	81023b4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8102404:	687b      	ldr	r3, [r7, #4]
 8102406:	2200      	movs	r2, #0
 8102408:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	2200      	movs	r2, #0
 810240e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	2200      	movs	r2, #0
 8102414:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	2200      	movs	r2, #0
 810241a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	2200      	movs	r2, #0
 8102420:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8102422:	687b      	ldr	r3, [r7, #4]
 8102424:	681b      	ldr	r3, [r3, #0]
 8102426:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 810242a:	3310      	adds	r3, #16
 810242c:	2203      	movs	r2, #3
 810242e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8102430:	687b      	ldr	r3, [r7, #4]
 8102432:	691a      	ldr	r2, [r3, #16]
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 810243c:	331c      	adds	r3, #28
 810243e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8102440:	687b      	ldr	r3, [r7, #4]
 8102442:	691b      	ldr	r3, [r3, #16]
 8102444:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8102450:	3308      	adds	r3, #8
 8102452:	601a      	str	r2, [r3, #0]
}
 8102454:	bf00      	nop
 8102456:	3714      	adds	r7, #20
 8102458:	46bd      	mov	sp, r7
 810245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810245e:	4770      	bx	lr

08102460 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8102460:	b580      	push	{r7, lr}
 8102462:	b098      	sub	sp, #96	; 0x60
 8102464:	af00      	add	r7, sp, #0
 8102466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8102468:	4a84      	ldr	r2, [pc, #528]	; (810267c <HAL_FDCAN_Init+0x21c>)
 810246a:	f107 030c 	add.w	r3, r7, #12
 810246e:	4611      	mov	r1, r2
 8102470:	224c      	movs	r2, #76	; 0x4c
 8102472:	4618      	mov	r0, r3
 8102474:	f004 ffae 	bl	81073d4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8102478:	687b      	ldr	r3, [r7, #4]
 810247a:	2b00      	cmp	r3, #0
 810247c:	d101      	bne.n	8102482 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 810247e:	2301      	movs	r3, #1
 8102480:	e1ca      	b.n	8102818 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8102482:	687b      	ldr	r3, [r7, #4]
 8102484:	681b      	ldr	r3, [r3, #0]
 8102486:	4a7e      	ldr	r2, [pc, #504]	; (8102680 <HAL_FDCAN_Init+0x220>)
 8102488:	4293      	cmp	r3, r2
 810248a:	d106      	bne.n	810249a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	681b      	ldr	r3, [r3, #0]
 8102490:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8102494:	461a      	mov	r2, r3
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 81024a0:	b2db      	uxtb	r3, r3
 81024a2:	2b00      	cmp	r3, #0
 81024a4:	d106      	bne.n	81024b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	2200      	movs	r2, #0
 81024aa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 81024ae:	6878      	ldr	r0, [r7, #4]
 81024b0:	f7fe fe18 	bl	81010e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	681b      	ldr	r3, [r3, #0]
 81024b8:	699a      	ldr	r2, [r3, #24]
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	f022 0210 	bic.w	r2, r2, #16
 81024c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 81024c4:	f7ff fa70 	bl	81019a8 <HAL_GetTick>
 81024c8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 81024ca:	e014      	b.n	81024f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 81024cc:	f7ff fa6c 	bl	81019a8 <HAL_GetTick>
 81024d0:	4602      	mov	r2, r0
 81024d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81024d4:	1ad3      	subs	r3, r2, r3
 81024d6:	2b0a      	cmp	r3, #10
 81024d8:	d90d      	bls.n	81024f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81024e0:	f043 0201 	orr.w	r2, r3, #1
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81024ea:	687b      	ldr	r3, [r7, #4]
 81024ec:	2203      	movs	r2, #3
 81024ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 81024f2:	2301      	movs	r3, #1
 81024f4:	e190      	b.n	8102818 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	681b      	ldr	r3, [r3, #0]
 81024fa:	699b      	ldr	r3, [r3, #24]
 81024fc:	f003 0308 	and.w	r3, r3, #8
 8102500:	2b08      	cmp	r3, #8
 8102502:	d0e3      	beq.n	81024cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	681b      	ldr	r3, [r3, #0]
 8102508:	699a      	ldr	r2, [r3, #24]
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	681b      	ldr	r3, [r3, #0]
 810250e:	f042 0201 	orr.w	r2, r2, #1
 8102512:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8102514:	f7ff fa48 	bl	81019a8 <HAL_GetTick>
 8102518:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 810251a:	e014      	b.n	8102546 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 810251c:	f7ff fa44 	bl	81019a8 <HAL_GetTick>
 8102520:	4602      	mov	r2, r0
 8102522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102524:	1ad3      	subs	r3, r2, r3
 8102526:	2b0a      	cmp	r3, #10
 8102528:	d90d      	bls.n	8102546 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 810252a:	687b      	ldr	r3, [r7, #4]
 810252c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102530:	f043 0201 	orr.w	r2, r3, #1
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	2203      	movs	r2, #3
 810253e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8102542:	2301      	movs	r3, #1
 8102544:	e168      	b.n	8102818 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	681b      	ldr	r3, [r3, #0]
 810254a:	699b      	ldr	r3, [r3, #24]
 810254c:	f003 0301 	and.w	r3, r3, #1
 8102550:	2b00      	cmp	r3, #0
 8102552:	d0e3      	beq.n	810251c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	681b      	ldr	r3, [r3, #0]
 8102558:	699a      	ldr	r2, [r3, #24]
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	681b      	ldr	r3, [r3, #0]
 810255e:	f042 0202 	orr.w	r2, r2, #2
 8102562:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	7c1b      	ldrb	r3, [r3, #16]
 8102568:	2b01      	cmp	r3, #1
 810256a:	d108      	bne.n	810257e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	681b      	ldr	r3, [r3, #0]
 8102570:	699a      	ldr	r2, [r3, #24]
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	681b      	ldr	r3, [r3, #0]
 8102576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810257a:	619a      	str	r2, [r3, #24]
 810257c:	e007      	b.n	810258e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	681b      	ldr	r3, [r3, #0]
 8102582:	699a      	ldr	r2, [r3, #24]
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810258c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 810258e:	687b      	ldr	r3, [r7, #4]
 8102590:	7c5b      	ldrb	r3, [r3, #17]
 8102592:	2b01      	cmp	r3, #1
 8102594:	d108      	bne.n	81025a8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	681b      	ldr	r3, [r3, #0]
 810259a:	699a      	ldr	r2, [r3, #24]
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81025a4:	619a      	str	r2, [r3, #24]
 81025a6:	e007      	b.n	81025b8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 81025a8:	687b      	ldr	r3, [r7, #4]
 81025aa:	681b      	ldr	r3, [r3, #0]
 81025ac:	699a      	ldr	r2, [r3, #24]
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	681b      	ldr	r3, [r3, #0]
 81025b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81025b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	7c9b      	ldrb	r3, [r3, #18]
 81025bc:	2b01      	cmp	r3, #1
 81025be:	d108      	bne.n	81025d2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	699a      	ldr	r2, [r3, #24]
 81025c6:	687b      	ldr	r3, [r7, #4]
 81025c8:	681b      	ldr	r3, [r3, #0]
 81025ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81025ce:	619a      	str	r2, [r3, #24]
 81025d0:	e007      	b.n	81025e2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	699a      	ldr	r2, [r3, #24]
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	681b      	ldr	r3, [r3, #0]
 81025dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81025e0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 81025e2:	687b      	ldr	r3, [r7, #4]
 81025e4:	681b      	ldr	r3, [r3, #0]
 81025e6:	699b      	ldr	r3, [r3, #24]
 81025e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	689a      	ldr	r2, [r3, #8]
 81025f0:	687b      	ldr	r3, [r7, #4]
 81025f2:	681b      	ldr	r3, [r3, #0]
 81025f4:	430a      	orrs	r2, r1
 81025f6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	681b      	ldr	r3, [r3, #0]
 81025fc:	699a      	ldr	r2, [r3, #24]
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	681b      	ldr	r3, [r3, #0]
 8102602:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8102606:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	681b      	ldr	r3, [r3, #0]
 810260c:	691a      	ldr	r2, [r3, #16]
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	681b      	ldr	r3, [r3, #0]
 8102612:	f022 0210 	bic.w	r2, r2, #16
 8102616:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	68db      	ldr	r3, [r3, #12]
 810261c:	2b01      	cmp	r3, #1
 810261e:	d108      	bne.n	8102632 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8102620:	687b      	ldr	r3, [r7, #4]
 8102622:	681b      	ldr	r3, [r3, #0]
 8102624:	699a      	ldr	r2, [r3, #24]
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	681b      	ldr	r3, [r3, #0]
 810262a:	f042 0204 	orr.w	r2, r2, #4
 810262e:	619a      	str	r2, [r3, #24]
 8102630:	e030      	b.n	8102694 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8102632:	687b      	ldr	r3, [r7, #4]
 8102634:	68db      	ldr	r3, [r3, #12]
 8102636:	2b00      	cmp	r3, #0
 8102638:	d02c      	beq.n	8102694 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	68db      	ldr	r3, [r3, #12]
 810263e:	2b02      	cmp	r3, #2
 8102640:	d020      	beq.n	8102684 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	699a      	ldr	r2, [r3, #24]
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	681b      	ldr	r3, [r3, #0]
 810264c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8102650:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	691a      	ldr	r2, [r3, #16]
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	681b      	ldr	r3, [r3, #0]
 810265c:	f042 0210 	orr.w	r2, r2, #16
 8102660:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	68db      	ldr	r3, [r3, #12]
 8102666:	2b03      	cmp	r3, #3
 8102668:	d114      	bne.n	8102694 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	681b      	ldr	r3, [r3, #0]
 810266e:	699a      	ldr	r2, [r3, #24]
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	681b      	ldr	r3, [r3, #0]
 8102674:	f042 0220 	orr.w	r2, r2, #32
 8102678:	619a      	str	r2, [r3, #24]
 810267a:	e00b      	b.n	8102694 <HAL_FDCAN_Init+0x234>
 810267c:	08107414 	.word	0x08107414
 8102680:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8102684:	687b      	ldr	r3, [r7, #4]
 8102686:	681b      	ldr	r3, [r3, #0]
 8102688:	699a      	ldr	r2, [r3, #24]
 810268a:	687b      	ldr	r3, [r7, #4]
 810268c:	681b      	ldr	r3, [r3, #0]
 810268e:	f042 0220 	orr.w	r2, r2, #32
 8102692:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8102694:	687b      	ldr	r3, [r7, #4]
 8102696:	699b      	ldr	r3, [r3, #24]
 8102698:	3b01      	subs	r3, #1
 810269a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	69db      	ldr	r3, [r3, #28]
 81026a0:	3b01      	subs	r3, #1
 81026a2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81026a4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	6a1b      	ldr	r3, [r3, #32]
 81026aa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 81026ac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	695b      	ldr	r3, [r3, #20]
 81026b4:	3b01      	subs	r3, #1
 81026b6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81026b8:	687b      	ldr	r3, [r7, #4]
 81026ba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 81026bc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81026be:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 81026c0:	687b      	ldr	r3, [r7, #4]
 81026c2:	689b      	ldr	r3, [r3, #8]
 81026c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81026c8:	d115      	bne.n	81026f6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81026ce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81026d4:	3b01      	subs	r3, #1
 81026d6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81026d8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 81026da:	687b      	ldr	r3, [r7, #4]
 81026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81026de:	3b01      	subs	r3, #1
 81026e0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 81026e2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026ea:	3b01      	subs	r3, #1
 81026ec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 81026f2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81026f4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81026fa:	2b00      	cmp	r3, #0
 81026fc:	d00a      	beq.n	8102714 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 810270a:	687b      	ldr	r3, [r7, #4]
 810270c:	681b      	ldr	r3, [r3, #0]
 810270e:	430a      	orrs	r2, r1
 8102710:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810271c:	4413      	add	r3, r2
 810271e:	2b00      	cmp	r3, #0
 8102720:	d012      	beq.n	8102748 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 810272a:	f023 0107 	bic.w	r1, r3, #7
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102732:	009b      	lsls	r3, r3, #2
 8102734:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8102738:	4413      	add	r3, r2
 810273a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	430a      	orrs	r2, r1
 8102744:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810274c:	2b00      	cmp	r3, #0
 810274e:	d012      	beq.n	8102776 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	681b      	ldr	r3, [r3, #0]
 8102754:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8102758:	f023 0107 	bic.w	r1, r3, #7
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102760:	009b      	lsls	r3, r3, #2
 8102762:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8102766:	4413      	add	r3, r2
 8102768:	f853 2c54 	ldr.w	r2, [r3, #-84]
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	681b      	ldr	r3, [r3, #0]
 8102770:	430a      	orrs	r2, r1
 8102772:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8102776:	687b      	ldr	r3, [r7, #4]
 8102778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810277a:	2b00      	cmp	r3, #0
 810277c:	d013      	beq.n	81027a6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 810277e:	687b      	ldr	r3, [r7, #4]
 8102780:	681b      	ldr	r3, [r3, #0]
 8102782:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8102786:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 810278a:	687b      	ldr	r3, [r7, #4]
 810278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810278e:	009b      	lsls	r3, r3, #2
 8102790:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8102794:	4413      	add	r3, r2
 8102796:	f853 3c54 	ldr.w	r3, [r3, #-84]
 810279a:	011a      	lsls	r2, r3, #4
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	681b      	ldr	r3, [r3, #0]
 81027a0:	430a      	orrs	r2, r1
 81027a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 81027a6:	687b      	ldr	r3, [r7, #4]
 81027a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81027aa:	2b00      	cmp	r3, #0
 81027ac:	d013      	beq.n	81027d6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	681b      	ldr	r3, [r3, #0]
 81027b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81027b6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81027be:	009b      	lsls	r3, r3, #2
 81027c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 81027c4:	4413      	add	r3, r2
 81027c6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 81027ca:	021a      	lsls	r2, r3, #8
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	430a      	orrs	r2, r1
 81027d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	681b      	ldr	r3, [r3, #0]
 81027da:	4a11      	ldr	r2, [pc, #68]	; (8102820 <HAL_FDCAN_Init+0x3c0>)
 81027dc:	4293      	cmp	r3, r2
 81027de:	d107      	bne.n	81027f0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	685b      	ldr	r3, [r3, #4]
 81027e4:	689a      	ldr	r2, [r3, #8]
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	685b      	ldr	r3, [r3, #4]
 81027ea:	f022 0203 	bic.w	r2, r2, #3
 81027ee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	2200      	movs	r2, #0
 81027f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 81027f8:	687b      	ldr	r3, [r7, #4]
 81027fa:	2200      	movs	r2, #0
 81027fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8102800:	687b      	ldr	r3, [r7, #4]
 8102802:	2201      	movs	r2, #1
 8102804:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8102808:	6878      	ldr	r0, [r7, #4]
 810280a:	f000 f80b 	bl	8102824 <FDCAN_CalcultateRamBlockAddresses>
 810280e:	4603      	mov	r3, r0
 8102810:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8102814:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8102818:	4618      	mov	r0, r3
 810281a:	3760      	adds	r7, #96	; 0x60
 810281c:	46bd      	mov	sp, r7
 810281e:	bd80      	pop	{r7, pc}
 8102820:	4000a000 	.word	0x4000a000

08102824 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8102824:	b480      	push	{r7}
 8102826:	b085      	sub	sp, #20
 8102828:	af00      	add	r7, sp, #0
 810282a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102830:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810283a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810283e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102842:	68ba      	ldr	r2, [r7, #8]
 8102844:	0091      	lsls	r1, r2, #2
 8102846:	687a      	ldr	r2, [r7, #4]
 8102848:	6812      	ldr	r2, [r2, #0]
 810284a:	430b      	orrs	r3, r1
 810284c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	681b      	ldr	r3, [r3, #0]
 8102854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102858:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 810285c:	687b      	ldr	r3, [r7, #4]
 810285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102860:	041a      	lsls	r2, r3, #16
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	681b      	ldr	r3, [r3, #0]
 8102866:	430a      	orrs	r2, r1
 8102868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 810286c:	687b      	ldr	r3, [r7, #4]
 810286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102870:	68ba      	ldr	r2, [r7, #8]
 8102872:	4413      	add	r3, r2
 8102874:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	681b      	ldr	r3, [r3, #0]
 810287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810287e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102882:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102886:	68ba      	ldr	r2, [r7, #8]
 8102888:	0091      	lsls	r1, r2, #2
 810288a:	687a      	ldr	r2, [r7, #4]
 810288c:	6812      	ldr	r2, [r2, #0]
 810288e:	430b      	orrs	r3, r1
 8102890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8102894:	687b      	ldr	r3, [r7, #4]
 8102896:	681b      	ldr	r3, [r3, #0]
 8102898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810289c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81028a4:	041a      	lsls	r2, r3, #16
 81028a6:	687b      	ldr	r3, [r7, #4]
 81028a8:	681b      	ldr	r3, [r3, #0]
 81028aa:	430a      	orrs	r2, r1
 81028ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81028b4:	005b      	lsls	r3, r3, #1
 81028b6:	68ba      	ldr	r2, [r7, #8]
 81028b8:	4413      	add	r3, r2
 81028ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 81028bc:	687b      	ldr	r3, [r7, #4]
 81028be:	681b      	ldr	r3, [r3, #0]
 81028c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81028c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81028c8:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81028cc:	68ba      	ldr	r2, [r7, #8]
 81028ce:	0091      	lsls	r1, r2, #2
 81028d0:	687a      	ldr	r2, [r7, #4]
 81028d2:	6812      	ldr	r2, [r2, #0]
 81028d4:	430b      	orrs	r3, r1
 81028d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	681b      	ldr	r3, [r3, #0]
 81028de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81028e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81028ea:	041a      	lsls	r2, r3, #16
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	681b      	ldr	r3, [r3, #0]
 81028f0:	430a      	orrs	r2, r1
 81028f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 81028f6:	687b      	ldr	r3, [r7, #4]
 81028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81028fa:	687a      	ldr	r2, [r7, #4]
 81028fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 81028fe:	fb02 f303 	mul.w	r3, r2, r3
 8102902:	68ba      	ldr	r2, [r7, #8]
 8102904:	4413      	add	r3, r2
 8102906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	681b      	ldr	r3, [r3, #0]
 810290c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102910:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102914:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102918:	68ba      	ldr	r2, [r7, #8]
 810291a:	0091      	lsls	r1, r2, #2
 810291c:	687a      	ldr	r2, [r7, #4]
 810291e:	6812      	ldr	r2, [r2, #0]
 8102920:	430b      	orrs	r3, r1
 8102922:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	681b      	ldr	r3, [r3, #0]
 810292a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810292e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102936:	041a      	lsls	r2, r3, #16
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	430a      	orrs	r2, r1
 810293e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102946:	687a      	ldr	r2, [r7, #4]
 8102948:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 810294a:	fb02 f303 	mul.w	r3, r2, r3
 810294e:	68ba      	ldr	r2, [r7, #8]
 8102950:	4413      	add	r3, r2
 8102952:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810295c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102960:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102964:	68ba      	ldr	r2, [r7, #8]
 8102966:	0091      	lsls	r1, r2, #2
 8102968:	687a      	ldr	r2, [r7, #4]
 810296a:	6812      	ldr	r2, [r2, #0]
 810296c:	430b      	orrs	r3, r1
 810296e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8102972:	687b      	ldr	r3, [r7, #4]
 8102974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102976:	687a      	ldr	r2, [r7, #4]
 8102978:	6d52      	ldr	r2, [r2, #84]	; 0x54
 810297a:	fb02 f303 	mul.w	r3, r2, r3
 810297e:	68ba      	ldr	r2, [r7, #8]
 8102980:	4413      	add	r3, r2
 8102982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810298c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102990:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102994:	68ba      	ldr	r2, [r7, #8]
 8102996:	0091      	lsls	r1, r2, #2
 8102998:	687a      	ldr	r2, [r7, #4]
 810299a:	6812      	ldr	r2, [r2, #0]
 810299c:	430b      	orrs	r3, r1
 810299e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81029aa:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81029b2:	041a      	lsls	r2, r3, #16
 81029b4:	687b      	ldr	r3, [r7, #4]
 81029b6:	681b      	ldr	r3, [r3, #0]
 81029b8:	430a      	orrs	r2, r1
 81029ba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81029c2:	005b      	lsls	r3, r3, #1
 81029c4:	68ba      	ldr	r2, [r7, #8]
 81029c6:	4413      	add	r3, r2
 81029c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81029d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81029d6:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81029da:	68ba      	ldr	r2, [r7, #8]
 81029dc:	0091      	lsls	r1, r2, #2
 81029de:	687a      	ldr	r2, [r7, #4]
 81029e0:	6812      	ldr	r2, [r2, #0]
 81029e2:	430b      	orrs	r3, r1
 81029e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81029f0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81029f8:	041a      	lsls	r2, r3, #16
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	681b      	ldr	r3, [r3, #0]
 81029fe:	430a      	orrs	r2, r1
 8102a00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	681b      	ldr	r3, [r3, #0]
 8102a08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102a0c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102a14:	061a      	lsls	r2, r3, #24
 8102a16:	687b      	ldr	r3, [r7, #4]
 8102a18:	681b      	ldr	r3, [r3, #0]
 8102a1a:	430a      	orrs	r2, r1
 8102a1c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102a24:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8102a28:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 8102a2c:	009a      	lsls	r2, r3, #2
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102a3a:	009b      	lsls	r3, r3, #2
 8102a3c:	441a      	add	r2, r3
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102a46:	687b      	ldr	r3, [r7, #4]
 8102a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102a4a:	00db      	lsls	r3, r3, #3
 8102a4c:	441a      	add	r2, r3
 8102a4e:	687b      	ldr	r3, [r7, #4]
 8102a50:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a5a:	6879      	ldr	r1, [r7, #4]
 8102a5c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8102a5e:	fb01 f303 	mul.w	r3, r1, r3
 8102a62:	009b      	lsls	r3, r3, #2
 8102a64:	441a      	add	r2, r3
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8102a6e:	687b      	ldr	r3, [r7, #4]
 8102a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102a72:	6879      	ldr	r1, [r7, #4]
 8102a74:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8102a76:	fb01 f303 	mul.w	r3, r1, r3
 8102a7a:	009b      	lsls	r3, r3, #2
 8102a7c:	441a      	add	r2, r3
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102a8a:	6879      	ldr	r1, [r7, #4]
 8102a8c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8102a8e:	fb01 f303 	mul.w	r3, r1, r3
 8102a92:	009b      	lsls	r3, r3, #2
 8102a94:	441a      	add	r2, r3
 8102a96:	687b      	ldr	r3, [r7, #4]
 8102a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102aa6:	00db      	lsls	r3, r3, #3
 8102aa8:	441a      	add	r2, r3
 8102aaa:	687b      	ldr	r3, [r7, #4]
 8102aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102aba:	6879      	ldr	r1, [r7, #4]
 8102abc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8102abe:	fb01 f303 	mul.w	r3, r1, r3
 8102ac2:	009b      	lsls	r3, r3, #2
 8102ac4:	441a      	add	r2, r3
 8102ac6:	687b      	ldr	r3, [r7, #4]
 8102ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ad6:	6879      	ldr	r1, [r7, #4]
 8102ad8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8102ada:	fb01 f303 	mul.w	r3, r1, r3
 8102ade:	009b      	lsls	r3, r3, #2
 8102ae0:	441a      	add	r2, r3
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8102ae8:	687b      	ldr	r3, [r7, #4]
 8102aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102aee:	4a14      	ldr	r2, [pc, #80]	; (8102b40 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8102af0:	4293      	cmp	r3, r2
 8102af2:	d90d      	bls.n	8102b10 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102afa:	f043 0220 	orr.w	r2, r3, #32
 8102afe:	687b      	ldr	r3, [r7, #4]
 8102b00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8102b04:	687b      	ldr	r3, [r7, #4]
 8102b06:	2203      	movs	r2, #3
 8102b08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8102b0c:	2301      	movs	r3, #1
 8102b0e:	e010      	b.n	8102b32 <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8102b10:	687b      	ldr	r3, [r7, #4]
 8102b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102b14:	60fb      	str	r3, [r7, #12]
 8102b16:	e005      	b.n	8102b24 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8102b18:	68fb      	ldr	r3, [r7, #12]
 8102b1a:	2200      	movs	r2, #0
 8102b1c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8102b1e:	68fb      	ldr	r3, [r7, #12]
 8102b20:	3304      	adds	r3, #4
 8102b22:	60fb      	str	r3, [r7, #12]
 8102b24:	687b      	ldr	r3, [r7, #4]
 8102b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b2a:	68fa      	ldr	r2, [r7, #12]
 8102b2c:	429a      	cmp	r2, r3
 8102b2e:	d3f3      	bcc.n	8102b18 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8102b30:	2300      	movs	r3, #0
}
 8102b32:	4618      	mov	r0, r3
 8102b34:	3714      	adds	r7, #20
 8102b36:	46bd      	mov	sp, r7
 8102b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b3c:	4770      	bx	lr
 8102b3e:	bf00      	nop
 8102b40:	4000d3fc 	.word	0x4000d3fc

08102b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102b44:	b480      	push	{r7}
 8102b46:	b089      	sub	sp, #36	; 0x24
 8102b48:	af00      	add	r7, sp, #0
 8102b4a:	6078      	str	r0, [r7, #4]
 8102b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102b4e:	2300      	movs	r3, #0
 8102b50:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102b52:	4b89      	ldr	r3, [pc, #548]	; (8102d78 <HAL_GPIO_Init+0x234>)
 8102b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102b56:	e194      	b.n	8102e82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102b58:	683b      	ldr	r3, [r7, #0]
 8102b5a:	681a      	ldr	r2, [r3, #0]
 8102b5c:	2101      	movs	r1, #1
 8102b5e:	69fb      	ldr	r3, [r7, #28]
 8102b60:	fa01 f303 	lsl.w	r3, r1, r3
 8102b64:	4013      	ands	r3, r2
 8102b66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102b68:	693b      	ldr	r3, [r7, #16]
 8102b6a:	2b00      	cmp	r3, #0
 8102b6c:	f000 8186 	beq.w	8102e7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8102b70:	683b      	ldr	r3, [r7, #0]
 8102b72:	685b      	ldr	r3, [r3, #4]
 8102b74:	2b01      	cmp	r3, #1
 8102b76:	d00b      	beq.n	8102b90 <HAL_GPIO_Init+0x4c>
 8102b78:	683b      	ldr	r3, [r7, #0]
 8102b7a:	685b      	ldr	r3, [r3, #4]
 8102b7c:	2b02      	cmp	r3, #2
 8102b7e:	d007      	beq.n	8102b90 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102b80:	683b      	ldr	r3, [r7, #0]
 8102b82:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8102b84:	2b11      	cmp	r3, #17
 8102b86:	d003      	beq.n	8102b90 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102b88:	683b      	ldr	r3, [r7, #0]
 8102b8a:	685b      	ldr	r3, [r3, #4]
 8102b8c:	2b12      	cmp	r3, #18
 8102b8e:	d130      	bne.n	8102bf2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	689b      	ldr	r3, [r3, #8]
 8102b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102b96:	69fb      	ldr	r3, [r7, #28]
 8102b98:	005b      	lsls	r3, r3, #1
 8102b9a:	2203      	movs	r2, #3
 8102b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8102ba0:	43db      	mvns	r3, r3
 8102ba2:	69ba      	ldr	r2, [r7, #24]
 8102ba4:	4013      	ands	r3, r2
 8102ba6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102ba8:	683b      	ldr	r3, [r7, #0]
 8102baa:	68da      	ldr	r2, [r3, #12]
 8102bac:	69fb      	ldr	r3, [r7, #28]
 8102bae:	005b      	lsls	r3, r3, #1
 8102bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8102bb4:	69ba      	ldr	r2, [r7, #24]
 8102bb6:	4313      	orrs	r3, r2
 8102bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102bba:	687b      	ldr	r3, [r7, #4]
 8102bbc:	69ba      	ldr	r2, [r7, #24]
 8102bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102bc0:	687b      	ldr	r3, [r7, #4]
 8102bc2:	685b      	ldr	r3, [r3, #4]
 8102bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102bc6:	2201      	movs	r2, #1
 8102bc8:	69fb      	ldr	r3, [r7, #28]
 8102bca:	fa02 f303 	lsl.w	r3, r2, r3
 8102bce:	43db      	mvns	r3, r3
 8102bd0:	69ba      	ldr	r2, [r7, #24]
 8102bd2:	4013      	ands	r3, r2
 8102bd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8102bd6:	683b      	ldr	r3, [r7, #0]
 8102bd8:	685b      	ldr	r3, [r3, #4]
 8102bda:	091b      	lsrs	r3, r3, #4
 8102bdc:	f003 0201 	and.w	r2, r3, #1
 8102be0:	69fb      	ldr	r3, [r7, #28]
 8102be2:	fa02 f303 	lsl.w	r3, r2, r3
 8102be6:	69ba      	ldr	r2, [r7, #24]
 8102be8:	4313      	orrs	r3, r2
 8102bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102bec:	687b      	ldr	r3, [r7, #4]
 8102bee:	69ba      	ldr	r2, [r7, #24]
 8102bf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102bf2:	687b      	ldr	r3, [r7, #4]
 8102bf4:	68db      	ldr	r3, [r3, #12]
 8102bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102bf8:	69fb      	ldr	r3, [r7, #28]
 8102bfa:	005b      	lsls	r3, r3, #1
 8102bfc:	2203      	movs	r2, #3
 8102bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8102c02:	43db      	mvns	r3, r3
 8102c04:	69ba      	ldr	r2, [r7, #24]
 8102c06:	4013      	ands	r3, r2
 8102c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102c0a:	683b      	ldr	r3, [r7, #0]
 8102c0c:	689a      	ldr	r2, [r3, #8]
 8102c0e:	69fb      	ldr	r3, [r7, #28]
 8102c10:	005b      	lsls	r3, r3, #1
 8102c12:	fa02 f303 	lsl.w	r3, r2, r3
 8102c16:	69ba      	ldr	r2, [r7, #24]
 8102c18:	4313      	orrs	r3, r2
 8102c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102c1c:	687b      	ldr	r3, [r7, #4]
 8102c1e:	69ba      	ldr	r2, [r7, #24]
 8102c20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102c22:	683b      	ldr	r3, [r7, #0]
 8102c24:	685b      	ldr	r3, [r3, #4]
 8102c26:	2b02      	cmp	r3, #2
 8102c28:	d003      	beq.n	8102c32 <HAL_GPIO_Init+0xee>
 8102c2a:	683b      	ldr	r3, [r7, #0]
 8102c2c:	685b      	ldr	r3, [r3, #4]
 8102c2e:	2b12      	cmp	r3, #18
 8102c30:	d123      	bne.n	8102c7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102c32:	69fb      	ldr	r3, [r7, #28]
 8102c34:	08da      	lsrs	r2, r3, #3
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	3208      	adds	r2, #8
 8102c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102c40:	69fb      	ldr	r3, [r7, #28]
 8102c42:	f003 0307 	and.w	r3, r3, #7
 8102c46:	009b      	lsls	r3, r3, #2
 8102c48:	220f      	movs	r2, #15
 8102c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8102c4e:	43db      	mvns	r3, r3
 8102c50:	69ba      	ldr	r2, [r7, #24]
 8102c52:	4013      	ands	r3, r2
 8102c54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102c56:	683b      	ldr	r3, [r7, #0]
 8102c58:	691a      	ldr	r2, [r3, #16]
 8102c5a:	69fb      	ldr	r3, [r7, #28]
 8102c5c:	f003 0307 	and.w	r3, r3, #7
 8102c60:	009b      	lsls	r3, r3, #2
 8102c62:	fa02 f303 	lsl.w	r3, r2, r3
 8102c66:	69ba      	ldr	r2, [r7, #24]
 8102c68:	4313      	orrs	r3, r2
 8102c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102c6c:	69fb      	ldr	r3, [r7, #28]
 8102c6e:	08da      	lsrs	r2, r3, #3
 8102c70:	687b      	ldr	r3, [r7, #4]
 8102c72:	3208      	adds	r2, #8
 8102c74:	69b9      	ldr	r1, [r7, #24]
 8102c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102c7a:	687b      	ldr	r3, [r7, #4]
 8102c7c:	681b      	ldr	r3, [r3, #0]
 8102c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102c80:	69fb      	ldr	r3, [r7, #28]
 8102c82:	005b      	lsls	r3, r3, #1
 8102c84:	2203      	movs	r2, #3
 8102c86:	fa02 f303 	lsl.w	r3, r2, r3
 8102c8a:	43db      	mvns	r3, r3
 8102c8c:	69ba      	ldr	r2, [r7, #24]
 8102c8e:	4013      	ands	r3, r2
 8102c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102c92:	683b      	ldr	r3, [r7, #0]
 8102c94:	685b      	ldr	r3, [r3, #4]
 8102c96:	f003 0203 	and.w	r2, r3, #3
 8102c9a:	69fb      	ldr	r3, [r7, #28]
 8102c9c:	005b      	lsls	r3, r3, #1
 8102c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8102ca2:	69ba      	ldr	r2, [r7, #24]
 8102ca4:	4313      	orrs	r3, r2
 8102ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	69ba      	ldr	r2, [r7, #24]
 8102cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8102cae:	683b      	ldr	r3, [r7, #0]
 8102cb0:	685b      	ldr	r3, [r3, #4]
 8102cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102cb6:	2b00      	cmp	r3, #0
 8102cb8:	f000 80e0 	beq.w	8102e7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102cbc:	4b2f      	ldr	r3, [pc, #188]	; (8102d7c <HAL_GPIO_Init+0x238>)
 8102cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102cc2:	4a2e      	ldr	r2, [pc, #184]	; (8102d7c <HAL_GPIO_Init+0x238>)
 8102cc4:	f043 0302 	orr.w	r3, r3, #2
 8102cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102ccc:	4b2b      	ldr	r3, [pc, #172]	; (8102d7c <HAL_GPIO_Init+0x238>)
 8102cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102cd2:	f003 0302 	and.w	r3, r3, #2
 8102cd6:	60fb      	str	r3, [r7, #12]
 8102cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102cda:	4a29      	ldr	r2, [pc, #164]	; (8102d80 <HAL_GPIO_Init+0x23c>)
 8102cdc:	69fb      	ldr	r3, [r7, #28]
 8102cde:	089b      	lsrs	r3, r3, #2
 8102ce0:	3302      	adds	r3, #2
 8102ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102ce8:	69fb      	ldr	r3, [r7, #28]
 8102cea:	f003 0303 	and.w	r3, r3, #3
 8102cee:	009b      	lsls	r3, r3, #2
 8102cf0:	220f      	movs	r2, #15
 8102cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8102cf6:	43db      	mvns	r3, r3
 8102cf8:	69ba      	ldr	r2, [r7, #24]
 8102cfa:	4013      	ands	r3, r2
 8102cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	4a20      	ldr	r2, [pc, #128]	; (8102d84 <HAL_GPIO_Init+0x240>)
 8102d02:	4293      	cmp	r3, r2
 8102d04:	d052      	beq.n	8102dac <HAL_GPIO_Init+0x268>
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	4a1f      	ldr	r2, [pc, #124]	; (8102d88 <HAL_GPIO_Init+0x244>)
 8102d0a:	4293      	cmp	r3, r2
 8102d0c:	d031      	beq.n	8102d72 <HAL_GPIO_Init+0x22e>
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	4a1e      	ldr	r2, [pc, #120]	; (8102d8c <HAL_GPIO_Init+0x248>)
 8102d12:	4293      	cmp	r3, r2
 8102d14:	d02b      	beq.n	8102d6e <HAL_GPIO_Init+0x22a>
 8102d16:	687b      	ldr	r3, [r7, #4]
 8102d18:	4a1d      	ldr	r2, [pc, #116]	; (8102d90 <HAL_GPIO_Init+0x24c>)
 8102d1a:	4293      	cmp	r3, r2
 8102d1c:	d025      	beq.n	8102d6a <HAL_GPIO_Init+0x226>
 8102d1e:	687b      	ldr	r3, [r7, #4]
 8102d20:	4a1c      	ldr	r2, [pc, #112]	; (8102d94 <HAL_GPIO_Init+0x250>)
 8102d22:	4293      	cmp	r3, r2
 8102d24:	d01f      	beq.n	8102d66 <HAL_GPIO_Init+0x222>
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	4a1b      	ldr	r2, [pc, #108]	; (8102d98 <HAL_GPIO_Init+0x254>)
 8102d2a:	4293      	cmp	r3, r2
 8102d2c:	d019      	beq.n	8102d62 <HAL_GPIO_Init+0x21e>
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	4a1a      	ldr	r2, [pc, #104]	; (8102d9c <HAL_GPIO_Init+0x258>)
 8102d32:	4293      	cmp	r3, r2
 8102d34:	d013      	beq.n	8102d5e <HAL_GPIO_Init+0x21a>
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	4a19      	ldr	r2, [pc, #100]	; (8102da0 <HAL_GPIO_Init+0x25c>)
 8102d3a:	4293      	cmp	r3, r2
 8102d3c:	d00d      	beq.n	8102d5a <HAL_GPIO_Init+0x216>
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	4a18      	ldr	r2, [pc, #96]	; (8102da4 <HAL_GPIO_Init+0x260>)
 8102d42:	4293      	cmp	r3, r2
 8102d44:	d007      	beq.n	8102d56 <HAL_GPIO_Init+0x212>
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	4a17      	ldr	r2, [pc, #92]	; (8102da8 <HAL_GPIO_Init+0x264>)
 8102d4a:	4293      	cmp	r3, r2
 8102d4c:	d101      	bne.n	8102d52 <HAL_GPIO_Init+0x20e>
 8102d4e:	2309      	movs	r3, #9
 8102d50:	e02d      	b.n	8102dae <HAL_GPIO_Init+0x26a>
 8102d52:	230a      	movs	r3, #10
 8102d54:	e02b      	b.n	8102dae <HAL_GPIO_Init+0x26a>
 8102d56:	2308      	movs	r3, #8
 8102d58:	e029      	b.n	8102dae <HAL_GPIO_Init+0x26a>
 8102d5a:	2307      	movs	r3, #7
 8102d5c:	e027      	b.n	8102dae <HAL_GPIO_Init+0x26a>
 8102d5e:	2306      	movs	r3, #6
 8102d60:	e025      	b.n	8102dae <HAL_GPIO_Init+0x26a>
 8102d62:	2305      	movs	r3, #5
 8102d64:	e023      	b.n	8102dae <HAL_GPIO_Init+0x26a>
 8102d66:	2304      	movs	r3, #4
 8102d68:	e021      	b.n	8102dae <HAL_GPIO_Init+0x26a>
 8102d6a:	2303      	movs	r3, #3
 8102d6c:	e01f      	b.n	8102dae <HAL_GPIO_Init+0x26a>
 8102d6e:	2302      	movs	r3, #2
 8102d70:	e01d      	b.n	8102dae <HAL_GPIO_Init+0x26a>
 8102d72:	2301      	movs	r3, #1
 8102d74:	e01b      	b.n	8102dae <HAL_GPIO_Init+0x26a>
 8102d76:	bf00      	nop
 8102d78:	580000c0 	.word	0x580000c0
 8102d7c:	58024400 	.word	0x58024400
 8102d80:	58000400 	.word	0x58000400
 8102d84:	58020000 	.word	0x58020000
 8102d88:	58020400 	.word	0x58020400
 8102d8c:	58020800 	.word	0x58020800
 8102d90:	58020c00 	.word	0x58020c00
 8102d94:	58021000 	.word	0x58021000
 8102d98:	58021400 	.word	0x58021400
 8102d9c:	58021800 	.word	0x58021800
 8102da0:	58021c00 	.word	0x58021c00
 8102da4:	58022000 	.word	0x58022000
 8102da8:	58022400 	.word	0x58022400
 8102dac:	2300      	movs	r3, #0
 8102dae:	69fa      	ldr	r2, [r7, #28]
 8102db0:	f002 0203 	and.w	r2, r2, #3
 8102db4:	0092      	lsls	r2, r2, #2
 8102db6:	4093      	lsls	r3, r2
 8102db8:	69ba      	ldr	r2, [r7, #24]
 8102dba:	4313      	orrs	r3, r2
 8102dbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102dbe:	4938      	ldr	r1, [pc, #224]	; (8102ea0 <HAL_GPIO_Init+0x35c>)
 8102dc0:	69fb      	ldr	r3, [r7, #28]
 8102dc2:	089b      	lsrs	r3, r3, #2
 8102dc4:	3302      	adds	r3, #2
 8102dc6:	69ba      	ldr	r2, [r7, #24]
 8102dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102dcc:	697b      	ldr	r3, [r7, #20]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102dd2:	693b      	ldr	r3, [r7, #16]
 8102dd4:	43db      	mvns	r3, r3
 8102dd6:	69ba      	ldr	r2, [r7, #24]
 8102dd8:	4013      	ands	r3, r2
 8102dda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8102ddc:	683b      	ldr	r3, [r7, #0]
 8102dde:	685b      	ldr	r3, [r3, #4]
 8102de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102de4:	2b00      	cmp	r3, #0
 8102de6:	d003      	beq.n	8102df0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8102de8:	69ba      	ldr	r2, [r7, #24]
 8102dea:	693b      	ldr	r3, [r7, #16]
 8102dec:	4313      	orrs	r3, r2
 8102dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102df0:	697b      	ldr	r3, [r7, #20]
 8102df2:	69ba      	ldr	r2, [r7, #24]
 8102df4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8102df6:	697b      	ldr	r3, [r7, #20]
 8102df8:	685b      	ldr	r3, [r3, #4]
 8102dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102dfc:	693b      	ldr	r3, [r7, #16]
 8102dfe:	43db      	mvns	r3, r3
 8102e00:	69ba      	ldr	r2, [r7, #24]
 8102e02:	4013      	ands	r3, r2
 8102e04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8102e06:	683b      	ldr	r3, [r7, #0]
 8102e08:	685b      	ldr	r3, [r3, #4]
 8102e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102e0e:	2b00      	cmp	r3, #0
 8102e10:	d003      	beq.n	8102e1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8102e12:	69ba      	ldr	r2, [r7, #24]
 8102e14:	693b      	ldr	r3, [r7, #16]
 8102e16:	4313      	orrs	r3, r2
 8102e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102e1a:	697b      	ldr	r3, [r7, #20]
 8102e1c:	69ba      	ldr	r2, [r7, #24]
 8102e1e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102e24:	681b      	ldr	r3, [r3, #0]
 8102e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102e28:	693b      	ldr	r3, [r7, #16]
 8102e2a:	43db      	mvns	r3, r3
 8102e2c:	69ba      	ldr	r2, [r7, #24]
 8102e2e:	4013      	ands	r3, r2
 8102e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8102e32:	683b      	ldr	r3, [r7, #0]
 8102e34:	685b      	ldr	r3, [r3, #4]
 8102e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102e3a:	2b00      	cmp	r3, #0
 8102e3c:	d003      	beq.n	8102e46 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8102e3e:	69ba      	ldr	r2, [r7, #24]
 8102e40:	693b      	ldr	r3, [r7, #16]
 8102e42:	4313      	orrs	r3, r2
 8102e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102e4a:	69bb      	ldr	r3, [r7, #24]
 8102e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102e52:	685b      	ldr	r3, [r3, #4]
 8102e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102e56:	693b      	ldr	r3, [r7, #16]
 8102e58:	43db      	mvns	r3, r3
 8102e5a:	69ba      	ldr	r2, [r7, #24]
 8102e5c:	4013      	ands	r3, r2
 8102e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8102e60:	683b      	ldr	r3, [r7, #0]
 8102e62:	685b      	ldr	r3, [r3, #4]
 8102e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102e68:	2b00      	cmp	r3, #0
 8102e6a:	d003      	beq.n	8102e74 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8102e6c:	69ba      	ldr	r2, [r7, #24]
 8102e6e:	693b      	ldr	r3, [r7, #16]
 8102e70:	4313      	orrs	r3, r2
 8102e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102e78:	69bb      	ldr	r3, [r7, #24]
 8102e7a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8102e7c:	69fb      	ldr	r3, [r7, #28]
 8102e7e:	3301      	adds	r3, #1
 8102e80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102e82:	683b      	ldr	r3, [r7, #0]
 8102e84:	681a      	ldr	r2, [r3, #0]
 8102e86:	69fb      	ldr	r3, [r7, #28]
 8102e88:	fa22 f303 	lsr.w	r3, r2, r3
 8102e8c:	2b00      	cmp	r3, #0
 8102e8e:	f47f ae63 	bne.w	8102b58 <HAL_GPIO_Init+0x14>
  }
}
 8102e92:	bf00      	nop
 8102e94:	3724      	adds	r7, #36	; 0x24
 8102e96:	46bd      	mov	sp, r7
 8102e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e9c:	4770      	bx	lr
 8102e9e:	bf00      	nop
 8102ea0:	58000400 	.word	0x58000400

08102ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102ea4:	b480      	push	{r7}
 8102ea6:	b083      	sub	sp, #12
 8102ea8:	af00      	add	r7, sp, #0
 8102eaa:	6078      	str	r0, [r7, #4]
 8102eac:	460b      	mov	r3, r1
 8102eae:	807b      	strh	r3, [r7, #2]
 8102eb0:	4613      	mov	r3, r2
 8102eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102eb4:	787b      	ldrb	r3, [r7, #1]
 8102eb6:	2b00      	cmp	r3, #0
 8102eb8:	d003      	beq.n	8102ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8102eba:	887a      	ldrh	r2, [r7, #2]
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102ec0:	e003      	b.n	8102eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102ec2:	887b      	ldrh	r3, [r7, #2]
 8102ec4:	041a      	lsls	r2, r3, #16
 8102ec6:	687b      	ldr	r3, [r7, #4]
 8102ec8:	619a      	str	r2, [r3, #24]
}
 8102eca:	bf00      	nop
 8102ecc:	370c      	adds	r7, #12
 8102ece:	46bd      	mov	sp, r7
 8102ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ed4:	4770      	bx	lr

08102ed6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8102ed6:	b480      	push	{r7}
 8102ed8:	b083      	sub	sp, #12
 8102eda:	af00      	add	r7, sp, #0
 8102edc:	6078      	str	r0, [r7, #4]
 8102ede:	460b      	mov	r3, r1
 8102ee0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	695a      	ldr	r2, [r3, #20]
 8102ee6:	887b      	ldrh	r3, [r7, #2]
 8102ee8:	401a      	ands	r2, r3
 8102eea:	887b      	ldrh	r3, [r7, #2]
 8102eec:	429a      	cmp	r2, r3
 8102eee:	d104      	bne.n	8102efa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102ef0:	887b      	ldrh	r3, [r7, #2]
 8102ef2:	041a      	lsls	r2, r3, #16
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8102ef8:	e002      	b.n	8102f00 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8102efa:	887a      	ldrh	r2, [r7, #2]
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	619a      	str	r2, [r3, #24]
}
 8102f00:	bf00      	nop
 8102f02:	370c      	adds	r7, #12
 8102f04:	46bd      	mov	sp, r7
 8102f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f0a:	4770      	bx	lr

08102f0c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102f0c:	b480      	push	{r7}
 8102f0e:	b083      	sub	sp, #12
 8102f10:	af00      	add	r7, sp, #0
 8102f12:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102f14:	4b05      	ldr	r3, [pc, #20]	; (8102f2c <HAL_HSEM_ActivateNotification+0x20>)
 8102f16:	681a      	ldr	r2, [r3, #0]
 8102f18:	4904      	ldr	r1, [pc, #16]	; (8102f2c <HAL_HSEM_ActivateNotification+0x20>)
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	4313      	orrs	r3, r2
 8102f1e:	600b      	str	r3, [r1, #0]
#endif
}
 8102f20:	bf00      	nop
 8102f22:	370c      	adds	r7, #12
 8102f24:	46bd      	mov	sp, r7
 8102f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f2a:	4770      	bx	lr
 8102f2c:	58026510 	.word	0x58026510

08102f30 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8102f30:	b580      	push	{r7, lr}
 8102f32:	b082      	sub	sp, #8
 8102f34:	af00      	add	r7, sp, #0
 8102f36:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	2b00      	cmp	r3, #0
 8102f3c:	d101      	bne.n	8102f42 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8102f3e:	2301      	movs	r3, #1
 8102f40:	e022      	b.n	8102f88 <HAL_MMC_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102f48:	b2db      	uxtb	r3, r3
 8102f4a:	2b00      	cmp	r3, #0
 8102f4c:	d105      	bne.n	8102f5a <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	2200      	movs	r2, #0
 8102f52:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8102f54:	6878      	ldr	r0, [r7, #4]
 8102f56:	f7fe f9fb 	bl	8101350 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	2203      	movs	r2, #3
 8102f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8102f62:	6878      	ldr	r0, [r7, #4]
 8102f64:	f000 f814 	bl	8102f90 <HAL_MMC_InitCard>
 8102f68:	4603      	mov	r3, r0
 8102f6a:	2b01      	cmp	r3, #1
 8102f6c:	d101      	bne.n	8102f72 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8102f6e:	2301      	movs	r3, #1
 8102f70:	e00a      	b.n	8102f88 <HAL_MMC_Init+0x58>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	2200      	movs	r2, #0
 8102f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	2200      	movs	r2, #0
 8102f7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	2201      	movs	r2, #1
 8102f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8102f86:	2300      	movs	r3, #0
}
 8102f88:	4618      	mov	r0, r3
 8102f8a:	3708      	adds	r7, #8
 8102f8c:	46bd      	mov	sp, r7
 8102f8e:	bd80      	pop	{r7, pc}

08102f90 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8102f90:	b5b0      	push	{r4, r5, r7, lr}
 8102f92:	b08e      	sub	sp, #56	; 0x38
 8102f94:	af04      	add	r7, sp, #16
 8102f96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8102f98:	2300      	movs	r3, #0
 8102f9a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8102f9c:	2300      	movs	r3, #0
 8102f9e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8102fa0:	2300      	movs	r3, #0
 8102fa2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8102fa4:	2300      	movs	r3, #0
 8102fa6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8102fa8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8102fac:	f001 f858 	bl	8104060 <HAL_RCCEx_GetPeriphCLKFreq>
 8102fb0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8102fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102fb4:	0a1b      	lsrs	r3, r3, #8
 8102fb6:	4a3a      	ldr	r2, [pc, #232]	; (81030a0 <HAL_MMC_InitCard+0x110>)
 8102fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8102fbc:	091b      	lsrs	r3, r3, #4
 8102fbe:	61bb      	str	r3, [r7, #24]

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	681d      	ldr	r5, [r3, #0]
 8102fc4:	466c      	mov	r4, sp
 8102fc6:	f107 0314 	add.w	r3, r7, #20
 8102fca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8102fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8102fd2:	f107 0308 	add.w	r3, r7, #8
 8102fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8102fd8:	4628      	mov	r0, r5
 8102fda:	f003 fb15 	bl	8106608 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8102fde:	687b      	ldr	r3, [r7, #4]
 8102fe0:	681b      	ldr	r3, [r3, #0]
 8102fe2:	4618      	mov	r0, r3
 8102fe4:	f003 fb47 	bl	8106676 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8102fe8:	69bb      	ldr	r3, [r7, #24]
 8102fea:	005b      	lsls	r3, r3, #1
 8102fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8102ff2:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8102ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102ff6:	2b00      	cmp	r3, #0
 8102ff8:	d008      	beq.n	810300c <HAL_MMC_InitCard+0x7c>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8102ffa:	4a2a      	ldr	r2, [pc, #168]	; (81030a4 <HAL_MMC_InitCard+0x114>)
 8102ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8103002:	3301      	adds	r3, #1
 8103004:	4618      	mov	r0, r3
 8103006:	f7fe fcdb 	bl	81019c0 <HAL_Delay>
 810300a:	e002      	b.n	8103012 <HAL_MMC_InitCard+0x82>
  }
  else
  {
    HAL_Delay(2U);
 810300c:	2002      	movs	r0, #2
 810300e:	f7fe fcd7 	bl	81019c0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8103012:	6878      	ldr	r0, [r7, #4]
 8103014:	f000 fad0 	bl	81035b8 <MMC_PowerON>
 8103018:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 810301a:	6a3b      	ldr	r3, [r7, #32]
 810301c:	2b00      	cmp	r3, #0
 810301e:	d00b      	beq.n	8103038 <HAL_MMC_InitCard+0xa8>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	2201      	movs	r2, #1
 8103024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810302c:	6a3b      	ldr	r3, [r7, #32]
 810302e:	431a      	orrs	r2, r3
 8103030:	687b      	ldr	r3, [r7, #4]
 8103032:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8103034:	2301      	movs	r3, #1
 8103036:	e02e      	b.n	8103096 <HAL_MMC_InitCard+0x106>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8103038:	6878      	ldr	r0, [r7, #4]
 810303a:	f000 f9db 	bl	81033f4 <MMC_InitCard>
 810303e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8103040:	6a3b      	ldr	r3, [r7, #32]
 8103042:	2b00      	cmp	r3, #0
 8103044:	d00b      	beq.n	810305e <HAL_MMC_InitCard+0xce>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	2201      	movs	r2, #1
 810304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103052:	6a3b      	ldr	r3, [r7, #32]
 8103054:	431a      	orrs	r2, r3
 8103056:	687b      	ldr	r3, [r7, #4]
 8103058:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 810305a:	2301      	movs	r3, #1
 810305c:	e01b      	b.n	8103096 <HAL_MMC_InitCard+0x106>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	681b      	ldr	r3, [r3, #0]
 8103062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8103066:	4618      	mov	r0, r3
 8103068:	f003 fb9a 	bl	81067a0 <SDMMC_CmdBlockLength>
 810306c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 810306e:	6a3b      	ldr	r3, [r7, #32]
 8103070:	2b00      	cmp	r3, #0
 8103072:	d00f      	beq.n	8103094 <HAL_MMC_InitCard+0x104>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	681b      	ldr	r3, [r3, #0]
 8103078:	4a0b      	ldr	r2, [pc, #44]	; (81030a8 <HAL_MMC_InitCard+0x118>)
 810307a:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103080:	6a3b      	ldr	r3, [r7, #32]
 8103082:	431a      	orrs	r2, r3
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8103088:	687b      	ldr	r3, [r7, #4]
 810308a:	2201      	movs	r2, #1
 810308c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8103090:	2301      	movs	r3, #1
 8103092:	e000      	b.n	8103096 <HAL_MMC_InitCard+0x106>
  }

  return HAL_OK;
 8103094:	2300      	movs	r3, #0
}
 8103096:	4618      	mov	r0, r3
 8103098:	3728      	adds	r7, #40	; 0x28
 810309a:	46bd      	mov	sp, r7
 810309c:	bdb0      	pop	{r4, r5, r7, pc}
 810309e:	bf00      	nop
 81030a0:	014f8b59 	.word	0x014f8b59
 81030a4:	00012110 	.word	0x00012110
 81030a8:	1fe00fff 	.word	0x1fe00fff

081030ac <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 81030ac:	b580      	push	{r7, lr}
 81030ae:	b084      	sub	sp, #16
 81030b0:	af00      	add	r7, sp, #0
 81030b2:	6078      	str	r0, [r7, #4]
 81030b4:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 81030b6:	2300      	movs	r3, #0
 81030b8:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030be:	0f9b      	lsrs	r3, r3, #30
 81030c0:	b2da      	uxtb	r2, r3
 81030c2:	683b      	ldr	r3, [r7, #0]
 81030c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030ca:	0e9b      	lsrs	r3, r3, #26
 81030cc:	b2db      	uxtb	r3, r3
 81030ce:	f003 030f 	and.w	r3, r3, #15
 81030d2:	b2da      	uxtb	r2, r3
 81030d4:	683b      	ldr	r3, [r7, #0]
 81030d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030dc:	0e1b      	lsrs	r3, r3, #24
 81030de:	b2db      	uxtb	r3, r3
 81030e0:	f003 0303 	and.w	r3, r3, #3
 81030e4:	b2da      	uxtb	r2, r3
 81030e6:	683b      	ldr	r3, [r7, #0]
 81030e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030ee:	0c1b      	lsrs	r3, r3, #16
 81030f0:	b2da      	uxtb	r2, r3
 81030f2:	683b      	ldr	r3, [r7, #0]
 81030f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030fa:	0a1b      	lsrs	r3, r3, #8
 81030fc:	b2da      	uxtb	r2, r3
 81030fe:	683b      	ldr	r3, [r7, #0]
 8103100:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103106:	b2da      	uxtb	r2, r3
 8103108:	683b      	ldr	r3, [r7, #0]
 810310a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103110:	0d1b      	lsrs	r3, r3, #20
 8103112:	b29a      	uxth	r2, r3
 8103114:	683b      	ldr	r3, [r7, #0]
 8103116:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810311c:	0c1b      	lsrs	r3, r3, #16
 810311e:	b2db      	uxtb	r3, r3
 8103120:	f003 030f 	and.w	r3, r3, #15
 8103124:	b2da      	uxtb	r2, r3
 8103126:	683b      	ldr	r3, [r7, #0]
 8103128:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810312e:	0bdb      	lsrs	r3, r3, #15
 8103130:	b2db      	uxtb	r3, r3
 8103132:	f003 0301 	and.w	r3, r3, #1
 8103136:	b2da      	uxtb	r2, r3
 8103138:	683b      	ldr	r3, [r7, #0]
 810313a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103140:	0b9b      	lsrs	r3, r3, #14
 8103142:	b2db      	uxtb	r3, r3
 8103144:	f003 0301 	and.w	r3, r3, #1
 8103148:	b2da      	uxtb	r2, r3
 810314a:	683b      	ldr	r3, [r7, #0]
 810314c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 810314e:	687b      	ldr	r3, [r7, #4]
 8103150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103152:	0b5b      	lsrs	r3, r3, #13
 8103154:	b2db      	uxtb	r3, r3
 8103156:	f003 0301 	and.w	r3, r3, #1
 810315a:	b2da      	uxtb	r2, r3
 810315c:	683b      	ldr	r3, [r7, #0]
 810315e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103164:	0b1b      	lsrs	r3, r3, #12
 8103166:	b2db      	uxtb	r3, r3
 8103168:	f003 0301 	and.w	r3, r3, #1
 810316c:	b2da      	uxtb	r2, r3
 810316e:	683b      	ldr	r3, [r7, #0]
 8103170:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8103172:	683b      	ldr	r3, [r7, #0]
 8103174:	2200      	movs	r2, #0
 8103176:	735a      	strb	r2, [r3, #13]

  if(MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8103178:	f107 010c 	add.w	r1, r7, #12
 810317c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8103180:	22d4      	movs	r2, #212	; 0xd4
 8103182:	6878      	ldr	r0, [r7, #4]
 8103184:	f000 fa68 	bl	8103658 <MMC_ReadExtCSD>
 8103188:	4603      	mov	r3, r0
 810318a:	2b00      	cmp	r3, #0
 810318c:	d001      	beq.n	8103192 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 810318e:	2301      	movs	r3, #1
 8103190:	e129      	b.n	81033e6 <HAL_MMC_GetCardCSD+0x33a>
  }

  if(hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103196:	2b00      	cmp	r3, #0
 8103198:	d163      	bne.n	8103262 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810319e:	009a      	lsls	r2, r3, #2
 81031a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 81031a4:	4013      	ands	r3, r2
 81031a6:	687a      	ldr	r2, [r7, #4]
 81031a8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 81031aa:	0f92      	lsrs	r2, r2, #30
 81031ac:	431a      	orrs	r2, r3
 81031ae:	683b      	ldr	r3, [r7, #0]
 81031b0:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81031b6:	0edb      	lsrs	r3, r3, #27
 81031b8:	b2db      	uxtb	r3, r3
 81031ba:	f003 0307 	and.w	r3, r3, #7
 81031be:	b2da      	uxtb	r2, r3
 81031c0:	683b      	ldr	r3, [r7, #0]
 81031c2:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81031c8:	0e1b      	lsrs	r3, r3, #24
 81031ca:	b2db      	uxtb	r3, r3
 81031cc:	f003 0307 	and.w	r3, r3, #7
 81031d0:	b2da      	uxtb	r2, r3
 81031d2:	683b      	ldr	r3, [r7, #0]
 81031d4:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 81031d6:	687b      	ldr	r3, [r7, #4]
 81031d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81031da:	0d5b      	lsrs	r3, r3, #21
 81031dc:	b2db      	uxtb	r3, r3
 81031de:	f003 0307 	and.w	r3, r3, #7
 81031e2:	b2da      	uxtb	r2, r3
 81031e4:	683b      	ldr	r3, [r7, #0]
 81031e6:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81031ec:	0c9b      	lsrs	r3, r3, #18
 81031ee:	b2db      	uxtb	r3, r3
 81031f0:	f003 0307 	and.w	r3, r3, #7
 81031f4:	b2da      	uxtb	r2, r3
 81031f6:	683b      	ldr	r3, [r7, #0]
 81031f8:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81031fe:	0bdb      	lsrs	r3, r3, #15
 8103200:	b2db      	uxtb	r3, r3
 8103202:	f003 0307 	and.w	r3, r3, #7
 8103206:	b2da      	uxtb	r2, r3
 8103208:	683b      	ldr	r3, [r7, #0]
 810320a:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 810320c:	683b      	ldr	r3, [r7, #0]
 810320e:	691b      	ldr	r3, [r3, #16]
 8103210:	1c5a      	adds	r2, r3, #1
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8103216:	683b      	ldr	r3, [r7, #0]
 8103218:	7e1b      	ldrb	r3, [r3, #24]
 810321a:	b2db      	uxtb	r3, r3
 810321c:	f003 0307 	and.w	r3, r3, #7
 8103220:	3302      	adds	r3, #2
 8103222:	2201      	movs	r2, #1
 8103224:	fa02 f303 	lsl.w	r3, r2, r3
 8103228:	687a      	ldr	r2, [r7, #4]
 810322a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810322c:	fb02 f203 	mul.w	r2, r2, r3
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8103234:	683b      	ldr	r3, [r7, #0]
 8103236:	7a1b      	ldrb	r3, [r3, #8]
 8103238:	b2db      	uxtb	r3, r3
 810323a:	f003 030f 	and.w	r3, r3, #15
 810323e:	2201      	movs	r2, #1
 8103240:	409a      	lsls	r2, r3
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	64da      	str	r2, [r3, #76]	; 0x4c

    hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810324a:	687a      	ldr	r2, [r7, #4]
 810324c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 810324e:	0a52      	lsrs	r2, r2, #9
 8103250:	fb02 f203 	mul.w	r2, r2, r3
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	651a      	str	r2, [r3, #80]	; 0x50
    hmmc->MmcCard.LogBlockSize = 512U;
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810325e:	655a      	str	r2, [r3, #84]	; 0x54
 8103260:	e023      	b.n	81032aa <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if(hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103266:	2b01      	cmp	r3, #1
 8103268:	d10f      	bne.n	810328a <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 810326a:	68fa      	ldr	r2, [r7, #12]
 810326c:	687b      	ldr	r3, [r7, #4]
 810326e:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	651a      	str	r2, [r3, #80]	; 0x50
    hmmc->MmcCard.BlockSize = 512U;
 8103278:	687b      	ldr	r3, [r7, #4]
 810327a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810327e:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8103280:	687b      	ldr	r3, [r7, #4]
 8103282:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	655a      	str	r2, [r3, #84]	; 0x54
 8103288:	e00f      	b.n	81032aa <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810328a:	687b      	ldr	r3, [r7, #4]
 810328c:	681b      	ldr	r3, [r3, #0]
 810328e:	4a58      	ldr	r2, [pc, #352]	; (81033f0 <HAL_MMC_GetCardCSD+0x344>)
 8103290:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103296:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	2201      	movs	r2, #1
 81032a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 81032a6:	2301      	movs	r3, #1
 81032a8:	e09d      	b.n	81033e6 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81032ae:	0b9b      	lsrs	r3, r3, #14
 81032b0:	b2db      	uxtb	r3, r3
 81032b2:	f003 0301 	and.w	r3, r3, #1
 81032b6:	b2da      	uxtb	r2, r3
 81032b8:	683b      	ldr	r3, [r7, #0]
 81032ba:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81032c0:	09db      	lsrs	r3, r3, #7
 81032c2:	b2db      	uxtb	r3, r3
 81032c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81032c8:	b2da      	uxtb	r2, r3
 81032ca:	683b      	ldr	r3, [r7, #0]
 81032cc:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81032d2:	b2db      	uxtb	r3, r3
 81032d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81032d8:	b2da      	uxtb	r2, r3
 81032da:	683b      	ldr	r3, [r7, #0]
 81032dc:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 81032de:	687b      	ldr	r3, [r7, #4]
 81032e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81032e2:	0fdb      	lsrs	r3, r3, #31
 81032e4:	b2da      	uxtb	r2, r3
 81032e6:	683b      	ldr	r3, [r7, #0]
 81032e8:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81032ee:	0f5b      	lsrs	r3, r3, #29
 81032f0:	b2db      	uxtb	r3, r3
 81032f2:	f003 0303 	and.w	r3, r3, #3
 81032f6:	b2da      	uxtb	r2, r3
 81032f8:	683b      	ldr	r3, [r7, #0]
 81032fa:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 81032fc:	687b      	ldr	r3, [r7, #4]
 81032fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103300:	0e9b      	lsrs	r3, r3, #26
 8103302:	b2db      	uxtb	r3, r3
 8103304:	f003 0307 	and.w	r3, r3, #7
 8103308:	b2da      	uxtb	r2, r3
 810330a:	683b      	ldr	r3, [r7, #0]
 810330c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103312:	0d9b      	lsrs	r3, r3, #22
 8103314:	b2db      	uxtb	r3, r3
 8103316:	f003 030f 	and.w	r3, r3, #15
 810331a:	b2da      	uxtb	r2, r3
 810331c:	683b      	ldr	r3, [r7, #0]
 810331e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103324:	0d5b      	lsrs	r3, r3, #21
 8103326:	b2db      	uxtb	r3, r3
 8103328:	f003 0301 	and.w	r3, r3, #1
 810332c:	b2da      	uxtb	r2, r3
 810332e:	683b      	ldr	r3, [r7, #0]
 8103330:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8103334:	683b      	ldr	r3, [r7, #0]
 8103336:	2200      	movs	r2, #0
 8103338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103340:	0c1b      	lsrs	r3, r3, #16
 8103342:	b2db      	uxtb	r3, r3
 8103344:	f003 0301 	and.w	r3, r3, #1
 8103348:	b2da      	uxtb	r2, r3
 810334a:	683b      	ldr	r3, [r7, #0]
 810334c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103354:	0bdb      	lsrs	r3, r3, #15
 8103356:	b2db      	uxtb	r3, r3
 8103358:	f003 0301 	and.w	r3, r3, #1
 810335c:	b2da      	uxtb	r2, r3
 810335e:	683b      	ldr	r3, [r7, #0]
 8103360:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103368:	0b9b      	lsrs	r3, r3, #14
 810336a:	b2db      	uxtb	r3, r3
 810336c:	f003 0301 	and.w	r3, r3, #1
 8103370:	b2da      	uxtb	r2, r3
 8103372:	683b      	ldr	r3, [r7, #0]
 8103374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810337c:	0b5b      	lsrs	r3, r3, #13
 810337e:	b2db      	uxtb	r3, r3
 8103380:	f003 0301 	and.w	r3, r3, #1
 8103384:	b2da      	uxtb	r2, r3
 8103386:	683b      	ldr	r3, [r7, #0]
 8103388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103390:	0b1b      	lsrs	r3, r3, #12
 8103392:	b2db      	uxtb	r3, r3
 8103394:	f003 0301 	and.w	r3, r3, #1
 8103398:	b2da      	uxtb	r2, r3
 810339a:	683b      	ldr	r3, [r7, #0]
 810339c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81033a4:	0a9b      	lsrs	r3, r3, #10
 81033a6:	b2db      	uxtb	r3, r3
 81033a8:	f003 0303 	and.w	r3, r3, #3
 81033ac:	b2da      	uxtb	r2, r3
 81033ae:	683b      	ldr	r3, [r7, #0]
 81033b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81033b8:	0a1b      	lsrs	r3, r3, #8
 81033ba:	b2db      	uxtb	r3, r3
 81033bc:	f003 0303 	and.w	r3, r3, #3
 81033c0:	b2da      	uxtb	r2, r3
 81033c2:	683b      	ldr	r3, [r7, #0]
 81033c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 81033c8:	687b      	ldr	r3, [r7, #4]
 81033ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81033cc:	085b      	lsrs	r3, r3, #1
 81033ce:	b2db      	uxtb	r3, r3
 81033d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81033d4:	b2da      	uxtb	r2, r3
 81033d6:	683b      	ldr	r3, [r7, #0]
 81033d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 81033dc:	683b      	ldr	r3, [r7, #0]
 81033de:	2201      	movs	r2, #1
 81033e0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 81033e4:	2300      	movs	r3, #0
}
 81033e6:	4618      	mov	r0, r3
 81033e8:	3710      	adds	r7, #16
 81033ea:	46bd      	mov	sp, r7
 81033ec:	bd80      	pop	{r7, pc}
 81033ee:	bf00      	nop
 81033f0:	1fe00fff 	.word	0x1fe00fff

081033f4 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 81033f4:	b5b0      	push	{r4, r5, r7, lr}
 81033f6:	b09a      	sub	sp, #104	; 0x68
 81033f8:	af04      	add	r7, sp, #16
 81033fa:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 1U;
 81033fc:	2301      	movs	r3, #1
 81033fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  MMC_InitTypeDef Init;

  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	681b      	ldr	r3, [r3, #0]
 8103404:	4618      	mov	r0, r3
 8103406:	f003 f947 	bl	8106698 <SDMMC_GetPowerState>
 810340a:	4603      	mov	r3, r0
 810340c:	2b00      	cmp	r3, #0
 810340e:	d102      	bne.n	8103416 <MMC_InitCard+0x22>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8103410:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8103414:	e0cc      	b.n	81035b0 <MMC_InitCard+0x1bc>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	4618      	mov	r0, r3
 810341c:	f003 fa25 	bl	810686a <SDMMC_CmdSendCID>
 8103420:	6578      	str	r0, [r7, #84]	; 0x54
  if(errorstate != HAL_MMC_ERROR_NONE)
 8103422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103424:	2b00      	cmp	r3, #0
 8103426:	d001      	beq.n	810342c <MMC_InitCard+0x38>
  {
    return errorstate;
 8103428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810342a:	e0c1      	b.n	81035b0 <MMC_InitCard+0x1bc>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	2100      	movs	r1, #0
 8103432:	4618      	mov	r0, r3
 8103434:	f003 f975 	bl	8106722 <SDMMC_GetResponse>
 8103438:	4602      	mov	r2, r0
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	681b      	ldr	r3, [r3, #0]
 8103442:	2104      	movs	r1, #4
 8103444:	4618      	mov	r0, r3
 8103446:	f003 f96c 	bl	8106722 <SDMMC_GetResponse>
 810344a:	4602      	mov	r2, r0
 810344c:	687b      	ldr	r3, [r7, #4]
 810344e:	66da      	str	r2, [r3, #108]	; 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	2108      	movs	r1, #8
 8103456:	4618      	mov	r0, r3
 8103458:	f003 f963 	bl	8106722 <SDMMC_GetResponse>
 810345c:	4602      	mov	r2, r0
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	681b      	ldr	r3, [r3, #0]
 8103466:	210c      	movs	r1, #12
 8103468:	4618      	mov	r0, r3
 810346a:	f003 f95a 	bl	8106722 <SDMMC_GetResponse>
 810346e:	4602      	mov	r2, r0
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 8103474:	687b      	ldr	r3, [r7, #4]
 8103476:	681b      	ldr	r3, [r3, #0]
 8103478:	f107 0226 	add.w	r2, r7, #38	; 0x26
 810347c:	4611      	mov	r1, r2
 810347e:	4618      	mov	r0, r3
 8103480:	f003 fa32 	bl	81068e8 <SDMMC_CmdSetRelAdd>
 8103484:	6578      	str	r0, [r7, #84]	; 0x54
  if(errorstate != HAL_MMC_ERROR_NONE)
 8103486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103488:	2b00      	cmp	r3, #0
 810348a:	d001      	beq.n	8103490 <MMC_InitCard+0x9c>
  {
    return errorstate;
 810348c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810348e:	e08f      	b.n	81035b0 <MMC_InitCard+0x1bc>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8103490:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8103492:	461a      	mov	r2, r3
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	645a      	str	r2, [r3, #68]	; 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	681a      	ldr	r2, [r3, #0]
 810349c:	687b      	ldr	r3, [r7, #4]
 810349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81034a0:	041b      	lsls	r3, r3, #16
 81034a2:	4619      	mov	r1, r3
 81034a4:	4610      	mov	r0, r2
 81034a6:	f003 f9ff 	bl	81068a8 <SDMMC_CmdSendCSD>
 81034aa:	6578      	str	r0, [r7, #84]	; 0x54
  if(errorstate != HAL_MMC_ERROR_NONE)
 81034ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81034ae:	2b00      	cmp	r3, #0
 81034b0:	d001      	beq.n	81034b6 <MMC_InitCard+0xc2>
  {
    return errorstate;
 81034b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81034b4:	e07c      	b.n	81035b0 <MMC_InitCard+0x1bc>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	681b      	ldr	r3, [r3, #0]
 81034ba:	2100      	movs	r1, #0
 81034bc:	4618      	mov	r0, r3
 81034be:	f003 f930 	bl	8106722 <SDMMC_GetResponse>
 81034c2:	4602      	mov	r2, r0
 81034c4:	687b      	ldr	r3, [r7, #4]
 81034c6:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	681b      	ldr	r3, [r3, #0]
 81034cc:	2104      	movs	r1, #4
 81034ce:	4618      	mov	r0, r3
 81034d0:	f003 f927 	bl	8106722 <SDMMC_GetResponse>
 81034d4:	4602      	mov	r2, r0
 81034d6:	687b      	ldr	r3, [r7, #4]
 81034d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	681b      	ldr	r3, [r3, #0]
 81034de:	2108      	movs	r1, #8
 81034e0:	4618      	mov	r0, r3
 81034e2:	f003 f91e 	bl	8106722 <SDMMC_GetResponse>
 81034e6:	4602      	mov	r2, r0
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	681b      	ldr	r3, [r3, #0]
 81034f0:	210c      	movs	r1, #12
 81034f2:	4618      	mov	r0, r3
 81034f4:	f003 f915 	bl	8106722 <SDMMC_GetResponse>
 81034f8:	4602      	mov	r2, r0
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	681b      	ldr	r3, [r3, #0]
 8103502:	2104      	movs	r1, #4
 8103504:	4618      	mov	r0, r3
 8103506:	f003 f90c 	bl	8106722 <SDMMC_GetResponse>
 810350a:	4603      	mov	r3, r0
 810350c:	0d1a      	lsrs	r2, r3, #20
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	641a      	str	r2, [r3, #64]	; 0x40

   /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	6819      	ldr	r1, [r3, #0]
 8103516:	687b      	ldr	r3, [r7, #4]
 8103518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810351a:	041b      	lsls	r3, r3, #16
 810351c:	f04f 0400 	mov.w	r4, #0
 8103520:	461a      	mov	r2, r3
 8103522:	4623      	mov	r3, r4
 8103524:	4608      	mov	r0, r1
 8103526:	f003 f95e 	bl	81067e6 <SDMMC_CmdSelDesel>
 810352a:	6578      	str	r0, [r7, #84]	; 0x54
  if(errorstate != HAL_MMC_ERROR_NONE)
 810352c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810352e:	2b00      	cmp	r3, #0
 8103530:	d001      	beq.n	8103536 <MMC_InitCard+0x142>
  {
    return errorstate;
 8103532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103534:	e03c      	b.n	81035b0 <MMC_InitCard+0x1bc>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8103536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810353a:	4619      	mov	r1, r3
 810353c:	6878      	ldr	r0, [r7, #4]
 810353e:	f7ff fdb5 	bl	81030ac <HAL_MMC_GetCardCSD>
 8103542:	4603      	mov	r3, r0
 8103544:	2b00      	cmp	r3, #0
 8103546:	d002      	beq.n	810354e <MMC_InitCard+0x15a>
  {
    return hmmc->ErrorCode;
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810354c:	e030      	b.n	81035b0 <MMC_InitCard+0x1bc>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	681a      	ldr	r2, [r3, #0]
 8103552:	687b      	ldr	r3, [r7, #4]
 8103554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103556:	041b      	lsls	r3, r3, #16
 8103558:	4619      	mov	r1, r3
 810355a:	4610      	mov	r0, r2
 810355c:	f003 f9e6 	bl	810692c <SDMMC_CmdSendStatus>
 8103560:	6578      	str	r0, [r7, #84]	; 0x54
  if(errorstate != HAL_MMC_ERROR_NONE)
 8103562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103564:	2b00      	cmp	r3, #0
 8103566:	d005      	beq.n	8103574 <MMC_InitCard+0x180>
  {
    hmmc->ErrorCode |= errorstate;
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810356c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810356e:	431a      	orrs	r2, r3
 8103570:	687b      	ldr	r3, [r7, #4]
 8103572:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Configure the SDMMC peripheral */
  Init.ClockEdge           = hmmc->Init.ClockEdge;
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	685b      	ldr	r3, [r3, #4]
 8103578:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = hmmc->Init.ClockPowerSave;
 810357a:	687b      	ldr	r3, [r7, #4]
 810357c:	689b      	ldr	r3, [r3, #8]
 810357e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8103580:	2300      	movs	r3, #0
 8103582:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = hmmc->Init.HardwareFlowControl;
 8103584:	687b      	ldr	r3, [r7, #4]
 8103586:	691b      	ldr	r3, [r3, #16]
 8103588:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = hmmc->Init.ClockDiv;
 810358a:	687b      	ldr	r3, [r7, #4]
 810358c:	695b      	ldr	r3, [r3, #20]
 810358e:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	681d      	ldr	r5, [r3, #0]
 8103594:	466c      	mov	r4, sp
 8103596:	f107 0318 	add.w	r3, r7, #24
 810359a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810359e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81035a2:	f107 030c 	add.w	r3, r7, #12
 81035a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 81035a8:	4628      	mov	r0, r5
 81035aa:	f003 f82d 	bl	8106608 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 81035ae:	2300      	movs	r3, #0
}
 81035b0:	4618      	mov	r0, r3
 81035b2:	3758      	adds	r7, #88	; 0x58
 81035b4:	46bd      	mov	sp, r7
 81035b6:	bdb0      	pop	{r4, r5, r7, pc}

081035b8 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 81035b8:	b580      	push	{r7, lr}
 81035ba:	b086      	sub	sp, #24
 81035bc:	af00      	add	r7, sp, #0
 81035be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81035c0:	2300      	movs	r3, #0
 81035c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 81035c4:	2300      	movs	r3, #0
 81035c6:	617b      	str	r3, [r7, #20]
 81035c8:	2300      	movs	r3, #0
 81035ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	681b      	ldr	r3, [r3, #0]
 81035d0:	4618      	mov	r0, r3
 81035d2:	f003 f92c 	bl	810682e <SDMMC_CmdGoIdleState>
 81035d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 81035d8:	68fb      	ldr	r3, [r7, #12]
 81035da:	2b00      	cmp	r3, #0
 81035dc:	d027      	beq.n	810362e <MMC_PowerON+0x76>
  {
    return errorstate;
 81035de:	68fb      	ldr	r3, [r7, #12]
 81035e0:	e034      	b.n	810364c <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 81035e2:	68bb      	ldr	r3, [r7, #8]
 81035e4:	1c5a      	adds	r2, r3, #1
 81035e6:	60ba      	str	r2, [r7, #8]
 81035e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81035ec:	4293      	cmp	r3, r2
 81035ee:	d102      	bne.n	81035f6 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 81035f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81035f4:	e02a      	b.n	810364c <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	4916      	ldr	r1, [pc, #88]	; (8103654 <MMC_PowerON+0x9c>)
 81035fc:	4618      	mov	r0, r3
 81035fe:	f003 f9b8 	bl	8106972 <SDMMC_CmdOpCondition>
 8103602:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8103604:	68fb      	ldr	r3, [r7, #12]
 8103606:	2b00      	cmp	r3, #0
 8103608:	d002      	beq.n	8103610 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 810360a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810360e:	e01d      	b.n	810364c <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103610:	687b      	ldr	r3, [r7, #4]
 8103612:	681b      	ldr	r3, [r3, #0]
 8103614:	2100      	movs	r1, #0
 8103616:	4618      	mov	r0, r3
 8103618:	f003 f883 	bl	8106722 <SDMMC_GetResponse>
 810361c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 810361e:	697b      	ldr	r3, [r7, #20]
 8103620:	0fdb      	lsrs	r3, r3, #31
 8103622:	2b01      	cmp	r3, #1
 8103624:	d101      	bne.n	810362a <MMC_PowerON+0x72>
 8103626:	2301      	movs	r3, #1
 8103628:	e000      	b.n	810362c <MMC_PowerON+0x74>
 810362a:	2300      	movs	r3, #0
 810362c:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 810362e:	693b      	ldr	r3, [r7, #16]
 8103630:	2b00      	cmp	r3, #0
 8103632:	d0d6      	beq.n	81035e2 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8103634:	697b      	ldr	r3, [r7, #20]
 8103636:	0e1b      	lsrs	r3, r3, #24
 8103638:	2bc0      	cmp	r3, #192	; 0xc0
 810363a:	d103      	bne.n	8103644 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	2201      	movs	r2, #1
 8103640:	63da      	str	r2, [r3, #60]	; 0x3c
 8103642:	e002      	b.n	810364a <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	2200      	movs	r2, #0
 8103648:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 810364a:	2300      	movs	r3, #0
}
 810364c:	4618      	mov	r0, r3
 810364e:	3718      	adds	r7, #24
 8103650:	46bd      	mov	sp, r7
 8103652:	bd80      	pop	{r7, pc}
 8103654:	c0ff8000 	.word	0xc0ff8000

08103658 <MMC_ReadExtCSD>:
  * @param  FieldIndex: Index of the field to be read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData, uint16_t FieldIndex, uint32_t Timeout)
{
 8103658:	b580      	push	{r7, lr}
 810365a:	b090      	sub	sp, #64	; 0x40
 810365c:	af00      	add	r7, sp, #0
 810365e:	60f8      	str	r0, [r7, #12]
 8103660:	60b9      	str	r1, [r7, #8]
 8103662:	603b      	str	r3, [r7, #0]
 8103664:	4613      	mov	r3, r2
 8103666:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8103668:	f7fe f99e 	bl	81019a8 <HAL_GetTick>
 810366c:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 810366e:	2300      	movs	r3, #0
 8103670:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8103672:	68fb      	ldr	r3, [r7, #12]
 8103674:	2200      	movs	r2, #0
 8103676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8103678:	68fb      	ldr	r3, [r7, #12]
 810367a:	681b      	ldr	r3, [r3, #0]
 810367c:	2200      	movs	r2, #0
 810367e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8103680:	f04f 33ff 	mov.w	r3, #4294967295
 8103684:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512;
 8103686:	f44f 7300 	mov.w	r3, #512	; 0x200
 810368a:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 810368c:	2390      	movs	r3, #144	; 0x90
 810368e:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8103690:	2302      	movs	r3, #2
 8103692:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8103694:	2300      	movs	r3, #0
 8103696:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8103698:	2301      	movs	r3, #1
 810369a:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 810369c:	68fb      	ldr	r3, [r7, #12]
 810369e:	681b      	ldr	r3, [r3, #0]
 81036a0:	f107 0214 	add.w	r2, r7, #20
 81036a4:	4611      	mov	r1, r2
 81036a6:	4618      	mov	r0, r3
 81036a8:	f003 f84e 	bl	8106748 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 81036ac:	68fb      	ldr	r3, [r7, #12]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	2100      	movs	r1, #0
 81036b2:	4618      	mov	r0, r3
 81036b4:	f003 f97d 	bl	81069b2 <SDMMC_CmdSendEXTCSD>
 81036b8:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 81036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81036bc:	2b00      	cmp	r3, #0
 81036be:	d04e      	beq.n	810375e <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81036c0:	68fb      	ldr	r3, [r7, #12]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	4a39      	ldr	r2, [pc, #228]	; (81037ac <MMC_ReadExtCSD+0x154>)
 81036c6:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 81036c8:	68fb      	ldr	r3, [r7, #12]
 81036ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81036ce:	431a      	orrs	r2, r3
 81036d0:	68fb      	ldr	r3, [r7, #12]
 81036d2:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 81036d4:	68fb      	ldr	r3, [r7, #12]
 81036d6:	2201      	movs	r2, #1
 81036d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 81036dc:	2301      	movs	r3, #1
 81036de:	e061      	b.n	81037a4 <MMC_ReadExtCSD+0x14c>
  }

  /* Poll on SDMMC flags */
  while(!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 81036e0:	68fb      	ldr	r3, [r7, #12]
 81036e2:	681b      	ldr	r3, [r3, #0]
 81036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81036e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81036ea:	2b00      	cmp	r3, #0
 81036ec:	d01c      	beq.n	8103728 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for(count = 0U; count < 8U; count++)
 81036ee:	2300      	movs	r3, #0
 81036f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81036f2:	e013      	b.n	810371c <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 81036f4:	68fb      	ldr	r3, [r7, #12]
 81036f6:	681b      	ldr	r3, [r3, #0]
 81036f8:	4618      	mov	r0, r3
 81036fa:	f002 ffaf 	bl	810665c <SDMMC_ReadFIFO>
 81036fe:	62f8      	str	r0, [r7, #44]	; 0x2c
		/* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
		/*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex/4U))
 8103700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8103702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103704:	4413      	add	r3, r2
 8103706:	88fa      	ldrh	r2, [r7, #6]
 8103708:	0892      	lsrs	r2, r2, #2
 810370a:	b292      	uxth	r2, r2
 810370c:	4293      	cmp	r3, r2
 810370e:	d102      	bne.n	8103716 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8103710:	68bb      	ldr	r3, [r7, #8]
 8103712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103714:	601a      	str	r2, [r3, #0]
      for(count = 0U; count < 8U; count++)
 8103716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103718:	3301      	adds	r3, #1
 810371a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810371c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810371e:	2b07      	cmp	r3, #7
 8103720:	d9e8      	bls.n	81036f4 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8103722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103724:	3308      	adds	r3, #8
 8103726:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8103728:	f7fe f93e 	bl	81019a8 <HAL_GetTick>
 810372c:	4602      	mov	r2, r0
 810372e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103730:	1ad3      	subs	r3, r2, r3
 8103732:	683a      	ldr	r2, [r7, #0]
 8103734:	429a      	cmp	r2, r3
 8103736:	d902      	bls.n	810373e <MMC_ReadExtCSD+0xe6>
 8103738:	683b      	ldr	r3, [r7, #0]
 810373a:	2b00      	cmp	r3, #0
 810373c:	d10f      	bne.n	810375e <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810373e:	68fb      	ldr	r3, [r7, #12]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	4a1a      	ldr	r2, [pc, #104]	; (81037ac <MMC_ReadExtCSD+0x154>)
 8103744:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8103746:	68fb      	ldr	r3, [r7, #12]
 8103748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810374a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 810374e:	68fb      	ldr	r3, [r7, #12]
 8103750:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State= HAL_MMC_STATE_READY;
 8103752:	68fb      	ldr	r3, [r7, #12]
 8103754:	2201      	movs	r2, #1
 8103756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 810375a:	2303      	movs	r3, #3
 810375c:	e022      	b.n	81037a4 <MMC_ReadExtCSD+0x14c>
  while(!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 810375e:	68fb      	ldr	r3, [r7, #12]
 8103760:	681b      	ldr	r3, [r3, #0]
 8103762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103764:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8103768:	2b00      	cmp	r3, #0
 810376a:	d0b9      	beq.n	81036e0 <MMC_ReadExtCSD+0x88>
    }
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 810376c:	68fb      	ldr	r3, [r7, #12]
 810376e:	681a      	ldr	r2, [r3, #0]
 8103770:	68fb      	ldr	r3, [r7, #12]
 8103772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103774:	041b      	lsls	r3, r3, #16
 8103776:	4619      	mov	r1, r3
 8103778:	4610      	mov	r0, r2
 810377a:	f003 f8d7 	bl	810692c <SDMMC_CmdSendStatus>
 810377e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 8103780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103782:	2b00      	cmp	r3, #0
 8103784:	d005      	beq.n	8103792 <MMC_ReadExtCSD+0x13a>
  {
    hmmc->ErrorCode |= errorstate;
 8103786:	68fb      	ldr	r3, [r7, #12]
 8103788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810378c:	431a      	orrs	r2, r3
 810378e:	68fb      	ldr	r3, [r7, #12]
 8103790:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8103792:	68fb      	ldr	r3, [r7, #12]
 8103794:	681b      	ldr	r3, [r3, #0]
 8103796:	4a06      	ldr	r2, [pc, #24]	; (81037b0 <MMC_ReadExtCSD+0x158>)
 8103798:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 810379a:	68fb      	ldr	r3, [r7, #12]
 810379c:	2201      	movs	r2, #1
 810379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 81037a2:	2300      	movs	r3, #0
}
 81037a4:	4618      	mov	r0, r3
 81037a6:	3740      	adds	r7, #64	; 0x40
 81037a8:	46bd      	mov	sp, r7
 81037aa:	bd80      	pop	{r7, pc}
 81037ac:	1fe00fff 	.word	0x1fe00fff
 81037b0:	18000f3a 	.word	0x18000f3a

081037b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81037b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 81037b6:	b08f      	sub	sp, #60	; 0x3c
 81037b8:	af0a      	add	r7, sp, #40	; 0x28
 81037ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	2b00      	cmp	r3, #0
 81037c0:	d101      	bne.n	81037c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 81037c2:	2301      	movs	r3, #1
 81037c4:	e116      	b.n	81039f4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 81037d2:	b2db      	uxtb	r3, r3
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	d106      	bne.n	81037e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	2200      	movs	r2, #0
 81037dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 81037e0:	6878      	ldr	r0, [r7, #4]
 81037e2:	f7fd fe8d 	bl	8101500 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	2203      	movs	r2, #3
 81037ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 81037ee:	68bb      	ldr	r3, [r7, #8]
 81037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81037f6:	2b00      	cmp	r3, #0
 81037f8:	d102      	bne.n	8103800 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	2200      	movs	r2, #0
 81037fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8103800:	687b      	ldr	r3, [r7, #4]
 8103802:	681b      	ldr	r3, [r3, #0]
 8103804:	4618      	mov	r0, r3
 8103806:	f003 fb7a 	bl	8106efe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	681b      	ldr	r3, [r3, #0]
 810380e:	603b      	str	r3, [r7, #0]
 8103810:	687e      	ldr	r6, [r7, #4]
 8103812:	466d      	mov	r5, sp
 8103814:	f106 0410 	add.w	r4, r6, #16
 8103818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810381a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810381c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810381e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8103820:	e894 0003 	ldmia.w	r4, {r0, r1}
 8103824:	e885 0003 	stmia.w	r5, {r0, r1}
 8103828:	1d33      	adds	r3, r6, #4
 810382a:	cb0e      	ldmia	r3, {r1, r2, r3}
 810382c:	6838      	ldr	r0, [r7, #0]
 810382e:	f003 fb05 	bl	8106e3c <USB_CoreInit>
 8103832:	4603      	mov	r3, r0
 8103834:	2b00      	cmp	r3, #0
 8103836:	d005      	beq.n	8103844 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	2202      	movs	r2, #2
 810383c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8103840:	2301      	movs	r3, #1
 8103842:	e0d7      	b.n	81039f4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	681b      	ldr	r3, [r3, #0]
 8103848:	2100      	movs	r1, #0
 810384a:	4618      	mov	r0, r3
 810384c:	f003 fb68 	bl	8106f20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8103850:	2300      	movs	r3, #0
 8103852:	73fb      	strb	r3, [r7, #15]
 8103854:	e04a      	b.n	81038ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8103856:	7bfa      	ldrb	r2, [r7, #15]
 8103858:	6879      	ldr	r1, [r7, #4]
 810385a:	4613      	mov	r3, r2
 810385c:	00db      	lsls	r3, r3, #3
 810385e:	1a9b      	subs	r3, r3, r2
 8103860:	009b      	lsls	r3, r3, #2
 8103862:	440b      	add	r3, r1
 8103864:	333d      	adds	r3, #61	; 0x3d
 8103866:	2201      	movs	r2, #1
 8103868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 810386a:	7bfa      	ldrb	r2, [r7, #15]
 810386c:	6879      	ldr	r1, [r7, #4]
 810386e:	4613      	mov	r3, r2
 8103870:	00db      	lsls	r3, r3, #3
 8103872:	1a9b      	subs	r3, r3, r2
 8103874:	009b      	lsls	r3, r3, #2
 8103876:	440b      	add	r3, r1
 8103878:	333c      	adds	r3, #60	; 0x3c
 810387a:	7bfa      	ldrb	r2, [r7, #15]
 810387c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 810387e:	7bfa      	ldrb	r2, [r7, #15]
 8103880:	7bfb      	ldrb	r3, [r7, #15]
 8103882:	b298      	uxth	r0, r3
 8103884:	6879      	ldr	r1, [r7, #4]
 8103886:	4613      	mov	r3, r2
 8103888:	00db      	lsls	r3, r3, #3
 810388a:	1a9b      	subs	r3, r3, r2
 810388c:	009b      	lsls	r3, r3, #2
 810388e:	440b      	add	r3, r1
 8103890:	3342      	adds	r3, #66	; 0x42
 8103892:	4602      	mov	r2, r0
 8103894:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8103896:	7bfa      	ldrb	r2, [r7, #15]
 8103898:	6879      	ldr	r1, [r7, #4]
 810389a:	4613      	mov	r3, r2
 810389c:	00db      	lsls	r3, r3, #3
 810389e:	1a9b      	subs	r3, r3, r2
 81038a0:	009b      	lsls	r3, r3, #2
 81038a2:	440b      	add	r3, r1
 81038a4:	333f      	adds	r3, #63	; 0x3f
 81038a6:	2200      	movs	r2, #0
 81038a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81038aa:	7bfa      	ldrb	r2, [r7, #15]
 81038ac:	6879      	ldr	r1, [r7, #4]
 81038ae:	4613      	mov	r3, r2
 81038b0:	00db      	lsls	r3, r3, #3
 81038b2:	1a9b      	subs	r3, r3, r2
 81038b4:	009b      	lsls	r3, r3, #2
 81038b6:	440b      	add	r3, r1
 81038b8:	3344      	adds	r3, #68	; 0x44
 81038ba:	2200      	movs	r2, #0
 81038bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81038be:	7bfa      	ldrb	r2, [r7, #15]
 81038c0:	6879      	ldr	r1, [r7, #4]
 81038c2:	4613      	mov	r3, r2
 81038c4:	00db      	lsls	r3, r3, #3
 81038c6:	1a9b      	subs	r3, r3, r2
 81038c8:	009b      	lsls	r3, r3, #2
 81038ca:	440b      	add	r3, r1
 81038cc:	3348      	adds	r3, #72	; 0x48
 81038ce:	2200      	movs	r2, #0
 81038d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 81038d2:	7bfa      	ldrb	r2, [r7, #15]
 81038d4:	6879      	ldr	r1, [r7, #4]
 81038d6:	4613      	mov	r3, r2
 81038d8:	00db      	lsls	r3, r3, #3
 81038da:	1a9b      	subs	r3, r3, r2
 81038dc:	009b      	lsls	r3, r3, #2
 81038de:	440b      	add	r3, r1
 81038e0:	3350      	adds	r3, #80	; 0x50
 81038e2:	2200      	movs	r2, #0
 81038e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81038e6:	7bfb      	ldrb	r3, [r7, #15]
 81038e8:	3301      	adds	r3, #1
 81038ea:	73fb      	strb	r3, [r7, #15]
 81038ec:	7bfa      	ldrb	r2, [r7, #15]
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	685b      	ldr	r3, [r3, #4]
 81038f2:	429a      	cmp	r2, r3
 81038f4:	d3af      	bcc.n	8103856 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81038f6:	2300      	movs	r3, #0
 81038f8:	73fb      	strb	r3, [r7, #15]
 81038fa:	e044      	b.n	8103986 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 81038fc:	7bfa      	ldrb	r2, [r7, #15]
 81038fe:	6879      	ldr	r1, [r7, #4]
 8103900:	4613      	mov	r3, r2
 8103902:	00db      	lsls	r3, r3, #3
 8103904:	1a9b      	subs	r3, r3, r2
 8103906:	009b      	lsls	r3, r3, #2
 8103908:	440b      	add	r3, r1
 810390a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 810390e:	2200      	movs	r2, #0
 8103910:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8103912:	7bfa      	ldrb	r2, [r7, #15]
 8103914:	6879      	ldr	r1, [r7, #4]
 8103916:	4613      	mov	r3, r2
 8103918:	00db      	lsls	r3, r3, #3
 810391a:	1a9b      	subs	r3, r3, r2
 810391c:	009b      	lsls	r3, r3, #2
 810391e:	440b      	add	r3, r1
 8103920:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8103924:	7bfa      	ldrb	r2, [r7, #15]
 8103926:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8103928:	7bfa      	ldrb	r2, [r7, #15]
 810392a:	6879      	ldr	r1, [r7, #4]
 810392c:	4613      	mov	r3, r2
 810392e:	00db      	lsls	r3, r3, #3
 8103930:	1a9b      	subs	r3, r3, r2
 8103932:	009b      	lsls	r3, r3, #2
 8103934:	440b      	add	r3, r1
 8103936:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 810393a:	2200      	movs	r2, #0
 810393c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 810393e:	7bfa      	ldrb	r2, [r7, #15]
 8103940:	6879      	ldr	r1, [r7, #4]
 8103942:	4613      	mov	r3, r2
 8103944:	00db      	lsls	r3, r3, #3
 8103946:	1a9b      	subs	r3, r3, r2
 8103948:	009b      	lsls	r3, r3, #2
 810394a:	440b      	add	r3, r1
 810394c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8103950:	2200      	movs	r2, #0
 8103952:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8103954:	7bfa      	ldrb	r2, [r7, #15]
 8103956:	6879      	ldr	r1, [r7, #4]
 8103958:	4613      	mov	r3, r2
 810395a:	00db      	lsls	r3, r3, #3
 810395c:	1a9b      	subs	r3, r3, r2
 810395e:	009b      	lsls	r3, r3, #2
 8103960:	440b      	add	r3, r1
 8103962:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8103966:	2200      	movs	r2, #0
 8103968:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 810396a:	7bfa      	ldrb	r2, [r7, #15]
 810396c:	6879      	ldr	r1, [r7, #4]
 810396e:	4613      	mov	r3, r2
 8103970:	00db      	lsls	r3, r3, #3
 8103972:	1a9b      	subs	r3, r3, r2
 8103974:	009b      	lsls	r3, r3, #2
 8103976:	440b      	add	r3, r1
 8103978:	f503 7304 	add.w	r3, r3, #528	; 0x210
 810397c:	2200      	movs	r2, #0
 810397e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8103980:	7bfb      	ldrb	r3, [r7, #15]
 8103982:	3301      	adds	r3, #1
 8103984:	73fb      	strb	r3, [r7, #15]
 8103986:	7bfa      	ldrb	r2, [r7, #15]
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	685b      	ldr	r3, [r3, #4]
 810398c:	429a      	cmp	r2, r3
 810398e:	d3b5      	bcc.n	81038fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	603b      	str	r3, [r7, #0]
 8103996:	687e      	ldr	r6, [r7, #4]
 8103998:	466d      	mov	r5, sp
 810399a:	f106 0410 	add.w	r4, r6, #16
 810399e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81039a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81039a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81039a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81039a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 81039aa:	e885 0003 	stmia.w	r5, {r0, r1}
 81039ae:	1d33      	adds	r3, r6, #4
 81039b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 81039b2:	6838      	ldr	r0, [r7, #0]
 81039b4:	f003 fade 	bl	8106f74 <USB_DevInit>
 81039b8:	4603      	mov	r3, r0
 81039ba:	2b00      	cmp	r3, #0
 81039bc:	d005      	beq.n	81039ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	2202      	movs	r2, #2
 81039c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 81039c6:	2301      	movs	r3, #1
 81039c8:	e014      	b.n	81039f4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	2200      	movs	r2, #0
 81039ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	2201      	movs	r2, #1
 81039d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039de:	2b01      	cmp	r3, #1
 81039e0:	d102      	bne.n	81039e8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 81039e2:	6878      	ldr	r0, [r7, #4]
 81039e4:	f000 f80a 	bl	81039fc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	4618      	mov	r0, r3
 81039ee:	f003 fc80 	bl	81072f2 <USB_DevDisconnect>

  return HAL_OK;
 81039f2:	2300      	movs	r3, #0
}
 81039f4:	4618      	mov	r0, r3
 81039f6:	3714      	adds	r7, #20
 81039f8:	46bd      	mov	sp, r7
 81039fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

081039fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 81039fc:	b480      	push	{r7}
 81039fe:	b085      	sub	sp, #20
 8103a00:	af00      	add	r7, sp, #0
 8103a02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	681b      	ldr	r3, [r3, #0]
 8103a08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8103a0a:	687b      	ldr	r3, [r7, #4]
 8103a0c:	2201      	movs	r2, #1
 8103a0e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	2200      	movs	r2, #0
 8103a16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8103a1a:	68fb      	ldr	r3, [r7, #12]
 8103a1c:	699b      	ldr	r3, [r3, #24]
 8103a1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8103a22:	68fb      	ldr	r3, [r7, #12]
 8103a24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8103a26:	68fb      	ldr	r3, [r7, #12]
 8103a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103a2e:	f043 0303 	orr.w	r3, r3, #3
 8103a32:	68fa      	ldr	r2, [r7, #12]
 8103a34:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8103a36:	2300      	movs	r3, #0
}
 8103a38:	4618      	mov	r0, r3
 8103a3a:	3714      	adds	r7, #20
 8103a3c:	46bd      	mov	sp, r7
 8103a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a42:	4770      	bx	lr

08103a44 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103a44:	b580      	push	{r7, lr}
 8103a46:	b084      	sub	sp, #16
 8103a48:	af00      	add	r7, sp, #0
 8103a4a:	60f8      	str	r0, [r7, #12]
 8103a4c:	460b      	mov	r3, r1
 8103a4e:	607a      	str	r2, [r7, #4]
 8103a50:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103a52:	4b35      	ldr	r3, [pc, #212]	; (8103b28 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8103a54:	681b      	ldr	r3, [r3, #0]
 8103a56:	f023 0201 	bic.w	r2, r3, #1
 8103a5a:	4933      	ldr	r1, [pc, #204]	; (8103b28 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8103a5c:	68fb      	ldr	r3, [r7, #12]
 8103a5e:	4313      	orrs	r3, r2
 8103a60:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	2b00      	cmp	r3, #0
 8103a66:	d121      	bne.n	8103aac <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103a68:	f7fe f8d0 	bl	8101c0c <HAL_GetCurrentCPUID>
 8103a6c:	4603      	mov	r3, r0
 8103a6e:	2b03      	cmp	r3, #3
 8103a70:	d154      	bne.n	8103b1c <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103a72:	4b2d      	ldr	r3, [pc, #180]	; (8103b28 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8103a74:	691b      	ldr	r3, [r3, #16]
 8103a76:	4a2c      	ldr	r2, [pc, #176]	; (8103b28 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8103a78:	f023 0301 	bic.w	r3, r3, #1
 8103a7c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103a7e:	4b2b      	ldr	r3, [pc, #172]	; (8103b2c <HAL_PWREx_EnterSTOPMode+0xe8>)
 8103a80:	691b      	ldr	r3, [r3, #16]
 8103a82:	4a2a      	ldr	r2, [pc, #168]	; (8103b2c <HAL_PWREx_EnterSTOPMode+0xe8>)
 8103a84:	f043 0304 	orr.w	r3, r3, #4
 8103a88:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8103a8e:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103a92:	7afb      	ldrb	r3, [r7, #11]
 8103a94:	2b01      	cmp	r3, #1
 8103a96:	d101      	bne.n	8103a9c <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103a98:	bf30      	wfi
 8103a9a:	e000      	b.n	8103a9e <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103a9c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103a9e:	4b23      	ldr	r3, [pc, #140]	; (8103b2c <HAL_PWREx_EnterSTOPMode+0xe8>)
 8103aa0:	691b      	ldr	r3, [r3, #16]
 8103aa2:	4a22      	ldr	r2, [pc, #136]	; (8103b2c <HAL_PWREx_EnterSTOPMode+0xe8>)
 8103aa4:	f023 0304 	bic.w	r3, r3, #4
 8103aa8:	6113      	str	r3, [r2, #16]
 8103aaa:	e03a      	b.n	8103b22 <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	2b01      	cmp	r3, #1
 8103ab0:	d121      	bne.n	8103af6 <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103ab2:	f7fe f8ab 	bl	8101c0c <HAL_GetCurrentCPUID>
 8103ab6:	4603      	mov	r3, r0
 8103ab8:	2b01      	cmp	r3, #1
 8103aba:	d131      	bne.n	8103b20 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103abc:	4b1a      	ldr	r3, [pc, #104]	; (8103b28 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8103abe:	695b      	ldr	r3, [r3, #20]
 8103ac0:	4a19      	ldr	r2, [pc, #100]	; (8103b28 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8103ac2:	f023 0302 	bic.w	r3, r3, #2
 8103ac6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103ac8:	4b18      	ldr	r3, [pc, #96]	; (8103b2c <HAL_PWREx_EnterSTOPMode+0xe8>)
 8103aca:	691b      	ldr	r3, [r3, #16]
 8103acc:	4a17      	ldr	r2, [pc, #92]	; (8103b2c <HAL_PWREx_EnterSTOPMode+0xe8>)
 8103ace:	f043 0304 	orr.w	r3, r3, #4
 8103ad2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103ad4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8103ad8:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103adc:	7afb      	ldrb	r3, [r7, #11]
 8103ade:	2b01      	cmp	r3, #1
 8103ae0:	d101      	bne.n	8103ae6 <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103ae2:	bf30      	wfi
 8103ae4:	e000      	b.n	8103ae8 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103ae6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103ae8:	4b10      	ldr	r3, [pc, #64]	; (8103b2c <HAL_PWREx_EnterSTOPMode+0xe8>)
 8103aea:	691b      	ldr	r3, [r3, #16]
 8103aec:	4a0f      	ldr	r2, [pc, #60]	; (8103b2c <HAL_PWREx_EnterSTOPMode+0xe8>)
 8103aee:	f023 0304 	bic.w	r3, r3, #4
 8103af2:	6113      	str	r3, [r2, #16]
 8103af4:	e015      	b.n	8103b22 <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103af6:	f7fe f889 	bl	8101c0c <HAL_GetCurrentCPUID>
 8103afa:	4603      	mov	r3, r0
 8103afc:	2b03      	cmp	r3, #3
 8103afe:	d106      	bne.n	8103b0e <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103b00:	4b09      	ldr	r3, [pc, #36]	; (8103b28 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8103b02:	691b      	ldr	r3, [r3, #16]
 8103b04:	4a08      	ldr	r2, [pc, #32]	; (8103b28 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8103b06:	f023 0304 	bic.w	r3, r3, #4
 8103b0a:	6113      	str	r3, [r2, #16]
 8103b0c:	e009      	b.n	8103b22 <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103b0e:	4b06      	ldr	r3, [pc, #24]	; (8103b28 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8103b10:	695b      	ldr	r3, [r3, #20]
 8103b12:	4a05      	ldr	r2, [pc, #20]	; (8103b28 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8103b14:	f023 0304 	bic.w	r3, r3, #4
 8103b18:	6153      	str	r3, [r2, #20]
 8103b1a:	e002      	b.n	8103b22 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8103b1c:	bf00      	nop
 8103b1e:	e000      	b.n	8103b22 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8103b20:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103b22:	3710      	adds	r7, #16
 8103b24:	46bd      	mov	sp, r7
 8103b26:	bd80      	pop	{r7, pc}
 8103b28:	58024800 	.word	0x58024800
 8103b2c:	e000ed00 	.word	0xe000ed00

08103b30 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103b30:	b580      	push	{r7, lr}
 8103b32:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103b34:	f7fe f86a 	bl	8101c0c <HAL_GetCurrentCPUID>
 8103b38:	4603      	mov	r3, r0
 8103b3a:	2b03      	cmp	r3, #3
 8103b3c:	d101      	bne.n	8103b42 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103b3e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103b40:	e001      	b.n	8103b46 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103b42:	bf40      	sev
    __WFE ();
 8103b44:	bf20      	wfe
}
 8103b46:	bf00      	nop
 8103b48:	bd80      	pop	{r7, pc}
	...

08103b4c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8103b4c:	b580      	push	{r7, lr}
 8103b4e:	b086      	sub	sp, #24
 8103b50:	af02      	add	r7, sp, #8
 8103b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8103b54:	f7fd ff28 	bl	81019a8 <HAL_GetTick>
 8103b58:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8103b5a:	687b      	ldr	r3, [r7, #4]
 8103b5c:	2b00      	cmp	r3, #0
 8103b5e:	d101      	bne.n	8103b64 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8103b60:	2301      	movs	r3, #1
 8103b62:	e061      	b.n	8103c28 <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103b6a:	b2db      	uxtb	r3, r3
 8103b6c:	2b00      	cmp	r3, #0
 8103b6e:	d107      	bne.n	8103b80 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8103b70:	6878      	ldr	r0, [r7, #4]
 8103b72:	f7fd fb4f 	bl	8101214 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8103b76:	f241 3188 	movw	r1, #5000	; 0x1388
 8103b7a:	6878      	ldr	r0, [r7, #4]
 8103b7c:	f000 f85a 	bl	8103c34 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	681b      	ldr	r3, [r3, #0]
 8103b86:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	689b      	ldr	r3, [r3, #8]
 8103b8e:	3b01      	subs	r3, #1
 8103b90:	021a      	lsls	r2, r3, #8
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	681b      	ldr	r3, [r3, #0]
 8103b96:	430a      	orrs	r2, r1
 8103b98:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8103b9a:	687b      	ldr	r3, [r7, #4]
 8103b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103b9e:	9300      	str	r3, [sp, #0]
 8103ba0:	68fb      	ldr	r3, [r7, #12]
 8103ba2:	2200      	movs	r2, #0
 8103ba4:	2120      	movs	r1, #32
 8103ba6:	6878      	ldr	r0, [r7, #4]
 8103ba8:	f000 f852 	bl	8103c50 <QSPI_WaitFlagStateUntilTimeout>
 8103bac:	4603      	mov	r3, r0
 8103bae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8103bb0:	7afb      	ldrb	r3, [r7, #11]
 8103bb2:	2b00      	cmp	r3, #0
 8103bb4:	d137      	bne.n	8103c26 <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	681b      	ldr	r3, [r3, #0]
 8103bba:	681b      	ldr	r3, [r3, #0]
 8103bbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103bc0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8103bc4:	687a      	ldr	r2, [r7, #4]
 8103bc6:	6852      	ldr	r2, [r2, #4]
 8103bc8:	0611      	lsls	r1, r2, #24
 8103bca:	687a      	ldr	r2, [r7, #4]
 8103bcc:	68d2      	ldr	r2, [r2, #12]
 8103bce:	4311      	orrs	r1, r2
 8103bd0:	687a      	ldr	r2, [r7, #4]
 8103bd2:	69d2      	ldr	r2, [r2, #28]
 8103bd4:	4311      	orrs	r1, r2
 8103bd6:	687a      	ldr	r2, [r7, #4]
 8103bd8:	6a12      	ldr	r2, [r2, #32]
 8103bda:	4311      	orrs	r1, r2
 8103bdc:	687a      	ldr	r2, [r7, #4]
 8103bde:	6812      	ldr	r2, [r2, #0]
 8103be0:	430b      	orrs	r3, r1
 8103be2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	685a      	ldr	r2, [r3, #4]
 8103bea:	4b11      	ldr	r3, [pc, #68]	; (8103c30 <HAL_QSPI_Init+0xe4>)
 8103bec:	4013      	ands	r3, r2
 8103bee:	687a      	ldr	r2, [r7, #4]
 8103bf0:	6912      	ldr	r2, [r2, #16]
 8103bf2:	0411      	lsls	r1, r2, #16
 8103bf4:	687a      	ldr	r2, [r7, #4]
 8103bf6:	6952      	ldr	r2, [r2, #20]
 8103bf8:	4311      	orrs	r1, r2
 8103bfa:	687a      	ldr	r2, [r7, #4]
 8103bfc:	6992      	ldr	r2, [r2, #24]
 8103bfe:	4311      	orrs	r1, r2
 8103c00:	687a      	ldr	r2, [r7, #4]
 8103c02:	6812      	ldr	r2, [r2, #0]
 8103c04:	430b      	orrs	r3, r1
 8103c06:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	681b      	ldr	r3, [r3, #0]
 8103c0c:	681a      	ldr	r2, [r3, #0]
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	f042 0201 	orr.w	r2, r2, #1
 8103c16:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	2200      	movs	r2, #0
 8103c1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	2201      	movs	r2, #1
 8103c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8103c26:	7afb      	ldrb	r3, [r7, #11]
}
 8103c28:	4618      	mov	r0, r3
 8103c2a:	3710      	adds	r7, #16
 8103c2c:	46bd      	mov	sp, r7
 8103c2e:	bd80      	pop	{r7, pc}
 8103c30:	ffe0f8fe 	.word	0xffe0f8fe

08103c34 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8103c34:	b480      	push	{r7}
 8103c36:	b083      	sub	sp, #12
 8103c38:	af00      	add	r7, sp, #0
 8103c3a:	6078      	str	r0, [r7, #4]
 8103c3c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	683a      	ldr	r2, [r7, #0]
 8103c42:	649a      	str	r2, [r3, #72]	; 0x48
}
 8103c44:	bf00      	nop
 8103c46:	370c      	adds	r7, #12
 8103c48:	46bd      	mov	sp, r7
 8103c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c4e:	4770      	bx	lr

08103c50 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8103c50:	b580      	push	{r7, lr}
 8103c52:	b084      	sub	sp, #16
 8103c54:	af00      	add	r7, sp, #0
 8103c56:	60f8      	str	r0, [r7, #12]
 8103c58:	60b9      	str	r1, [r7, #8]
 8103c5a:	603b      	str	r3, [r7, #0]
 8103c5c:	4613      	mov	r3, r2
 8103c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8103c60:	e01a      	b.n	8103c98 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103c62:	69bb      	ldr	r3, [r7, #24]
 8103c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103c68:	d016      	beq.n	8103c98 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103c6a:	f7fd fe9d 	bl	81019a8 <HAL_GetTick>
 8103c6e:	4602      	mov	r2, r0
 8103c70:	683b      	ldr	r3, [r7, #0]
 8103c72:	1ad3      	subs	r3, r2, r3
 8103c74:	69ba      	ldr	r2, [r7, #24]
 8103c76:	429a      	cmp	r2, r3
 8103c78:	d302      	bcc.n	8103c80 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8103c7a:	69bb      	ldr	r3, [r7, #24]
 8103c7c:	2b00      	cmp	r3, #0
 8103c7e:	d10b      	bne.n	8103c98 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8103c80:	68fb      	ldr	r3, [r7, #12]
 8103c82:	2204      	movs	r2, #4
 8103c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8103c88:	68fb      	ldr	r3, [r7, #12]
 8103c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103c8c:	f043 0201 	orr.w	r2, r3, #1
 8103c90:	68fb      	ldr	r3, [r7, #12]
 8103c92:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8103c94:	2301      	movs	r3, #1
 8103c96:	e00e      	b.n	8103cb6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8103c98:	68fb      	ldr	r3, [r7, #12]
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	689a      	ldr	r2, [r3, #8]
 8103c9e:	68bb      	ldr	r3, [r7, #8]
 8103ca0:	4013      	ands	r3, r2
 8103ca2:	2b00      	cmp	r3, #0
 8103ca4:	bf14      	ite	ne
 8103ca6:	2301      	movne	r3, #1
 8103ca8:	2300      	moveq	r3, #0
 8103caa:	b2db      	uxtb	r3, r3
 8103cac:	461a      	mov	r2, r3
 8103cae:	79fb      	ldrb	r3, [r7, #7]
 8103cb0:	429a      	cmp	r2, r3
 8103cb2:	d1d6      	bne.n	8103c62 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8103cb4:	2300      	movs	r3, #0
}
 8103cb6:	4618      	mov	r0, r3
 8103cb8:	3710      	adds	r7, #16
 8103cba:	46bd      	mov	sp, r7
 8103cbc:	bd80      	pop	{r7, pc}
	...

08103cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103cc0:	b480      	push	{r7}
 8103cc2:	b089      	sub	sp, #36	; 0x24
 8103cc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103cc6:	4baf      	ldr	r3, [pc, #700]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103cc8:	691b      	ldr	r3, [r3, #16]
 8103cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103cce:	2b18      	cmp	r3, #24
 8103cd0:	f200 814e 	bhi.w	8103f70 <HAL_RCC_GetSysClockFreq+0x2b0>
 8103cd4:	a201      	add	r2, pc, #4	; (adr r2, 8103cdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8103cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103cda:	bf00      	nop
 8103cdc:	08103d41 	.word	0x08103d41
 8103ce0:	08103f71 	.word	0x08103f71
 8103ce4:	08103f71 	.word	0x08103f71
 8103ce8:	08103f71 	.word	0x08103f71
 8103cec:	08103f71 	.word	0x08103f71
 8103cf0:	08103f71 	.word	0x08103f71
 8103cf4:	08103f71 	.word	0x08103f71
 8103cf8:	08103f71 	.word	0x08103f71
 8103cfc:	08103d67 	.word	0x08103d67
 8103d00:	08103f71 	.word	0x08103f71
 8103d04:	08103f71 	.word	0x08103f71
 8103d08:	08103f71 	.word	0x08103f71
 8103d0c:	08103f71 	.word	0x08103f71
 8103d10:	08103f71 	.word	0x08103f71
 8103d14:	08103f71 	.word	0x08103f71
 8103d18:	08103f71 	.word	0x08103f71
 8103d1c:	08103d6d 	.word	0x08103d6d
 8103d20:	08103f71 	.word	0x08103f71
 8103d24:	08103f71 	.word	0x08103f71
 8103d28:	08103f71 	.word	0x08103f71
 8103d2c:	08103f71 	.word	0x08103f71
 8103d30:	08103f71 	.word	0x08103f71
 8103d34:	08103f71 	.word	0x08103f71
 8103d38:	08103f71 	.word	0x08103f71
 8103d3c:	08103d73 	.word	0x08103d73
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103d40:	4b90      	ldr	r3, [pc, #576]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103d42:	681b      	ldr	r3, [r3, #0]
 8103d44:	f003 0320 	and.w	r3, r3, #32
 8103d48:	2b00      	cmp	r3, #0
 8103d4a:	d009      	beq.n	8103d60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103d4c:	4b8d      	ldr	r3, [pc, #564]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103d4e:	681b      	ldr	r3, [r3, #0]
 8103d50:	08db      	lsrs	r3, r3, #3
 8103d52:	f003 0303 	and.w	r3, r3, #3
 8103d56:	4a8c      	ldr	r2, [pc, #560]	; (8103f88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8103d58:	fa22 f303 	lsr.w	r3, r2, r3
 8103d5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103d5e:	e10a      	b.n	8103f76 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103d60:	4b89      	ldr	r3, [pc, #548]	; (8103f88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8103d62:	61bb      	str	r3, [r7, #24]
    break;
 8103d64:	e107      	b.n	8103f76 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8103d66:	4b89      	ldr	r3, [pc, #548]	; (8103f8c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8103d68:	61bb      	str	r3, [r7, #24]
    break;
 8103d6a:	e104      	b.n	8103f76 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103d6c:	4b88      	ldr	r3, [pc, #544]	; (8103f90 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8103d6e:	61bb      	str	r3, [r7, #24]
    break;
 8103d70:	e101      	b.n	8103f76 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103d72:	4b84      	ldr	r3, [pc, #528]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d76:	f003 0303 	and.w	r3, r3, #3
 8103d7a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103d7c:	4b81      	ldr	r3, [pc, #516]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d80:	091b      	lsrs	r3, r3, #4
 8103d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103d86:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103d88:	4b7e      	ldr	r3, [pc, #504]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d8c:	f003 0301 	and.w	r3, r3, #1
 8103d90:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103d92:	4b7c      	ldr	r3, [pc, #496]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103d96:	08db      	lsrs	r3, r3, #3
 8103d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103d9c:	68fa      	ldr	r2, [r7, #12]
 8103d9e:	fb02 f303 	mul.w	r3, r2, r3
 8103da2:	ee07 3a90 	vmov	s15, r3
 8103da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103daa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103dae:	693b      	ldr	r3, [r7, #16]
 8103db0:	2b00      	cmp	r3, #0
 8103db2:	f000 80da 	beq.w	8103f6a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8103db6:	697b      	ldr	r3, [r7, #20]
 8103db8:	2b01      	cmp	r3, #1
 8103dba:	d05a      	beq.n	8103e72 <HAL_RCC_GetSysClockFreq+0x1b2>
 8103dbc:	2b01      	cmp	r3, #1
 8103dbe:	d302      	bcc.n	8103dc6 <HAL_RCC_GetSysClockFreq+0x106>
 8103dc0:	2b02      	cmp	r3, #2
 8103dc2:	d078      	beq.n	8103eb6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8103dc4:	e099      	b.n	8103efa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103dc6:	4b6f      	ldr	r3, [pc, #444]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103dc8:	681b      	ldr	r3, [r3, #0]
 8103dca:	f003 0320 	and.w	r3, r3, #32
 8103dce:	2b00      	cmp	r3, #0
 8103dd0:	d02d      	beq.n	8103e2e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103dd2:	4b6c      	ldr	r3, [pc, #432]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	08db      	lsrs	r3, r3, #3
 8103dd8:	f003 0303 	and.w	r3, r3, #3
 8103ddc:	4a6a      	ldr	r2, [pc, #424]	; (8103f88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8103dde:	fa22 f303 	lsr.w	r3, r2, r3
 8103de2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103de4:	687b      	ldr	r3, [r7, #4]
 8103de6:	ee07 3a90 	vmov	s15, r3
 8103dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103dee:	693b      	ldr	r3, [r7, #16]
 8103df0:	ee07 3a90 	vmov	s15, r3
 8103df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103dfc:	4b61      	ldr	r3, [pc, #388]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e04:	ee07 3a90 	vmov	s15, r3
 8103e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e10:	eddf 5a60 	vldr	s11, [pc, #384]	; 8103f94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8103e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e28:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103e2c:	e087      	b.n	8103f3e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103e2e:	693b      	ldr	r3, [r7, #16]
 8103e30:	ee07 3a90 	vmov	s15, r3
 8103e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e38:	eddf 6a57 	vldr	s13, [pc, #348]	; 8103f98 <HAL_RCC_GetSysClockFreq+0x2d8>
 8103e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e40:	4b50      	ldr	r3, [pc, #320]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e48:	ee07 3a90 	vmov	s15, r3
 8103e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e50:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e54:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8103f94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8103e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103e70:	e065      	b.n	8103f3e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103e72:	693b      	ldr	r3, [r7, #16]
 8103e74:	ee07 3a90 	vmov	s15, r3
 8103e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e7c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8103f9c <HAL_RCC_GetSysClockFreq+0x2dc>
 8103e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e84:	4b3f      	ldr	r3, [pc, #252]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e8c:	ee07 3a90 	vmov	s15, r3
 8103e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e94:	ed97 6a02 	vldr	s12, [r7, #8]
 8103e98:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8103f94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8103e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103eb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103eb4:	e043      	b.n	8103f3e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103eb6:	693b      	ldr	r3, [r7, #16]
 8103eb8:	ee07 3a90 	vmov	s15, r3
 8103ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ec0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8103fa0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8103ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ec8:	4b2e      	ldr	r3, [pc, #184]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ed0:	ee07 3a90 	vmov	s15, r3
 8103ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ed8:	ed97 6a02 	vldr	s12, [r7, #8]
 8103edc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8103f94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8103ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ef4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103ef8:	e021      	b.n	8103f3e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103efa:	693b      	ldr	r3, [r7, #16]
 8103efc:	ee07 3a90 	vmov	s15, r3
 8103f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f04:	eddf 6a25 	vldr	s13, [pc, #148]	; 8103f9c <HAL_RCC_GetSysClockFreq+0x2dc>
 8103f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f0c:	4b1d      	ldr	r3, [pc, #116]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f14:	ee07 3a90 	vmov	s15, r3
 8103f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8103f20:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8103f94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8103f24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103f3c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103f3e:	4b11      	ldr	r3, [pc, #68]	; (8103f84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103f42:	0a5b      	lsrs	r3, r3, #9
 8103f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103f48:	3301      	adds	r3, #1
 8103f4a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103f4c:	683b      	ldr	r3, [r7, #0]
 8103f4e:	ee07 3a90 	vmov	s15, r3
 8103f52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8103f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103f62:	ee17 3a90 	vmov	r3, s15
 8103f66:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103f68:	e005      	b.n	8103f76 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8103f6a:	2300      	movs	r3, #0
 8103f6c:	61bb      	str	r3, [r7, #24]
    break;
 8103f6e:	e002      	b.n	8103f76 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8103f70:	4b06      	ldr	r3, [pc, #24]	; (8103f8c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8103f72:	61bb      	str	r3, [r7, #24]
    break;
 8103f74:	bf00      	nop
  }

  return sysclockfreq;
 8103f76:	69bb      	ldr	r3, [r7, #24]
}
 8103f78:	4618      	mov	r0, r3
 8103f7a:	3724      	adds	r7, #36	; 0x24
 8103f7c:	46bd      	mov	sp, r7
 8103f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f82:	4770      	bx	lr
 8103f84:	58024400 	.word	0x58024400
 8103f88:	03d09000 	.word	0x03d09000
 8103f8c:	003d0900 	.word	0x003d0900
 8103f90:	017d7840 	.word	0x017d7840
 8103f94:	46000000 	.word	0x46000000
 8103f98:	4c742400 	.word	0x4c742400
 8103f9c:	4a742400 	.word	0x4a742400
 8103fa0:	4bbebc20 	.word	0x4bbebc20

08103fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103fa4:	b580      	push	{r7, lr}
 8103fa6:	b082      	sub	sp, #8
 8103fa8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103faa:	f7ff fe89 	bl	8103cc0 <HAL_RCC_GetSysClockFreq>
 8103fae:	4601      	mov	r1, r0
 8103fb0:	4b11      	ldr	r3, [pc, #68]	; (8103ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8103fb2:	699b      	ldr	r3, [r3, #24]
 8103fb4:	0a1b      	lsrs	r3, r3, #8
 8103fb6:	f003 030f 	and.w	r3, r3, #15
 8103fba:	4a10      	ldr	r2, [pc, #64]	; (8103ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8103fbc:	5cd3      	ldrb	r3, [r2, r3]
 8103fbe:	f003 031f 	and.w	r3, r3, #31
 8103fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8103fc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103fc8:	4b0b      	ldr	r3, [pc, #44]	; (8103ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8103fca:	699b      	ldr	r3, [r3, #24]
 8103fcc:	f003 030f 	and.w	r3, r3, #15
 8103fd0:	4a0a      	ldr	r2, [pc, #40]	; (8103ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8103fd2:	5cd3      	ldrb	r3, [r2, r3]
 8103fd4:	f003 031f 	and.w	r3, r3, #31
 8103fd8:	687a      	ldr	r2, [r7, #4]
 8103fda:	fa22 f303 	lsr.w	r3, r2, r3
 8103fde:	4a08      	ldr	r2, [pc, #32]	; (8104000 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103fe0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103fe2:	4b07      	ldr	r3, [pc, #28]	; (8104000 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	4a07      	ldr	r2, [pc, #28]	; (8104004 <HAL_RCC_GetHCLKFreq+0x60>)
 8103fe8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103fea:	4b05      	ldr	r3, [pc, #20]	; (8104000 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103fec:	681b      	ldr	r3, [r3, #0]
}
 8103fee:	4618      	mov	r0, r3
 8103ff0:	3708      	adds	r7, #8
 8103ff2:	46bd      	mov	sp, r7
 8103ff4:	bd80      	pop	{r7, pc}
 8103ff6:	bf00      	nop
 8103ff8:	58024400 	.word	0x58024400
 8103ffc:	08107470 	.word	0x08107470
 8104000:	10000004 	.word	0x10000004
 8104004:	10000000 	.word	0x10000000

08104008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104008:	b580      	push	{r7, lr}
 810400a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810400c:	f7ff ffca 	bl	8103fa4 <HAL_RCC_GetHCLKFreq>
 8104010:	4601      	mov	r1, r0
 8104012:	4b06      	ldr	r3, [pc, #24]	; (810402c <HAL_RCC_GetPCLK1Freq+0x24>)
 8104014:	69db      	ldr	r3, [r3, #28]
 8104016:	091b      	lsrs	r3, r3, #4
 8104018:	f003 0307 	and.w	r3, r3, #7
 810401c:	4a04      	ldr	r2, [pc, #16]	; (8104030 <HAL_RCC_GetPCLK1Freq+0x28>)
 810401e:	5cd3      	ldrb	r3, [r2, r3]
 8104020:	f003 031f 	and.w	r3, r3, #31
 8104024:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104028:	4618      	mov	r0, r3
 810402a:	bd80      	pop	{r7, pc}
 810402c:	58024400 	.word	0x58024400
 8104030:	08107470 	.word	0x08107470

08104034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104034:	b580      	push	{r7, lr}
 8104036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104038:	f7ff ffb4 	bl	8103fa4 <HAL_RCC_GetHCLKFreq>
 810403c:	4601      	mov	r1, r0
 810403e:	4b06      	ldr	r3, [pc, #24]	; (8104058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8104040:	69db      	ldr	r3, [r3, #28]
 8104042:	0a1b      	lsrs	r3, r3, #8
 8104044:	f003 0307 	and.w	r3, r3, #7
 8104048:	4a04      	ldr	r2, [pc, #16]	; (810405c <HAL_RCC_GetPCLK2Freq+0x28>)
 810404a:	5cd3      	ldrb	r3, [r2, r3]
 810404c:	f003 031f 	and.w	r3, r3, #31
 8104050:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104054:	4618      	mov	r0, r3
 8104056:	bd80      	pop	{r7, pc}
 8104058:	58024400 	.word	0x58024400
 810405c:	08107470 	.word	0x08107470

08104060 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8104060:	b580      	push	{r7, lr}
 8104062:	b090      	sub	sp, #64	; 0x40
 8104064:	af00      	add	r7, sp, #0
 8104066:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810406e:	d150      	bne.n	8104112 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8104070:	4ba1      	ldr	r3, [pc, #644]	; (81042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104074:	f003 0307 	and.w	r3, r3, #7
 8104078:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810407c:	2b04      	cmp	r3, #4
 810407e:	d844      	bhi.n	810410a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8104080:	a201      	add	r2, pc, #4	; (adr r2, 8104088 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8104082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104086:	bf00      	nop
 8104088:	0810409d 	.word	0x0810409d
 810408c:	081040ad 	.word	0x081040ad
 8104090:	081040bd 	.word	0x081040bd
 8104094:	08104105 	.word	0x08104105
 8104098:	081040cd 	.word	0x081040cd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810409c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81040a0:	4618      	mov	r0, r3
 81040a2:	f000 fd03 	bl	8104aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81040aa:	e241      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81040ac:	f107 0318 	add.w	r3, r7, #24
 81040b0:	4618      	mov	r0, r3
 81040b2:	f000 fa63 	bl	810457c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81040b6:	69bb      	ldr	r3, [r7, #24]
 81040b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81040ba:	e239      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81040bc:	f107 030c 	add.w	r3, r7, #12
 81040c0:	4618      	mov	r0, r3
 81040c2:	f000 fba7 	bl	8104814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81040c6:	68fb      	ldr	r3, [r7, #12]
 81040c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81040ca:	e231      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81040cc:	4b8a      	ldr	r3, [pc, #552]	; (81042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81040ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81040d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81040d4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 81040d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81040d8:	2b00      	cmp	r3, #0
 81040da:	d102      	bne.n	81040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 81040dc:	4b87      	ldr	r3, [pc, #540]	; (81042fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81040de:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 81040e0:	e226      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 81040e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81040e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81040e8:	d102      	bne.n	81040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 81040ea:	4b85      	ldr	r3, [pc, #532]	; (8104300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81040ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81040ee:	e21f      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 81040f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81040f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81040f6:	d102      	bne.n	81040fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 81040f8:	4b82      	ldr	r3, [pc, #520]	; (8104304 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81040fc:	e218      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 81040fe:	2300      	movs	r3, #0
 8104100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104102:	e215      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104104:	4b80      	ldr	r3, [pc, #512]	; (8104308 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8104106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104108:	e212      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 810410a:	2300      	movs	r3, #0
 810410c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810410e:	bf00      	nop
 8104110:	e20e      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104118:	d14f      	bne.n	81041ba <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 810411a:	4b77      	ldr	r3, [pc, #476]	; (81042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810411c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810411e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8104122:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104126:	2b80      	cmp	r3, #128	; 0x80
 8104128:	d01c      	beq.n	8104164 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 810412a:	2b80      	cmp	r3, #128	; 0x80
 810412c:	d804      	bhi.n	8104138 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 810412e:	2b00      	cmp	r3, #0
 8104130:	d008      	beq.n	8104144 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8104132:	2b40      	cmp	r3, #64	; 0x40
 8104134:	d00e      	beq.n	8104154 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8104136:	e03c      	b.n	81041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8104138:	2bc0      	cmp	r3, #192	; 0xc0
 810413a:	d037      	beq.n	81041ac <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 810413c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104140:	d018      	beq.n	8104174 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8104142:	e036      	b.n	81041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104148:	4618      	mov	r0, r3
 810414a:	f000 fcaf 	bl	8104aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104150:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104152:	e1ed      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104154:	f107 0318 	add.w	r3, r7, #24
 8104158:	4618      	mov	r0, r3
 810415a:	f000 fa0f 	bl	810457c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810415e:	69bb      	ldr	r3, [r7, #24]
 8104160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104162:	e1e5      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104164:	f107 030c 	add.w	r3, r7, #12
 8104168:	4618      	mov	r0, r3
 810416a:	f000 fb53 	bl	8104814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810416e:	68fb      	ldr	r3, [r7, #12]
 8104170:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104172:	e1dd      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104174:	4b60      	ldr	r3, [pc, #384]	; (81042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810417c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 810417e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104180:	2b00      	cmp	r3, #0
 8104182:	d102      	bne.n	810418a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8104184:	4b5d      	ldr	r3, [pc, #372]	; (81042fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104186:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8104188:	e1d2      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 810418a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810418c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104190:	d102      	bne.n	8104198 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8104192:	4b5b      	ldr	r3, [pc, #364]	; (8104300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104196:	e1cb      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8104198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810419a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810419e:	d102      	bne.n	81041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 81041a0:	4b58      	ldr	r3, [pc, #352]	; (8104304 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81041a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81041a4:	e1c4      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 81041a6:	2300      	movs	r3, #0
 81041a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81041aa:	e1c1      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81041ac:	4b56      	ldr	r3, [pc, #344]	; (8104308 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 81041ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81041b0:	e1be      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 81041b2:	2300      	movs	r3, #0
 81041b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81041b6:	bf00      	nop
 81041b8:	e1ba      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81041ba:	687b      	ldr	r3, [r7, #4]
 81041bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81041c0:	d153      	bne.n	810426a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 81041c2:	4b4d      	ldr	r3, [pc, #308]	; (81042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81041c6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 81041ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 81041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81041d2:	d01f      	beq.n	8104214 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 81041d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81041d8:	d805      	bhi.n	81041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 81041da:	2b00      	cmp	r3, #0
 81041dc:	d00a      	beq.n	81041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 81041de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81041e2:	d00f      	beq.n	8104204 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 81041e4:	e03d      	b.n	8104262 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 81041e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81041ea:	d037      	beq.n	810425c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 81041ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81041f0:	d018      	beq.n	8104224 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 81041f2:	e036      	b.n	8104262 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81041f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81041f8:	4618      	mov	r0, r3
 81041fa:	f000 fc57 	bl	8104aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104200:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104202:	e195      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104204:	f107 0318 	add.w	r3, r7, #24
 8104208:	4618      	mov	r0, r3
 810420a:	f000 f9b7 	bl	810457c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810420e:	69bb      	ldr	r3, [r7, #24]
 8104210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104212:	e18d      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104214:	f107 030c 	add.w	r3, r7, #12
 8104218:	4618      	mov	r0, r3
 810421a:	f000 fafb 	bl	8104814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810421e:	68fb      	ldr	r3, [r7, #12]
 8104220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104222:	e185      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104224:	4b34      	ldr	r3, [pc, #208]	; (81042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810422c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 810422e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104230:	2b00      	cmp	r3, #0
 8104232:	d102      	bne.n	810423a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8104234:	4b31      	ldr	r3, [pc, #196]	; (81042fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104236:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8104238:	e17a      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 810423a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810423c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104240:	d102      	bne.n	8104248 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8104242:	4b2f      	ldr	r3, [pc, #188]	; (8104300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104246:	e173      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8104248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810424a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810424e:	d102      	bne.n	8104256 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8104250:	4b2c      	ldr	r3, [pc, #176]	; (8104304 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104254:	e16c      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8104256:	2300      	movs	r3, #0
 8104258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810425a:	e169      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810425c:	4b2a      	ldr	r3, [pc, #168]	; (8104308 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 810425e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104260:	e166      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8104262:	2300      	movs	r3, #0
 8104264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104266:	bf00      	nop
 8104268:	e162      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104270:	d15d      	bne.n	810432e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8104272:	4b21      	ldr	r3, [pc, #132]	; (81042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104276:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 810427a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810427e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104282:	d01f      	beq.n	81042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8104284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104288:	d805      	bhi.n	8104296 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 810428a:	2b00      	cmp	r3, #0
 810428c:	d00a      	beq.n	81042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 810428e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104292:	d00f      	beq.n	81042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8104294:	e047      	b.n	8104326 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8104296:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810429a:	d041      	beq.n	8104320 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 810429c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81042a0:	d018      	beq.n	81042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 81042a2:	e040      	b.n	8104326 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81042a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81042a8:	4618      	mov	r0, r3
 81042aa:	f000 fbff 	bl	8104aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81042b2:	e13d      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81042b4:	f107 0318 	add.w	r3, r7, #24
 81042b8:	4618      	mov	r0, r3
 81042ba:	f000 f95f 	bl	810457c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81042be:	69bb      	ldr	r3, [r7, #24]
 81042c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81042c2:	e135      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81042c4:	f107 030c 	add.w	r3, r7, #12
 81042c8:	4618      	mov	r0, r3
 81042ca:	f000 faa3 	bl	8104814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81042ce:	68fb      	ldr	r3, [r7, #12]
 81042d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81042d2:	e12d      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81042d4:	4b08      	ldr	r3, [pc, #32]	; (81042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81042d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81042dc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 81042de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81042e0:	2b00      	cmp	r3, #0
 81042e2:	d102      	bne.n	81042ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 81042e4:	4b05      	ldr	r3, [pc, #20]	; (81042fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81042e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 81042e8:	e122      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 81042ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81042ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81042f0:	d10c      	bne.n	810430c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 81042f2:	4b03      	ldr	r3, [pc, #12]	; (8104300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81042f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81042f6:	e11b      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 81042f8:	58024400 	.word	0x58024400
 81042fc:	03d09000 	.word	0x03d09000
 8104300:	003d0900 	.word	0x003d0900
 8104304:	017d7840 	.word	0x017d7840
 8104308:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 810430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810430e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104312:	d102      	bne.n	810431a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8104314:	4b89      	ldr	r3, [pc, #548]	; (810453c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8104316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104318:	e10a      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 810431a:	2300      	movs	r3, #0
 810431c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810431e:	e107      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104320:	4b87      	ldr	r3, [pc, #540]	; (8104540 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8104322:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104324:	e104      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8104326:	2300      	movs	r3, #0
 8104328:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810432a:	bf00      	nop
 810432c:	e100      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104334:	d153      	bne.n	81043de <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8104336:	4b83      	ldr	r3, [pc, #524]	; (8104544 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8104338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810433a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 810433e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8104340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104346:	d01f      	beq.n	8104388 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8104348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810434c:	d805      	bhi.n	810435a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 810434e:	2b00      	cmp	r3, #0
 8104350:	d00a      	beq.n	8104368 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8104352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104356:	d00f      	beq.n	8104378 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8104358:	e03d      	b.n	81043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 810435a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810435e:	d037      	beq.n	81043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8104360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104364:	d018      	beq.n	8104398 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8104366:	e036      	b.n	81043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810436c:	4618      	mov	r0, r3
 810436e:	f000 fb9d 	bl	8104aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104374:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104376:	e0db      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104378:	f107 0318 	add.w	r3, r7, #24
 810437c:	4618      	mov	r0, r3
 810437e:	f000 f8fd 	bl	810457c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104382:	69bb      	ldr	r3, [r7, #24]
 8104384:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104386:	e0d3      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104388:	f107 030c 	add.w	r3, r7, #12
 810438c:	4618      	mov	r0, r3
 810438e:	f000 fa41 	bl	8104814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104392:	68fb      	ldr	r3, [r7, #12]
 8104394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104396:	e0cb      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104398:	4b6a      	ldr	r3, [pc, #424]	; (8104544 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 810439a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810439c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81043a0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 81043a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81043a4:	2b00      	cmp	r3, #0
 81043a6:	d102      	bne.n	81043ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 81043a8:	4b67      	ldr	r3, [pc, #412]	; (8104548 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 81043aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 81043ac:	e0c0      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 81043ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81043b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81043b4:	d102      	bne.n	81043bc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 81043b6:	4b65      	ldr	r3, [pc, #404]	; (810454c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 81043b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81043ba:	e0b9      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 81043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81043be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043c2:	d102      	bne.n	81043ca <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 81043c4:	4b5d      	ldr	r3, [pc, #372]	; (810453c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 81043c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81043c8:	e0b2      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 81043ca:	2300      	movs	r3, #0
 81043cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81043ce:	e0af      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81043d0:	4b5b      	ldr	r3, [pc, #364]	; (8104540 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 81043d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81043d4:	e0ac      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 81043d6:	2300      	movs	r3, #0
 81043d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81043da:	bf00      	nop
 81043dc:	e0a8      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81043e4:	d13d      	bne.n	8104462 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 81043e6:	4b57      	ldr	r3, [pc, #348]	; (8104544 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 81043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81043ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81043ee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81043f6:	d00c      	beq.n	8104412 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 81043f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81043fc:	d011      	beq.n	8104422 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 81043fe:	2b00      	cmp	r3, #0
 8104400:	d12b      	bne.n	810445a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104402:	f107 0318 	add.w	r3, r7, #24
 8104406:	4618      	mov	r0, r3
 8104408:	f000 f8b8 	bl	810457c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810440c:	69bb      	ldr	r3, [r7, #24]
 810440e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104410:	e08e      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104412:	f107 030c 	add.w	r3, r7, #12
 8104416:	4618      	mov	r0, r3
 8104418:	f000 f9fc 	bl	8104814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810441c:	697b      	ldr	r3, [r7, #20]
 810441e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104420:	e086      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104422:	4b48      	ldr	r3, [pc, #288]	; (8104544 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8104424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810442a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 810442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810442e:	2b00      	cmp	r3, #0
 8104430:	d102      	bne.n	8104438 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8104432:	4b45      	ldr	r3, [pc, #276]	; (8104548 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8104434:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8104436:	e07b      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8104438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810443a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810443e:	d102      	bne.n	8104446 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8104440:	4b42      	ldr	r3, [pc, #264]	; (810454c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8104442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104444:	e074      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8104446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810444c:	d102      	bne.n	8104454 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 810444e:	4b3b      	ldr	r3, [pc, #236]	; (810453c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8104450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104452:	e06d      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8104454:	2300      	movs	r3, #0
 8104456:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104458:	e06a      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 810445a:	2300      	movs	r3, #0
 810445c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810445e:	bf00      	nop
 8104460:	e066      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104468:	d11f      	bne.n	81044aa <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 810446a:	4b36      	ldr	r3, [pc, #216]	; (8104544 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 810446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810446e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104472:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8104474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104476:	2b00      	cmp	r3, #0
 8104478:	d003      	beq.n	8104482 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 810447a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810447e:	d008      	beq.n	8104492 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8104480:	e00f      	b.n	81044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104486:	4618      	mov	r0, r3
 8104488:	f000 fb10 	bl	8104aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810448e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104490:	e04e      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104492:	f107 0318 	add.w	r3, r7, #24
 8104496:	4618      	mov	r0, r3
 8104498:	f000 f870 	bl	810457c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810449c:	6a3b      	ldr	r3, [r7, #32]
 810449e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81044a0:	e046      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 81044a2:	2300      	movs	r3, #0
 81044a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81044a6:	bf00      	nop
 81044a8:	e042      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81044aa:	687b      	ldr	r3, [r7, #4]
 81044ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81044b0:	d13c      	bne.n	810452c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 81044b2:	4b24      	ldr	r3, [pc, #144]	; (8104544 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 81044b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81044b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 81044ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81044be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81044c2:	d01e      	beq.n	8104502 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 81044c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81044c8:	d805      	bhi.n	81044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 81044ca:	2b00      	cmp	r3, #0
 81044cc:	d00d      	beq.n	81044ea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 81044ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81044d2:	d00e      	beq.n	81044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 81044d4:	e026      	b.n	8104524 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 81044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81044da:	d01d      	beq.n	8104518 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 81044dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81044e0:	d01d      	beq.n	810451e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 81044e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81044e6:	d014      	beq.n	8104512 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 81044e8:	e01c      	b.n	8104524 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81044ea:	f000 f831 	bl	8104550 <HAL_RCCEx_GetD3PCLK1Freq>
 81044ee:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 81044f0:	e01e      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81044f2:	f107 0318 	add.w	r3, r7, #24
 81044f6:	4618      	mov	r0, r3
 81044f8:	f000 f840 	bl	810457c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81044fc:	69fb      	ldr	r3, [r7, #28]
 81044fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104500:	e016      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104502:	f107 030c 	add.w	r3, r7, #12
 8104506:	4618      	mov	r0, r3
 8104508:	f000 f984 	bl	8104814 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810450c:	693b      	ldr	r3, [r7, #16]
 810450e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104510:	e00e      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8104512:	4b0d      	ldr	r3, [pc, #52]	; (8104548 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8104514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104516:	e00b      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8104518:	4b0c      	ldr	r3, [pc, #48]	; (810454c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 810451a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810451c:	e008      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 810451e:	4b07      	ldr	r3, [pc, #28]	; (810453c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8104520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104522:	e005      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8104524:	2300      	movs	r3, #0
 8104526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104528:	bf00      	nop
 810452a:	e001      	b.n	8104530 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 810452c:	2300      	movs	r3, #0
 810452e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8104530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8104532:	4618      	mov	r0, r3
 8104534:	3740      	adds	r7, #64	; 0x40
 8104536:	46bd      	mov	sp, r7
 8104538:	bd80      	pop	{r7, pc}
 810453a:	bf00      	nop
 810453c:	017d7840 	.word	0x017d7840
 8104540:	00bb8000 	.word	0x00bb8000
 8104544:	58024400 	.word	0x58024400
 8104548:	03d09000 	.word	0x03d09000
 810454c:	003d0900 	.word	0x003d0900

08104550 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104550:	b580      	push	{r7, lr}
 8104552:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104554:	f7ff fd26 	bl	8103fa4 <HAL_RCC_GetHCLKFreq>
 8104558:	4601      	mov	r1, r0
 810455a:	4b06      	ldr	r3, [pc, #24]	; (8104574 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810455c:	6a1b      	ldr	r3, [r3, #32]
 810455e:	091b      	lsrs	r3, r3, #4
 8104560:	f003 0307 	and.w	r3, r3, #7
 8104564:	4a04      	ldr	r2, [pc, #16]	; (8104578 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104566:	5cd3      	ldrb	r3, [r2, r3]
 8104568:	f003 031f 	and.w	r3, r3, #31
 810456c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104570:	4618      	mov	r0, r3
 8104572:	bd80      	pop	{r7, pc}
 8104574:	58024400 	.word	0x58024400
 8104578:	08107470 	.word	0x08107470

0810457c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 810457c:	b480      	push	{r7}
 810457e:	b089      	sub	sp, #36	; 0x24
 8104580:	af00      	add	r7, sp, #0
 8104582:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104584:	4b9d      	ldr	r3, [pc, #628]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8104586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104588:	f003 0303 	and.w	r3, r3, #3
 810458c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810458e:	4b9b      	ldr	r3, [pc, #620]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8104590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104592:	0b1b      	lsrs	r3, r3, #12
 8104594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104598:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810459a:	4b98      	ldr	r3, [pc, #608]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810459e:	091b      	lsrs	r3, r3, #4
 81045a0:	f003 0301 	and.w	r3, r3, #1
 81045a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81045a6:	4b95      	ldr	r3, [pc, #596]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81045aa:	08db      	lsrs	r3, r3, #3
 81045ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81045b0:	693a      	ldr	r2, [r7, #16]
 81045b2:	fb02 f303 	mul.w	r3, r2, r3
 81045b6:	ee07 3a90 	vmov	s15, r3
 81045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81045be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81045c2:	697b      	ldr	r3, [r7, #20]
 81045c4:	2b00      	cmp	r3, #0
 81045c6:	f000 810a 	beq.w	81047de <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 81045ca:	69bb      	ldr	r3, [r7, #24]
 81045cc:	2b01      	cmp	r3, #1
 81045ce:	d05a      	beq.n	8104686 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 81045d0:	2b01      	cmp	r3, #1
 81045d2:	d302      	bcc.n	81045da <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 81045d4:	2b02      	cmp	r3, #2
 81045d6:	d078      	beq.n	81046ca <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 81045d8:	e099      	b.n	810470e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81045da:	4b88      	ldr	r3, [pc, #544]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81045dc:	681b      	ldr	r3, [r3, #0]
 81045de:	f003 0320 	and.w	r3, r3, #32
 81045e2:	2b00      	cmp	r3, #0
 81045e4:	d02d      	beq.n	8104642 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81045e6:	4b85      	ldr	r3, [pc, #532]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81045e8:	681b      	ldr	r3, [r3, #0]
 81045ea:	08db      	lsrs	r3, r3, #3
 81045ec:	f003 0303 	and.w	r3, r3, #3
 81045f0:	4a83      	ldr	r2, [pc, #524]	; (8104800 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 81045f2:	fa22 f303 	lsr.w	r3, r2, r3
 81045f6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81045f8:	68bb      	ldr	r3, [r7, #8]
 81045fa:	ee07 3a90 	vmov	s15, r3
 81045fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104602:	697b      	ldr	r3, [r7, #20]
 8104604:	ee07 3a90 	vmov	s15, r3
 8104608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810460c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104610:	4b7a      	ldr	r3, [pc, #488]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8104612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104618:	ee07 3a90 	vmov	s15, r3
 810461c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104620:	ed97 6a03 	vldr	s12, [r7, #12]
 8104624:	eddf 5a77 	vldr	s11, [pc, #476]	; 8104804 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8104628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810462c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104638:	ee67 7a27 	vmul.f32	s15, s14, s15
 810463c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104640:	e087      	b.n	8104752 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104642:	697b      	ldr	r3, [r7, #20]
 8104644:	ee07 3a90 	vmov	s15, r3
 8104648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810464c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8104808 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8104650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104654:	4b69      	ldr	r3, [pc, #420]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8104656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810465c:	ee07 3a90 	vmov	s15, r3
 8104660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104664:	ed97 6a03 	vldr	s12, [r7, #12]
 8104668:	eddf 5a66 	vldr	s11, [pc, #408]	; 8104804 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 810466c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810467c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104680:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104684:	e065      	b.n	8104752 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104686:	697b      	ldr	r3, [r7, #20]
 8104688:	ee07 3a90 	vmov	s15, r3
 810468c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104690:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8104694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104698:	4b58      	ldr	r3, [pc, #352]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810469c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046a0:	ee07 3a90 	vmov	s15, r3
 81046a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046a8:	ed97 6a03 	vldr	s12, [r7, #12]
 81046ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8104804 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81046b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81046bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81046c8:	e043      	b.n	8104752 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81046ca:	697b      	ldr	r3, [r7, #20]
 81046cc:	ee07 3a90 	vmov	s15, r3
 81046d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8104810 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 81046d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046dc:	4b47      	ldr	r3, [pc, #284]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81046e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046e4:	ee07 3a90 	vmov	s15, r3
 81046e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046ec:	ed97 6a03 	vldr	s12, [r7, #12]
 81046f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8104804 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81046f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104708:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810470c:	e021      	b.n	8104752 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810470e:	697b      	ldr	r3, [r7, #20]
 8104710:	ee07 3a90 	vmov	s15, r3
 8104714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104718:	eddf 6a3c 	vldr	s13, [pc, #240]	; 810480c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 810471c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104720:	4b36      	ldr	r3, [pc, #216]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8104722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104728:	ee07 3a90 	vmov	s15, r3
 810472c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104730:	ed97 6a03 	vldr	s12, [r7, #12]
 8104734:	eddf 5a33 	vldr	s11, [pc, #204]	; 8104804 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8104738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810473c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104748:	ee67 7a27 	vmul.f32	s15, s14, s15
 810474c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104750:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8104752:	4b2a      	ldr	r3, [pc, #168]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8104754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104756:	0a5b      	lsrs	r3, r3, #9
 8104758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810475c:	ee07 3a90 	vmov	s15, r3
 8104760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104768:	ee37 7a87 	vadd.f32	s14, s15, s14
 810476c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104778:	ee17 2a90 	vmov	r2, s15
 810477c:	687b      	ldr	r3, [r7, #4]
 810477e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8104780:	4b1e      	ldr	r3, [pc, #120]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8104782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104784:	0c1b      	lsrs	r3, r3, #16
 8104786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810478a:	ee07 3a90 	vmov	s15, r3
 810478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104796:	ee37 7a87 	vadd.f32	s14, s15, s14
 810479a:	edd7 6a07 	vldr	s13, [r7, #28]
 810479e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81047a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81047a6:	ee17 2a90 	vmov	r2, s15
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81047ae:	4b13      	ldr	r3, [pc, #76]	; (81047fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81047b2:	0e1b      	lsrs	r3, r3, #24
 81047b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81047b8:	ee07 3a90 	vmov	s15, r3
 81047bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81047c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81047c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81047c8:	edd7 6a07 	vldr	s13, [r7, #28]
 81047cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81047d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81047d4:	ee17 2a90 	vmov	r2, s15
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81047dc:	e008      	b.n	81047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81047de:	687b      	ldr	r3, [r7, #4]
 81047e0:	2200      	movs	r2, #0
 81047e2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81047e4:	687b      	ldr	r3, [r7, #4]
 81047e6:	2200      	movs	r2, #0
 81047e8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81047ea:	687b      	ldr	r3, [r7, #4]
 81047ec:	2200      	movs	r2, #0
 81047ee:	609a      	str	r2, [r3, #8]
}
 81047f0:	bf00      	nop
 81047f2:	3724      	adds	r7, #36	; 0x24
 81047f4:	46bd      	mov	sp, r7
 81047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047fa:	4770      	bx	lr
 81047fc:	58024400 	.word	0x58024400
 8104800:	03d09000 	.word	0x03d09000
 8104804:	46000000 	.word	0x46000000
 8104808:	4c742400 	.word	0x4c742400
 810480c:	4a742400 	.word	0x4a742400
 8104810:	4bbebc20 	.word	0x4bbebc20

08104814 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8104814:	b480      	push	{r7}
 8104816:	b089      	sub	sp, #36	; 0x24
 8104818:	af00      	add	r7, sp, #0
 810481a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810481c:	4b9d      	ldr	r3, [pc, #628]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104820:	f003 0303 	and.w	r3, r3, #3
 8104824:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8104826:	4b9b      	ldr	r3, [pc, #620]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8104828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810482a:	0d1b      	lsrs	r3, r3, #20
 810482c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104830:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104832:	4b98      	ldr	r3, [pc, #608]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8104834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104836:	0a1b      	lsrs	r3, r3, #8
 8104838:	f003 0301 	and.w	r3, r3, #1
 810483c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810483e:	4b95      	ldr	r3, [pc, #596]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8104840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104842:	08db      	lsrs	r3, r3, #3
 8104844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104848:	693a      	ldr	r2, [r7, #16]
 810484a:	fb02 f303 	mul.w	r3, r2, r3
 810484e:	ee07 3a90 	vmov	s15, r3
 8104852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104856:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810485a:	697b      	ldr	r3, [r7, #20]
 810485c:	2b00      	cmp	r3, #0
 810485e:	f000 810a 	beq.w	8104a76 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8104862:	69bb      	ldr	r3, [r7, #24]
 8104864:	2b01      	cmp	r3, #1
 8104866:	d05a      	beq.n	810491e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8104868:	2b01      	cmp	r3, #1
 810486a:	d302      	bcc.n	8104872 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 810486c:	2b02      	cmp	r3, #2
 810486e:	d078      	beq.n	8104962 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8104870:	e099      	b.n	81049a6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104872:	4b88      	ldr	r3, [pc, #544]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8104874:	681b      	ldr	r3, [r3, #0]
 8104876:	f003 0320 	and.w	r3, r3, #32
 810487a:	2b00      	cmp	r3, #0
 810487c:	d02d      	beq.n	81048da <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810487e:	4b85      	ldr	r3, [pc, #532]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	08db      	lsrs	r3, r3, #3
 8104884:	f003 0303 	and.w	r3, r3, #3
 8104888:	4a83      	ldr	r2, [pc, #524]	; (8104a98 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 810488a:	fa22 f303 	lsr.w	r3, r2, r3
 810488e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104890:	68bb      	ldr	r3, [r7, #8]
 8104892:	ee07 3a90 	vmov	s15, r3
 8104896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810489a:	697b      	ldr	r3, [r7, #20]
 810489c:	ee07 3a90 	vmov	s15, r3
 81048a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81048a8:	4b7a      	ldr	r3, [pc, #488]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81048ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81048b0:	ee07 3a90 	vmov	s15, r3
 81048b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81048b8:	ed97 6a03 	vldr	s12, [r7, #12]
 81048bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8104a9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81048c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81048c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81048c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81048cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81048d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81048d4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81048d8:	e087      	b.n	81049ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81048da:	697b      	ldr	r3, [r7, #20]
 81048dc:	ee07 3a90 	vmov	s15, r3
 81048e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8104aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 81048e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81048ec:	4b69      	ldr	r3, [pc, #420]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81048f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81048f4:	ee07 3a90 	vmov	s15, r3
 81048f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81048fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8104900:	eddf 5a66 	vldr	s11, [pc, #408]	; 8104a9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8104904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810490c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104918:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810491c:	e065      	b.n	81049ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810491e:	697b      	ldr	r3, [r7, #20]
 8104920:	ee07 3a90 	vmov	s15, r3
 8104924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104928:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8104aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 810492c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104930:	4b58      	ldr	r3, [pc, #352]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8104932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104938:	ee07 3a90 	vmov	s15, r3
 810493c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104940:	ed97 6a03 	vldr	s12, [r7, #12]
 8104944:	eddf 5a55 	vldr	s11, [pc, #340]	; 8104a9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8104948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810494c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104958:	ee67 7a27 	vmul.f32	s15, s14, s15
 810495c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104960:	e043      	b.n	81049ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104962:	697b      	ldr	r3, [r7, #20]
 8104964:	ee07 3a90 	vmov	s15, r3
 8104968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810496c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8104aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8104970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104974:	4b47      	ldr	r3, [pc, #284]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8104976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810497c:	ee07 3a90 	vmov	s15, r3
 8104980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104984:	ed97 6a03 	vldr	s12, [r7, #12]
 8104988:	eddf 5a44 	vldr	s11, [pc, #272]	; 8104a9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 810498c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810499c:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81049a4:	e021      	b.n	81049ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81049a6:	697b      	ldr	r3, [r7, #20]
 81049a8:	ee07 3a90 	vmov	s15, r3
 81049ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049b0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8104aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 81049b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049b8:	4b36      	ldr	r3, [pc, #216]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81049bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049c0:	ee07 3a90 	vmov	s15, r3
 81049c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049c8:	ed97 6a03 	vldr	s12, [r7, #12]
 81049cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8104a9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81049d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81049e8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81049ea:	4b2a      	ldr	r3, [pc, #168]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81049ee:	0a5b      	lsrs	r3, r3, #9
 81049f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81049f4:	ee07 3a90 	vmov	s15, r3
 81049f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104a00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104a04:	edd7 6a07 	vldr	s13, [r7, #28]
 8104a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104a10:	ee17 2a90 	vmov	r2, s15
 8104a14:	687b      	ldr	r3, [r7, #4]
 8104a16:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8104a18:	4b1e      	ldr	r3, [pc, #120]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8104a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104a1c:	0c1b      	lsrs	r3, r3, #16
 8104a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104a22:	ee07 3a90 	vmov	s15, r3
 8104a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8104a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104a3e:	ee17 2a90 	vmov	r2, s15
 8104a42:	687b      	ldr	r3, [r7, #4]
 8104a44:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104a46:	4b13      	ldr	r3, [pc, #76]	; (8104a94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8104a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104a4a:	0e1b      	lsrs	r3, r3, #24
 8104a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104a50:	ee07 3a90 	vmov	s15, r3
 8104a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8104a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104a6c:	ee17 2a90 	vmov	r2, s15
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104a74:	e008      	b.n	8104a88 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104a76:	687b      	ldr	r3, [r7, #4]
 8104a78:	2200      	movs	r2, #0
 8104a7a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104a7c:	687b      	ldr	r3, [r7, #4]
 8104a7e:	2200      	movs	r2, #0
 8104a80:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	2200      	movs	r2, #0
 8104a86:	609a      	str	r2, [r3, #8]
}
 8104a88:	bf00      	nop
 8104a8a:	3724      	adds	r7, #36	; 0x24
 8104a8c:	46bd      	mov	sp, r7
 8104a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a92:	4770      	bx	lr
 8104a94:	58024400 	.word	0x58024400
 8104a98:	03d09000 	.word	0x03d09000
 8104a9c:	46000000 	.word	0x46000000
 8104aa0:	4c742400 	.word	0x4c742400
 8104aa4:	4a742400 	.word	0x4a742400
 8104aa8:	4bbebc20 	.word	0x4bbebc20

08104aac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8104aac:	b480      	push	{r7}
 8104aae:	b089      	sub	sp, #36	; 0x24
 8104ab0:	af00      	add	r7, sp, #0
 8104ab2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104ab4:	4b9d      	ldr	r3, [pc, #628]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104ab8:	f003 0303 	and.w	r3, r3, #3
 8104abc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8104abe:	4b9b      	ldr	r3, [pc, #620]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104ac2:	091b      	lsrs	r3, r3, #4
 8104ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104ac8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8104aca:	4b98      	ldr	r3, [pc, #608]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ace:	f003 0301 	and.w	r3, r3, #1
 8104ad2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104ad4:	4b95      	ldr	r3, [pc, #596]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104ad8:	08db      	lsrs	r3, r3, #3
 8104ada:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104ade:	693a      	ldr	r2, [r7, #16]
 8104ae0:	fb02 f303 	mul.w	r3, r2, r3
 8104ae4:	ee07 3a90 	vmov	s15, r3
 8104ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104aec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8104af0:	697b      	ldr	r3, [r7, #20]
 8104af2:	2b00      	cmp	r3, #0
 8104af4:	f000 810a 	beq.w	8104d0c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8104af8:	69bb      	ldr	r3, [r7, #24]
 8104afa:	2b01      	cmp	r3, #1
 8104afc:	d05a      	beq.n	8104bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8104afe:	2b01      	cmp	r3, #1
 8104b00:	d302      	bcc.n	8104b08 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8104b02:	2b02      	cmp	r3, #2
 8104b04:	d078      	beq.n	8104bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8104b06:	e099      	b.n	8104c3c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104b08:	4b88      	ldr	r3, [pc, #544]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104b0a:	681b      	ldr	r3, [r3, #0]
 8104b0c:	f003 0320 	and.w	r3, r3, #32
 8104b10:	2b00      	cmp	r3, #0
 8104b12:	d02d      	beq.n	8104b70 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104b14:	4b85      	ldr	r3, [pc, #532]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	08db      	lsrs	r3, r3, #3
 8104b1a:	f003 0303 	and.w	r3, r3, #3
 8104b1e:	4a84      	ldr	r2, [pc, #528]	; (8104d30 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8104b20:	fa22 f303 	lsr.w	r3, r2, r3
 8104b24:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104b26:	68bb      	ldr	r3, [r7, #8]
 8104b28:	ee07 3a90 	vmov	s15, r3
 8104b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b30:	697b      	ldr	r3, [r7, #20]
 8104b32:	ee07 3a90 	vmov	s15, r3
 8104b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b3e:	4b7b      	ldr	r3, [pc, #492]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b46:	ee07 3a90 	vmov	s15, r3
 8104b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104b52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104d34 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8104b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104b6e:	e087      	b.n	8104c80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104b70:	697b      	ldr	r3, [r7, #20]
 8104b72:	ee07 3a90 	vmov	s15, r3
 8104b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8104b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b82:	4b6a      	ldr	r3, [pc, #424]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b8a:	ee07 3a90 	vmov	s15, r3
 8104b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8104b96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104d34 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8104b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104bb2:	e065      	b.n	8104c80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104bb4:	697b      	ldr	r3, [r7, #20]
 8104bb6:	ee07 3a90 	vmov	s15, r3
 8104bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104d3c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8104bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104bc6:	4b59      	ldr	r3, [pc, #356]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104bce:	ee07 3a90 	vmov	s15, r3
 8104bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8104bda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104d34 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8104bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104bf6:	e043      	b.n	8104c80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104bf8:	697b      	ldr	r3, [r7, #20]
 8104bfa:	ee07 3a90 	vmov	s15, r3
 8104bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104d40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8104c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c0a:	4b48      	ldr	r3, [pc, #288]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c12:	ee07 3a90 	vmov	s15, r3
 8104c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104d34 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8104c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104c3a:	e021      	b.n	8104c80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104c3c:	697b      	ldr	r3, [r7, #20]
 8104c3e:	ee07 3a90 	vmov	s15, r3
 8104c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104d3c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8104c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c4e:	4b37      	ldr	r3, [pc, #220]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c56:	ee07 3a90 	vmov	s15, r3
 8104c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104d34 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8104c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104c7e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8104c80:	4b2a      	ldr	r3, [pc, #168]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104c84:	0a5b      	lsrs	r3, r3, #9
 8104c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104c8a:	ee07 3a90 	vmov	s15, r3
 8104c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104c96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104c9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8104c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104ca6:	ee17 2a90 	vmov	r2, s15
 8104caa:	687b      	ldr	r3, [r7, #4]
 8104cac:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8104cae:	4b1f      	ldr	r3, [pc, #124]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104cb2:	0c1b      	lsrs	r3, r3, #16
 8104cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104cb8:	ee07 3a90 	vmov	s15, r3
 8104cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104cc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104cc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8104ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104cd4:	ee17 2a90 	vmov	r2, s15
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8104cdc:	4b13      	ldr	r3, [pc, #76]	; (8104d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8104cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104ce0:	0e1b      	lsrs	r3, r3, #24
 8104ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ce6:	ee07 3a90 	vmov	s15, r3
 8104cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8104cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d02:	ee17 2a90 	vmov	r2, s15
 8104d06:	687b      	ldr	r3, [r7, #4]
 8104d08:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8104d0a:	e008      	b.n	8104d1e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	2200      	movs	r2, #0
 8104d10:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8104d12:	687b      	ldr	r3, [r7, #4]
 8104d14:	2200      	movs	r2, #0
 8104d16:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	2200      	movs	r2, #0
 8104d1c:	609a      	str	r2, [r3, #8]
}
 8104d1e:	bf00      	nop
 8104d20:	3724      	adds	r7, #36	; 0x24
 8104d22:	46bd      	mov	sp, r7
 8104d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d28:	4770      	bx	lr
 8104d2a:	bf00      	nop
 8104d2c:	58024400 	.word	0x58024400
 8104d30:	03d09000 	.word	0x03d09000
 8104d34:	46000000 	.word	0x46000000
 8104d38:	4c742400 	.word	0x4c742400
 8104d3c:	4a742400 	.word	0x4a742400
 8104d40:	4bbebc20 	.word	0x4bbebc20

08104d44 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8104d44:	b580      	push	{r7, lr}
 8104d46:	b08a      	sub	sp, #40	; 0x28
 8104d48:	af00      	add	r7, sp, #0
 8104d4a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	2b00      	cmp	r3, #0
 8104d50:	d101      	bne.n	8104d56 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8104d52:	2301      	movs	r3, #1
 8104d54:	e283      	b.n	810525e <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8104d56:	f7fc fe55 	bl	8101a04 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8104d60:	2b01      	cmp	r3, #1
 8104d62:	d113      	bne.n	8104d8c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	681b      	ldr	r3, [r3, #0]
 8104d68:	4a93      	ldr	r2, [pc, #588]	; (8104fb8 <HAL_SAI_Init+0x274>)
 8104d6a:	4293      	cmp	r3, r2
 8104d6c:	d004      	beq.n	8104d78 <HAL_SAI_Init+0x34>
 8104d6e:	687b      	ldr	r3, [r7, #4]
 8104d70:	681b      	ldr	r3, [r3, #0]
 8104d72:	4a92      	ldr	r2, [pc, #584]	; (8104fbc <HAL_SAI_Init+0x278>)
 8104d74:	4293      	cmp	r3, r2
 8104d76:	d107      	bne.n	8104d88 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8104d78:	687b      	ldr	r3, [r7, #4]
 8104d7a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8104d7c:	2b01      	cmp	r3, #1
 8104d7e:	d103      	bne.n	8104d88 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8104d84:	2b00      	cmp	r3, #0
 8104d86:	d001      	beq.n	8104d8c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8104d88:	2301      	movs	r3, #1
 8104d8a:	e268      	b.n	810525e <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8104d8c:	687b      	ldr	r3, [r7, #4]
 8104d8e:	681b      	ldr	r3, [r3, #0]
 8104d90:	4a89      	ldr	r2, [pc, #548]	; (8104fb8 <HAL_SAI_Init+0x274>)
 8104d92:	4293      	cmp	r3, r2
 8104d94:	d004      	beq.n	8104da0 <HAL_SAI_Init+0x5c>
 8104d96:	687b      	ldr	r3, [r7, #4]
 8104d98:	681b      	ldr	r3, [r3, #0]
 8104d9a:	4a89      	ldr	r2, [pc, #548]	; (8104fc0 <HAL_SAI_Init+0x27c>)
 8104d9c:	4293      	cmp	r3, r2
 8104d9e:	d102      	bne.n	8104da6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8104da0:	4b88      	ldr	r3, [pc, #544]	; (8104fc4 <HAL_SAI_Init+0x280>)
 8104da2:	61bb      	str	r3, [r7, #24]
 8104da4:	e028      	b.n	8104df8 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8104da6:	687b      	ldr	r3, [r7, #4]
 8104da8:	681b      	ldr	r3, [r3, #0]
 8104daa:	4a87      	ldr	r2, [pc, #540]	; (8104fc8 <HAL_SAI_Init+0x284>)
 8104dac:	4293      	cmp	r3, r2
 8104dae:	d004      	beq.n	8104dba <HAL_SAI_Init+0x76>
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	681b      	ldr	r3, [r3, #0]
 8104db4:	4a85      	ldr	r2, [pc, #532]	; (8104fcc <HAL_SAI_Init+0x288>)
 8104db6:	4293      	cmp	r3, r2
 8104db8:	d102      	bne.n	8104dc0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8104dba:	4b85      	ldr	r3, [pc, #532]	; (8104fd0 <HAL_SAI_Init+0x28c>)
 8104dbc:	61bb      	str	r3, [r7, #24]
 8104dbe:	e01b      	b.n	8104df8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	4a83      	ldr	r2, [pc, #524]	; (8104fd4 <HAL_SAI_Init+0x290>)
 8104dc6:	4293      	cmp	r3, r2
 8104dc8:	d004      	beq.n	8104dd4 <HAL_SAI_Init+0x90>
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	4a82      	ldr	r2, [pc, #520]	; (8104fd8 <HAL_SAI_Init+0x294>)
 8104dd0:	4293      	cmp	r3, r2
 8104dd2:	d102      	bne.n	8104dda <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8104dd4:	4b81      	ldr	r3, [pc, #516]	; (8104fdc <HAL_SAI_Init+0x298>)
 8104dd6:	61bb      	str	r3, [r7, #24]
 8104dd8:	e00e      	b.n	8104df8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8104dda:	687b      	ldr	r3, [r7, #4]
 8104ddc:	681b      	ldr	r3, [r3, #0]
 8104dde:	4a77      	ldr	r2, [pc, #476]	; (8104fbc <HAL_SAI_Init+0x278>)
 8104de0:	4293      	cmp	r3, r2
 8104de2:	d004      	beq.n	8104dee <HAL_SAI_Init+0xaa>
 8104de4:	687b      	ldr	r3, [r7, #4]
 8104de6:	681b      	ldr	r3, [r3, #0]
 8104de8:	4a7d      	ldr	r2, [pc, #500]	; (8104fe0 <HAL_SAI_Init+0x29c>)
 8104dea:	4293      	cmp	r3, r2
 8104dec:	d102      	bne.n	8104df4 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8104dee:	4b7d      	ldr	r3, [pc, #500]	; (8104fe4 <HAL_SAI_Init+0x2a0>)
 8104df0:	61bb      	str	r3, [r7, #24]
 8104df2:	e001      	b.n	8104df8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8104df4:	2301      	movs	r3, #1
 8104df6:	e232      	b.n	810525e <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8104dfe:	b2db      	uxtb	r3, r3
 8104e00:	2b00      	cmp	r3, #0
 8104e02:	d106      	bne.n	8104e12 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8104e04:	687b      	ldr	r3, [r7, #4]
 8104e06:	2200      	movs	r2, #0
 8104e08:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8104e0c:	6878      	ldr	r0, [r7, #4]
 8104e0e:	f7fc fc5b 	bl	81016c8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8104e12:	6878      	ldr	r0, [r7, #4]
 8104e14:	f000 fa34 	bl	8105280 <SAI_Disable>
 8104e18:	4603      	mov	r3, r0
 8104e1a:	2b00      	cmp	r3, #0
 8104e1c:	d001      	beq.n	8104e22 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8104e1e:	2301      	movs	r3, #1
 8104e20:	e21d      	b.n	810525e <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	2202      	movs	r2, #2
 8104e26:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8104e2a:	687b      	ldr	r3, [r7, #4]
 8104e2c:	68db      	ldr	r3, [r3, #12]
 8104e2e:	2b01      	cmp	r3, #1
 8104e30:	d007      	beq.n	8104e42 <HAL_SAI_Init+0xfe>
 8104e32:	2b01      	cmp	r3, #1
 8104e34:	d302      	bcc.n	8104e3c <HAL_SAI_Init+0xf8>
 8104e36:	2b02      	cmp	r3, #2
 8104e38:	d006      	beq.n	8104e48 <HAL_SAI_Init+0x104>
 8104e3a:	e008      	b.n	8104e4e <HAL_SAI_Init+0x10a>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8104e3c:	2300      	movs	r3, #0
 8104e3e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8104e40:	e008      	b.n	8104e54 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8104e42:	2310      	movs	r3, #16
 8104e44:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8104e46:	e005      	b.n	8104e54 <HAL_SAI_Init+0x110>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8104e48:	2320      	movs	r3, #32
 8104e4a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8104e4c:	e002      	b.n	8104e54 <HAL_SAI_Init+0x110>
    default:
      tmpregisterGCR = 0;
 8104e4e:	2300      	movs	r3, #0
 8104e50:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8104e52:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8104e54:	687b      	ldr	r3, [r7, #4]
 8104e56:	689b      	ldr	r3, [r3, #8]
 8104e58:	2b05      	cmp	r3, #5
 8104e5a:	d832      	bhi.n	8104ec2 <HAL_SAI_Init+0x17e>
 8104e5c:	a201      	add	r2, pc, #4	; (adr r2, 8104e64 <HAL_SAI_Init+0x120>)
 8104e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e62:	bf00      	nop
 8104e64:	08104e7d 	.word	0x08104e7d
 8104e68:	08104e83 	.word	0x08104e83
 8104e6c:	08104e8b 	.word	0x08104e8b
 8104e70:	08104e93 	.word	0x08104e93
 8104e74:	08104ea3 	.word	0x08104ea3
 8104e78:	08104eb3 	.word	0x08104eb3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8104e7c:	2300      	movs	r3, #0
 8104e7e:	61fb      	str	r3, [r7, #28]
      break;
 8104e80:	e022      	b.n	8104ec8 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8104e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8104e86:	61fb      	str	r3, [r7, #28]
      break;
 8104e88:	e01e      	b.n	8104ec8 <HAL_SAI_Init+0x184>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8104e8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8104e8e:	61fb      	str	r3, [r7, #28]
      break;
 8104e90:	e01a      	b.n	8104ec8 <HAL_SAI_Init+0x184>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8104e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8104e96:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8104e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104e9a:	f043 0301 	orr.w	r3, r3, #1
 8104e9e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8104ea0:	e012      	b.n	8104ec8 <HAL_SAI_Init+0x184>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8104ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8104ea6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8104ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104eaa:	f043 0302 	orr.w	r3, r3, #2
 8104eae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8104eb0:	e00a      	b.n	8104ec8 <HAL_SAI_Init+0x184>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8104eb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8104eb6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8104eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104eba:	f043 0303 	orr.w	r3, r3, #3
 8104ebe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8104ec0:	e002      	b.n	8104ec8 <HAL_SAI_Init+0x184>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8104ec2:	2300      	movs	r3, #0
 8104ec4:	61fb      	str	r3, [r7, #28]
      break;
 8104ec6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8104ec8:	69bb      	ldr	r3, [r7, #24]
 8104eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104ecc:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	6a1b      	ldr	r3, [r3, #32]
 8104ed2:	2b00      	cmp	r3, #0
 8104ed4:	f000 80ba 	beq.w	810504c <HAL_SAI_Init+0x308>
  {
    uint32_t freq = 0;
 8104ed8:	2300      	movs	r3, #0
 8104eda:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	4a35      	ldr	r2, [pc, #212]	; (8104fb8 <HAL_SAI_Init+0x274>)
 8104ee2:	4293      	cmp	r3, r2
 8104ee4:	d004      	beq.n	8104ef0 <HAL_SAI_Init+0x1ac>
 8104ee6:	687b      	ldr	r3, [r7, #4]
 8104ee8:	681b      	ldr	r3, [r3, #0]
 8104eea:	4a35      	ldr	r2, [pc, #212]	; (8104fc0 <HAL_SAI_Init+0x27c>)
 8104eec:	4293      	cmp	r3, r2
 8104eee:	d104      	bne.n	8104efa <HAL_SAI_Init+0x1b6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8104ef0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8104ef4:	f7ff f8b4 	bl	8104060 <HAL_RCCEx_GetPeriphCLKFreq>
 8104ef8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	4a32      	ldr	r2, [pc, #200]	; (8104fc8 <HAL_SAI_Init+0x284>)
 8104f00:	4293      	cmp	r3, r2
 8104f02:	d004      	beq.n	8104f0e <HAL_SAI_Init+0x1ca>
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	4a30      	ldr	r2, [pc, #192]	; (8104fcc <HAL_SAI_Init+0x288>)
 8104f0a:	4293      	cmp	r3, r2
 8104f0c:	d104      	bne.n	8104f18 <HAL_SAI_Init+0x1d4>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8104f0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8104f12:	f7ff f8a5 	bl	8104060 <HAL_RCCEx_GetPeriphCLKFreq>
 8104f16:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8104f18:	687b      	ldr	r3, [r7, #4]
 8104f1a:	681b      	ldr	r3, [r3, #0]
 8104f1c:	4a2d      	ldr	r2, [pc, #180]	; (8104fd4 <HAL_SAI_Init+0x290>)
 8104f1e:	4293      	cmp	r3, r2
 8104f20:	d004      	beq.n	8104f2c <HAL_SAI_Init+0x1e8>
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	4a2c      	ldr	r2, [pc, #176]	; (8104fd8 <HAL_SAI_Init+0x294>)
 8104f28:	4293      	cmp	r3, r2
 8104f2a:	d104      	bne.n	8104f36 <HAL_SAI_Init+0x1f2>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8104f2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8104f30:	f7ff f896 	bl	8104060 <HAL_RCCEx_GetPeriphCLKFreq>
 8104f34:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	681b      	ldr	r3, [r3, #0]
 8104f3a:	4a20      	ldr	r2, [pc, #128]	; (8104fbc <HAL_SAI_Init+0x278>)
 8104f3c:	4293      	cmp	r3, r2
 8104f3e:	d104      	bne.n	8104f4a <HAL_SAI_Init+0x206>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8104f40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8104f44:	f7ff f88c 	bl	8104060 <HAL_RCCEx_GetPeriphCLKFreq>
 8104f48:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8104f4a:	687b      	ldr	r3, [r7, #4]
 8104f4c:	681b      	ldr	r3, [r3, #0]
 8104f4e:	4a24      	ldr	r2, [pc, #144]	; (8104fe0 <HAL_SAI_Init+0x29c>)
 8104f50:	4293      	cmp	r3, r2
 8104f52:	d104      	bne.n	8104f5e <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8104f54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8104f58:	f7ff f882 	bl	8104060 <HAL_RCCEx_GetPeriphCLKFreq>
 8104f5c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8104f5e:	687b      	ldr	r3, [r7, #4]
 8104f60:	699b      	ldr	r3, [r3, #24]
 8104f62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8104f66:	d120      	bne.n	8104faa <HAL_SAI_Init+0x266>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8104f68:	687b      	ldr	r3, [r7, #4]
 8104f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104f6c:	2b04      	cmp	r3, #4
 8104f6e:	d102      	bne.n	8104f76 <HAL_SAI_Init+0x232>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8104f70:	2340      	movs	r3, #64	; 0x40
 8104f72:	60fb      	str	r3, [r7, #12]
 8104f74:	e00a      	b.n	8104f8c <HAL_SAI_Init+0x248>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8104f76:	687b      	ldr	r3, [r7, #4]
 8104f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104f7a:	2b08      	cmp	r3, #8
 8104f7c:	d103      	bne.n	8104f86 <HAL_SAI_Init+0x242>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8104f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8104f82:	60fb      	str	r3, [r7, #12]
 8104f84:	e002      	b.n	8104f8c <HAL_SAI_Init+0x248>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8104f86:	687b      	ldr	r3, [r7, #4]
 8104f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f8a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8104f8c:	697a      	ldr	r2, [r7, #20]
 8104f8e:	4613      	mov	r3, r2
 8104f90:	009b      	lsls	r3, r3, #2
 8104f92:	4413      	add	r3, r2
 8104f94:	005b      	lsls	r3, r3, #1
 8104f96:	4619      	mov	r1, r3
 8104f98:	687b      	ldr	r3, [r7, #4]
 8104f9a:	6a1b      	ldr	r3, [r3, #32]
 8104f9c:	68fa      	ldr	r2, [r7, #12]
 8104f9e:	fb02 f303 	mul.w	r3, r2, r3
 8104fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8104fa6:	613b      	str	r3, [r7, #16]
 8104fa8:	e02f      	b.n	810500a <HAL_SAI_Init+0x2c6>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104fae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104fb2:	d119      	bne.n	8104fe8 <HAL_SAI_Init+0x2a4>
 8104fb4:	2302      	movs	r3, #2
 8104fb6:	e018      	b.n	8104fea <HAL_SAI_Init+0x2a6>
 8104fb8:	40015804 	.word	0x40015804
 8104fbc:	58005404 	.word	0x58005404
 8104fc0:	40015824 	.word	0x40015824
 8104fc4:	40015800 	.word	0x40015800
 8104fc8:	40015c04 	.word	0x40015c04
 8104fcc:	40015c24 	.word	0x40015c24
 8104fd0:	40015c00 	.word	0x40015c00
 8104fd4:	40016004 	.word	0x40016004
 8104fd8:	40016024 	.word	0x40016024
 8104fdc:	40016000 	.word	0x40016000
 8104fe0:	58005424 	.word	0x58005424
 8104fe4:	58005400 	.word	0x58005400
 8104fe8:	2301      	movs	r3, #1
 8104fea:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8104fec:	697a      	ldr	r2, [r7, #20]
 8104fee:	4613      	mov	r3, r2
 8104ff0:	009b      	lsls	r3, r3, #2
 8104ff2:	4413      	add	r3, r2
 8104ff4:	005b      	lsls	r3, r3, #1
 8104ff6:	4619      	mov	r1, r3
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	6a1b      	ldr	r3, [r3, #32]
 8104ffc:	68ba      	ldr	r2, [r7, #8]
 8104ffe:	fb02 f303 	mul.w	r3, r2, r3
 8105002:	021b      	lsls	r3, r3, #8
 8105004:	fbb1 f3f3 	udiv	r3, r1, r3
 8105008:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 810500a:	693b      	ldr	r3, [r7, #16]
 810500c:	4a96      	ldr	r2, [pc, #600]	; (8105268 <HAL_SAI_Init+0x524>)
 810500e:	fba2 2303 	umull	r2, r3, r2, r3
 8105012:	08da      	lsrs	r2, r3, #3
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8105018:	6939      	ldr	r1, [r7, #16]
 810501a:	4b93      	ldr	r3, [pc, #588]	; (8105268 <HAL_SAI_Init+0x524>)
 810501c:	fba3 2301 	umull	r2, r3, r3, r1
 8105020:	08da      	lsrs	r2, r3, #3
 8105022:	4613      	mov	r3, r2
 8105024:	009b      	lsls	r3, r3, #2
 8105026:	4413      	add	r3, r2
 8105028:	005b      	lsls	r3, r3, #1
 810502a:	1aca      	subs	r2, r1, r3
 810502c:	2a08      	cmp	r2, #8
 810502e:	d904      	bls.n	810503a <HAL_SAI_Init+0x2f6>
    {
      hsai->Init.Mckdiv += 1U;
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105034:	1c5a      	adds	r2, r3, #1
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810503e:	2b04      	cmp	r3, #4
 8105040:	d104      	bne.n	810504c <HAL_SAI_Init+0x308>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105046:	085a      	lsrs	r2, r3, #1
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	685b      	ldr	r3, [r3, #4]
 8105050:	2b00      	cmp	r3, #0
 8105052:	d003      	beq.n	810505c <HAL_SAI_Init+0x318>
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	685b      	ldr	r3, [r3, #4]
 8105058:	2b02      	cmp	r3, #2
 810505a:	d109      	bne.n	8105070 <HAL_SAI_Init+0x32c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105060:	2b01      	cmp	r3, #1
 8105062:	d101      	bne.n	8105068 <HAL_SAI_Init+0x324>
 8105064:	2300      	movs	r3, #0
 8105066:	e001      	b.n	810506c <HAL_SAI_Init+0x328>
 8105068:	f44f 7300 	mov.w	r3, #512	; 0x200
 810506c:	623b      	str	r3, [r7, #32]
 810506e:	e008      	b.n	8105082 <HAL_SAI_Init+0x33e>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8105070:	687b      	ldr	r3, [r7, #4]
 8105072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105074:	2b01      	cmp	r3, #1
 8105076:	d102      	bne.n	810507e <HAL_SAI_Init+0x33a>
 8105078:	f44f 7300 	mov.w	r3, #512	; 0x200
 810507c:	e000      	b.n	8105080 <HAL_SAI_Init+0x33c>
 810507e:	2300      	movs	r3, #0
 8105080:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8105082:	f7fc fcbf 	bl	8101a04 <HAL_GetREVID>
 8105086:	4603      	mov	r3, r0
 8105088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810508c:	d331      	bcc.n	81050f2 <HAL_SAI_Init+0x3ae>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810508e:	687b      	ldr	r3, [r7, #4]
 8105090:	681b      	ldr	r3, [r3, #0]
 8105092:	6819      	ldr	r1, [r3, #0]
 8105094:	687b      	ldr	r3, [r7, #4]
 8105096:	681a      	ldr	r2, [r3, #0]
 8105098:	4b74      	ldr	r3, [pc, #464]	; (810526c <HAL_SAI_Init+0x528>)
 810509a:	400b      	ands	r3, r1
 810509c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810509e:	687b      	ldr	r3, [r7, #4]
 81050a0:	681b      	ldr	r3, [r3, #0]
 81050a2:	6819      	ldr	r1, [r3, #0]
 81050a4:	687b      	ldr	r3, [r7, #4]
 81050a6:	685a      	ldr	r2, [r3, #4]
 81050a8:	687b      	ldr	r3, [r7, #4]
 81050aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81050ac:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81050ae:	687b      	ldr	r3, [r7, #4]
 81050b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81050b2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81050b4:	687b      	ldr	r3, [r7, #4]
 81050b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81050b8:	431a      	orrs	r2, r3
 81050ba:	6a3b      	ldr	r3, [r7, #32]
 81050bc:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81050be:	69fb      	ldr	r3, [r7, #28]
 81050c0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81050c2:	687b      	ldr	r3, [r7, #4]
 81050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 81050c6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	695b      	ldr	r3, [r3, #20]
 81050cc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81050ce:	687b      	ldr	r3, [r7, #4]
 81050d0:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81050d2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81050d4:	687b      	ldr	r3, [r7, #4]
 81050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050d8:	051b      	lsls	r3, r3, #20
 81050da:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81050e0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 81050e2:	687b      	ldr	r3, [r7, #4]
 81050e4:	691b      	ldr	r3, [r3, #16]
 81050e6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	681b      	ldr	r3, [r3, #0]
 81050ec:	430a      	orrs	r2, r1
 81050ee:	601a      	str	r2, [r3, #0]
 81050f0:	e02d      	b.n	810514e <HAL_SAI_Init+0x40a>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	681b      	ldr	r3, [r3, #0]
 81050f6:	6819      	ldr	r1, [r3, #0]
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	681a      	ldr	r2, [r3, #0]
 81050fc:	4b5c      	ldr	r3, [pc, #368]	; (8105270 <HAL_SAI_Init+0x52c>)
 81050fe:	400b      	ands	r3, r1
 8105100:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	681b      	ldr	r3, [r3, #0]
 8105106:	6819      	ldr	r1, [r3, #0]
 8105108:	687b      	ldr	r3, [r7, #4]
 810510a:	685a      	ldr	r2, [r3, #4]
 810510c:	687b      	ldr	r3, [r7, #4]
 810510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105110:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105112:	687b      	ldr	r3, [r7, #4]
 8105114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105116:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8105118:	687b      	ldr	r3, [r7, #4]
 810511a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810511c:	431a      	orrs	r2, r3
 810511e:	6a3b      	ldr	r3, [r7, #32]
 8105120:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8105122:	69fb      	ldr	r3, [r7, #28]
 8105124:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105126:	687b      	ldr	r3, [r7, #4]
 8105128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 810512a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	695b      	ldr	r3, [r3, #20]
 8105130:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8105136:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105138:	687b      	ldr	r3, [r7, #4]
 810513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810513c:	051b      	lsls	r3, r3, #20
 810513e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8105140:	687b      	ldr	r3, [r7, #4]
 8105142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8105144:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	681b      	ldr	r3, [r3, #0]
 810514a:	430a      	orrs	r2, r1
 810514c:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 810514e:	687b      	ldr	r3, [r7, #4]
 8105150:	681b      	ldr	r3, [r3, #0]
 8105152:	685b      	ldr	r3, [r3, #4]
 8105154:	687a      	ldr	r2, [r7, #4]
 8105156:	6812      	ldr	r2, [r2, #0]
 8105158:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 810515c:	f023 030f 	bic.w	r3, r3, #15
 8105160:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8105162:	687b      	ldr	r3, [r7, #4]
 8105164:	681b      	ldr	r3, [r3, #0]
 8105166:	6859      	ldr	r1, [r3, #4]
 8105168:	687b      	ldr	r3, [r7, #4]
 810516a:	69da      	ldr	r2, [r3, #28]
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105170:	431a      	orrs	r2, r3
 8105172:	687b      	ldr	r3, [r7, #4]
 8105174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105176:	431a      	orrs	r2, r3
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	681b      	ldr	r3, [r3, #0]
 810517c:	430a      	orrs	r2, r1
 810517e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8105180:	687b      	ldr	r3, [r7, #4]
 8105182:	681b      	ldr	r3, [r3, #0]
 8105184:	6899      	ldr	r1, [r3, #8]
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	681a      	ldr	r2, [r3, #0]
 810518a:	4b3a      	ldr	r3, [pc, #232]	; (8105274 <HAL_SAI_Init+0x530>)
 810518c:	400b      	ands	r3, r1
 810518e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	6899      	ldr	r1, [r3, #8]
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810519a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 810519c:	687b      	ldr	r3, [r7, #4]
 810519e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81051a0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 81051a2:	687b      	ldr	r3, [r7, #4]
 81051a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 81051a6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 81051a8:	687b      	ldr	r3, [r7, #4]
 81051aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 81051ac:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81051b2:	3b01      	subs	r3, #1
 81051b4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 81051b6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	430a      	orrs	r2, r1
 81051be:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 81051c0:	687b      	ldr	r3, [r7, #4]
 81051c2:	681b      	ldr	r3, [r3, #0]
 81051c4:	68d9      	ldr	r1, [r3, #12]
 81051c6:	687b      	ldr	r3, [r7, #4]
 81051c8:	681a      	ldr	r2, [r3, #0]
 81051ca:	f24f 0320 	movw	r3, #61472	; 0xf020
 81051ce:	400b      	ands	r3, r1
 81051d0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	681b      	ldr	r3, [r3, #0]
 81051d6:	68d9      	ldr	r1, [r3, #12]
 81051d8:	687b      	ldr	r3, [r7, #4]
 81051da:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81051e0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81051e2:	687b      	ldr	r3, [r7, #4]
 81051e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81051e6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81051e8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81051ee:	3b01      	subs	r3, #1
 81051f0:	021b      	lsls	r3, r3, #8
 81051f2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81051f4:	687b      	ldr	r3, [r7, #4]
 81051f6:	681b      	ldr	r3, [r3, #0]
 81051f8:	430a      	orrs	r2, r1
 81051fa:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	681b      	ldr	r3, [r3, #0]
 8105200:	4a1d      	ldr	r2, [pc, #116]	; (8105278 <HAL_SAI_Init+0x534>)
 8105202:	4293      	cmp	r3, r2
 8105204:	d004      	beq.n	8105210 <HAL_SAI_Init+0x4cc>
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	681b      	ldr	r3, [r3, #0]
 810520a:	4a1c      	ldr	r2, [pc, #112]	; (810527c <HAL_SAI_Init+0x538>)
 810520c:	4293      	cmp	r3, r2
 810520e:	d119      	bne.n	8105244 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8105210:	69bb      	ldr	r3, [r7, #24]
 8105212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105214:	f023 0201 	bic.w	r2, r3, #1
 8105218:	69bb      	ldr	r3, [r7, #24]
 810521a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8105222:	2b01      	cmp	r3, #1
 8105224:	d10e      	bne.n	8105244 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 810522a:	687b      	ldr	r3, [r7, #4]
 810522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810522e:	3b01      	subs	r3, #1
 8105230:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8105232:	431a      	orrs	r2, r3
 8105234:	69bb      	ldr	r3, [r7, #24]
 8105236:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8105238:	69bb      	ldr	r3, [r7, #24]
 810523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810523c:	f043 0201 	orr.w	r2, r3, #1
 8105240:	69bb      	ldr	r3, [r7, #24]
 8105242:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8105244:	687b      	ldr	r3, [r7, #4]
 8105246:	2200      	movs	r2, #0
 8105248:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	2201      	movs	r2, #1
 8105250:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	2200      	movs	r2, #0
 8105258:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 810525c:	2300      	movs	r3, #0
}
 810525e:	4618      	mov	r0, r3
 8105260:	3728      	adds	r7, #40	; 0x28
 8105262:	46bd      	mov	sp, r7
 8105264:	bd80      	pop	{r7, pc}
 8105266:	bf00      	nop
 8105268:	cccccccd 	.word	0xcccccccd
 810526c:	f005c010 	.word	0xf005c010
 8105270:	f805c010 	.word	0xf805c010
 8105274:	fff88000 	.word	0xfff88000
 8105278:	40015804 	.word	0x40015804
 810527c:	58005404 	.word	0x58005404

08105280 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8105280:	b480      	push	{r7}
 8105282:	b085      	sub	sp, #20
 8105284:	af00      	add	r7, sp, #0
 8105286:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8105288:	4b18      	ldr	r3, [pc, #96]	; (81052ec <SAI_Disable+0x6c>)
 810528a:	681b      	ldr	r3, [r3, #0]
 810528c:	4a18      	ldr	r2, [pc, #96]	; (81052f0 <SAI_Disable+0x70>)
 810528e:	fba2 2303 	umull	r2, r3, r2, r3
 8105292:	0b1b      	lsrs	r3, r3, #12
 8105294:	009b      	lsls	r3, r3, #2
 8105296:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8105298:	2300      	movs	r3, #0
 810529a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	681b      	ldr	r3, [r3, #0]
 81052a0:	681a      	ldr	r2, [r3, #0]
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	681b      	ldr	r3, [r3, #0]
 81052a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 81052aa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 81052ac:	68fb      	ldr	r3, [r7, #12]
 81052ae:	2b00      	cmp	r3, #0
 81052b0:	d10a      	bne.n	81052c8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 81052b2:	687b      	ldr	r3, [r7, #4]
 81052b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81052b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 81052c2:	2303      	movs	r3, #3
 81052c4:	72fb      	strb	r3, [r7, #11]
      break;
 81052c6:	e009      	b.n	81052dc <SAI_Disable+0x5c>
    }
    count--;
 81052c8:	68fb      	ldr	r3, [r7, #12]
 81052ca:	3b01      	subs	r3, #1
 81052cc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	681b      	ldr	r3, [r3, #0]
 81052d2:	681b      	ldr	r3, [r3, #0]
 81052d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81052d8:	2b00      	cmp	r3, #0
 81052da:	d1e7      	bne.n	81052ac <SAI_Disable+0x2c>

  return status;
 81052dc:	7afb      	ldrb	r3, [r7, #11]
}
 81052de:	4618      	mov	r0, r3
 81052e0:	3714      	adds	r7, #20
 81052e2:	46bd      	mov	sp, r7
 81052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052e8:	4770      	bx	lr
 81052ea:	bf00      	nop
 81052ec:	10000000 	.word	0x10000000
 81052f0:	95cbec1b 	.word	0x95cbec1b

081052f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 81052f4:	b580      	push	{r7, lr}
 81052f6:	b082      	sub	sp, #8
 81052f8:	af00      	add	r7, sp, #0
 81052fa:	6078      	str	r0, [r7, #4]
 81052fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 81052fe:	687b      	ldr	r3, [r7, #4]
 8105300:	2b00      	cmp	r3, #0
 8105302:	d101      	bne.n	8105308 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8105304:	2301      	movs	r3, #1
 8105306:	e02b      	b.n	8105360 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 810530e:	b2db      	uxtb	r3, r3
 8105310:	2b00      	cmp	r3, #0
 8105312:	d106      	bne.n	8105322 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8105314:	687b      	ldr	r3, [r7, #4]
 8105316:	2200      	movs	r2, #0
 8105318:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 810531c:	6878      	ldr	r0, [r7, #4]
 810531e:	f7fc f9c9 	bl	81016b4 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8105322:	687b      	ldr	r3, [r7, #4]
 8105324:	2202      	movs	r2, #2
 8105326:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 810532a:	687b      	ldr	r3, [r7, #4]
 810532c:	681a      	ldr	r2, [r3, #0]
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	3304      	adds	r3, #4
 8105332:	4619      	mov	r1, r3
 8105334:	4610      	mov	r0, r2
 8105336:	f001 f8a1 	bl	810647c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	6818      	ldr	r0, [r3, #0]
 810533e:	687b      	ldr	r3, [r7, #4]
 8105340:	685b      	ldr	r3, [r3, #4]
 8105342:	461a      	mov	r2, r3
 8105344:	6839      	ldr	r1, [r7, #0]
 8105346:	f001 f8f6 	bl	8106536 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 810534a:	4b07      	ldr	r3, [pc, #28]	; (8105368 <HAL_SDRAM_Init+0x74>)
 810534c:	681b      	ldr	r3, [r3, #0]
 810534e:	4a06      	ldr	r2, [pc, #24]	; (8105368 <HAL_SDRAM_Init+0x74>)
 8105350:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8105354:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	2201      	movs	r2, #1
 810535a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 810535e:	2300      	movs	r3, #0
}
 8105360:	4618      	mov	r0, r3
 8105362:	3708      	adds	r7, #8
 8105364:	46bd      	mov	sp, r7
 8105366:	bd80      	pop	{r7, pc}
 8105368:	52004000 	.word	0x52004000

0810536c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810536c:	b580      	push	{r7, lr}
 810536e:	b082      	sub	sp, #8
 8105370:	af00      	add	r7, sp, #0
 8105372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	2b00      	cmp	r3, #0
 8105378:	d101      	bne.n	810537e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810537a:	2301      	movs	r3, #1
 810537c:	e042      	b.n	8105404 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105384:	2b00      	cmp	r3, #0
 8105386:	d106      	bne.n	8105396 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105388:	687b      	ldr	r3, [r7, #4]
 810538a:	2200      	movs	r2, #0
 810538c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8105390:	6878      	ldr	r0, [r7, #4]
 8105392:	f7fc f86b 	bl	810146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8105396:	687b      	ldr	r3, [r7, #4]
 8105398:	2224      	movs	r2, #36	; 0x24
 810539a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 810539e:	687b      	ldr	r3, [r7, #4]
 81053a0:	681b      	ldr	r3, [r3, #0]
 81053a2:	681a      	ldr	r2, [r3, #0]
 81053a4:	687b      	ldr	r3, [r7, #4]
 81053a6:	681b      	ldr	r3, [r3, #0]
 81053a8:	f022 0201 	bic.w	r2, r2, #1
 81053ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81053ae:	6878      	ldr	r0, [r7, #4]
 81053b0:	f000 f82c 	bl	810540c <UART_SetConfig>
 81053b4:	4603      	mov	r3, r0
 81053b6:	2b01      	cmp	r3, #1
 81053b8:	d101      	bne.n	81053be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81053ba:	2301      	movs	r3, #1
 81053bc:	e022      	b.n	8105404 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053c2:	2b00      	cmp	r3, #0
 81053c4:	d002      	beq.n	81053cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81053c6:	6878      	ldr	r0, [r7, #4]
 81053c8:	f000 fdd0 	bl	8105f6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81053cc:	687b      	ldr	r3, [r7, #4]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	685a      	ldr	r2, [r3, #4]
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	681b      	ldr	r3, [r3, #0]
 81053d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81053da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81053dc:	687b      	ldr	r3, [r7, #4]
 81053de:	681b      	ldr	r3, [r3, #0]
 81053e0:	689a      	ldr	r2, [r3, #8]
 81053e2:	687b      	ldr	r3, [r7, #4]
 81053e4:	681b      	ldr	r3, [r3, #0]
 81053e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81053ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81053ec:	687b      	ldr	r3, [r7, #4]
 81053ee:	681b      	ldr	r3, [r3, #0]
 81053f0:	681a      	ldr	r2, [r3, #0]
 81053f2:	687b      	ldr	r3, [r7, #4]
 81053f4:	681b      	ldr	r3, [r3, #0]
 81053f6:	f042 0201 	orr.w	r2, r2, #1
 81053fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81053fc:	6878      	ldr	r0, [r7, #4]
 81053fe:	f000 fe57 	bl	81060b0 <UART_CheckIdleState>
 8105402:	4603      	mov	r3, r0
}
 8105404:	4618      	mov	r0, r3
 8105406:	3708      	adds	r7, #8
 8105408:	46bd      	mov	sp, r7
 810540a:	bd80      	pop	{r7, pc}

0810540c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810540c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8105410:	b08e      	sub	sp, #56	; 0x38
 8105412:	af00      	add	r7, sp, #0
 8105414:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8105416:	2300      	movs	r3, #0
 8105418:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810541c:	687b      	ldr	r3, [r7, #4]
 810541e:	689a      	ldr	r2, [r3, #8]
 8105420:	687b      	ldr	r3, [r7, #4]
 8105422:	691b      	ldr	r3, [r3, #16]
 8105424:	431a      	orrs	r2, r3
 8105426:	687b      	ldr	r3, [r7, #4]
 8105428:	695b      	ldr	r3, [r3, #20]
 810542a:	431a      	orrs	r2, r3
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	69db      	ldr	r3, [r3, #28]
 8105430:	4313      	orrs	r3, r2
 8105432:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8105434:	687b      	ldr	r3, [r7, #4]
 8105436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810543a:	4313      	orrs	r3, r2
 810543c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810543e:	687b      	ldr	r3, [r7, #4]
 8105440:	681b      	ldr	r3, [r3, #0]
 8105442:	681a      	ldr	r2, [r3, #0]
 8105444:	4bc2      	ldr	r3, [pc, #776]	; (8105750 <UART_SetConfig+0x344>)
 8105446:	4013      	ands	r3, r2
 8105448:	687a      	ldr	r2, [r7, #4]
 810544a:	6812      	ldr	r2, [r2, #0]
 810544c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810544e:	430b      	orrs	r3, r1
 8105450:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8105452:	687b      	ldr	r3, [r7, #4]
 8105454:	681b      	ldr	r3, [r3, #0]
 8105456:	685b      	ldr	r3, [r3, #4]
 8105458:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810545c:	687b      	ldr	r3, [r7, #4]
 810545e:	68da      	ldr	r2, [r3, #12]
 8105460:	687b      	ldr	r3, [r7, #4]
 8105462:	681b      	ldr	r3, [r3, #0]
 8105464:	430a      	orrs	r2, r1
 8105466:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	699b      	ldr	r3, [r3, #24]
 810546c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	4ab8      	ldr	r2, [pc, #736]	; (8105754 <UART_SetConfig+0x348>)
 8105474:	4293      	cmp	r3, r2
 8105476:	d004      	beq.n	8105482 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	6a1b      	ldr	r3, [r3, #32]
 810547c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810547e:	4313      	orrs	r3, r2
 8105480:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	689b      	ldr	r3, [r3, #8]
 8105488:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810548c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8105490:	687a      	ldr	r2, [r7, #4]
 8105492:	6812      	ldr	r2, [r2, #0]
 8105494:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8105496:	430b      	orrs	r3, r1
 8105498:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	681b      	ldr	r3, [r3, #0]
 810549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054a0:	f023 010f 	bic.w	r1, r3, #15
 81054a4:	687b      	ldr	r3, [r7, #4]
 81054a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	681b      	ldr	r3, [r3, #0]
 81054ac:	430a      	orrs	r2, r1
 81054ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	681b      	ldr	r3, [r3, #0]
 81054b4:	4aa8      	ldr	r2, [pc, #672]	; (8105758 <UART_SetConfig+0x34c>)
 81054b6:	4293      	cmp	r3, r2
 81054b8:	d177      	bne.n	81055aa <UART_SetConfig+0x19e>
 81054ba:	4ba8      	ldr	r3, [pc, #672]	; (810575c <UART_SetConfig+0x350>)
 81054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81054be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81054c2:	2b28      	cmp	r3, #40	; 0x28
 81054c4:	d86c      	bhi.n	81055a0 <UART_SetConfig+0x194>
 81054c6:	a201      	add	r2, pc, #4	; (adr r2, 81054cc <UART_SetConfig+0xc0>)
 81054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054cc:	08105571 	.word	0x08105571
 81054d0:	081055a1 	.word	0x081055a1
 81054d4:	081055a1 	.word	0x081055a1
 81054d8:	081055a1 	.word	0x081055a1
 81054dc:	081055a1 	.word	0x081055a1
 81054e0:	081055a1 	.word	0x081055a1
 81054e4:	081055a1 	.word	0x081055a1
 81054e8:	081055a1 	.word	0x081055a1
 81054ec:	08105579 	.word	0x08105579
 81054f0:	081055a1 	.word	0x081055a1
 81054f4:	081055a1 	.word	0x081055a1
 81054f8:	081055a1 	.word	0x081055a1
 81054fc:	081055a1 	.word	0x081055a1
 8105500:	081055a1 	.word	0x081055a1
 8105504:	081055a1 	.word	0x081055a1
 8105508:	081055a1 	.word	0x081055a1
 810550c:	08105581 	.word	0x08105581
 8105510:	081055a1 	.word	0x081055a1
 8105514:	081055a1 	.word	0x081055a1
 8105518:	081055a1 	.word	0x081055a1
 810551c:	081055a1 	.word	0x081055a1
 8105520:	081055a1 	.word	0x081055a1
 8105524:	081055a1 	.word	0x081055a1
 8105528:	081055a1 	.word	0x081055a1
 810552c:	08105589 	.word	0x08105589
 8105530:	081055a1 	.word	0x081055a1
 8105534:	081055a1 	.word	0x081055a1
 8105538:	081055a1 	.word	0x081055a1
 810553c:	081055a1 	.word	0x081055a1
 8105540:	081055a1 	.word	0x081055a1
 8105544:	081055a1 	.word	0x081055a1
 8105548:	081055a1 	.word	0x081055a1
 810554c:	08105591 	.word	0x08105591
 8105550:	081055a1 	.word	0x081055a1
 8105554:	081055a1 	.word	0x081055a1
 8105558:	081055a1 	.word	0x081055a1
 810555c:	081055a1 	.word	0x081055a1
 8105560:	081055a1 	.word	0x081055a1
 8105564:	081055a1 	.word	0x081055a1
 8105568:	081055a1 	.word	0x081055a1
 810556c:	08105599 	.word	0x08105599
 8105570:	2301      	movs	r3, #1
 8105572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105576:	e231      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105578:	2304      	movs	r3, #4
 810557a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810557e:	e22d      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105580:	2308      	movs	r3, #8
 8105582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105586:	e229      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105588:	2310      	movs	r3, #16
 810558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810558e:	e225      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105590:	2320      	movs	r3, #32
 8105592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105596:	e221      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105598:	2340      	movs	r3, #64	; 0x40
 810559a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810559e:	e21d      	b.n	81059dc <UART_SetConfig+0x5d0>
 81055a0:	2380      	movs	r3, #128	; 0x80
 81055a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81055a6:	bf00      	nop
 81055a8:	e218      	b.n	81059dc <UART_SetConfig+0x5d0>
 81055aa:	687b      	ldr	r3, [r7, #4]
 81055ac:	681b      	ldr	r3, [r3, #0]
 81055ae:	4a6c      	ldr	r2, [pc, #432]	; (8105760 <UART_SetConfig+0x354>)
 81055b0:	4293      	cmp	r3, r2
 81055b2:	d132      	bne.n	810561a <UART_SetConfig+0x20e>
 81055b4:	4b69      	ldr	r3, [pc, #420]	; (810575c <UART_SetConfig+0x350>)
 81055b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81055b8:	f003 0307 	and.w	r3, r3, #7
 81055bc:	2b05      	cmp	r3, #5
 81055be:	d827      	bhi.n	8105610 <UART_SetConfig+0x204>
 81055c0:	a201      	add	r2, pc, #4	; (adr r2, 81055c8 <UART_SetConfig+0x1bc>)
 81055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81055c6:	bf00      	nop
 81055c8:	081055e1 	.word	0x081055e1
 81055cc:	081055e9 	.word	0x081055e9
 81055d0:	081055f1 	.word	0x081055f1
 81055d4:	081055f9 	.word	0x081055f9
 81055d8:	08105601 	.word	0x08105601
 81055dc:	08105609 	.word	0x08105609
 81055e0:	2300      	movs	r3, #0
 81055e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81055e6:	e1f9      	b.n	81059dc <UART_SetConfig+0x5d0>
 81055e8:	2304      	movs	r3, #4
 81055ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81055ee:	e1f5      	b.n	81059dc <UART_SetConfig+0x5d0>
 81055f0:	2308      	movs	r3, #8
 81055f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81055f6:	e1f1      	b.n	81059dc <UART_SetConfig+0x5d0>
 81055f8:	2310      	movs	r3, #16
 81055fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81055fe:	e1ed      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105600:	2320      	movs	r3, #32
 8105602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105606:	e1e9      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105608:	2340      	movs	r3, #64	; 0x40
 810560a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810560e:	e1e5      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105610:	2380      	movs	r3, #128	; 0x80
 8105612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105616:	bf00      	nop
 8105618:	e1e0      	b.n	81059dc <UART_SetConfig+0x5d0>
 810561a:	687b      	ldr	r3, [r7, #4]
 810561c:	681b      	ldr	r3, [r3, #0]
 810561e:	4a51      	ldr	r2, [pc, #324]	; (8105764 <UART_SetConfig+0x358>)
 8105620:	4293      	cmp	r3, r2
 8105622:	d132      	bne.n	810568a <UART_SetConfig+0x27e>
 8105624:	4b4d      	ldr	r3, [pc, #308]	; (810575c <UART_SetConfig+0x350>)
 8105626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105628:	f003 0307 	and.w	r3, r3, #7
 810562c:	2b05      	cmp	r3, #5
 810562e:	d827      	bhi.n	8105680 <UART_SetConfig+0x274>
 8105630:	a201      	add	r2, pc, #4	; (adr r2, 8105638 <UART_SetConfig+0x22c>)
 8105632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105636:	bf00      	nop
 8105638:	08105651 	.word	0x08105651
 810563c:	08105659 	.word	0x08105659
 8105640:	08105661 	.word	0x08105661
 8105644:	08105669 	.word	0x08105669
 8105648:	08105671 	.word	0x08105671
 810564c:	08105679 	.word	0x08105679
 8105650:	2300      	movs	r3, #0
 8105652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105656:	e1c1      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105658:	2304      	movs	r3, #4
 810565a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810565e:	e1bd      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105660:	2308      	movs	r3, #8
 8105662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105666:	e1b9      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105668:	2310      	movs	r3, #16
 810566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810566e:	e1b5      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105670:	2320      	movs	r3, #32
 8105672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105676:	e1b1      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105678:	2340      	movs	r3, #64	; 0x40
 810567a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810567e:	e1ad      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105680:	2380      	movs	r3, #128	; 0x80
 8105682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105686:	bf00      	nop
 8105688:	e1a8      	b.n	81059dc <UART_SetConfig+0x5d0>
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	681b      	ldr	r3, [r3, #0]
 810568e:	4a36      	ldr	r2, [pc, #216]	; (8105768 <UART_SetConfig+0x35c>)
 8105690:	4293      	cmp	r3, r2
 8105692:	d132      	bne.n	81056fa <UART_SetConfig+0x2ee>
 8105694:	4b31      	ldr	r3, [pc, #196]	; (810575c <UART_SetConfig+0x350>)
 8105696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105698:	f003 0307 	and.w	r3, r3, #7
 810569c:	2b05      	cmp	r3, #5
 810569e:	d827      	bhi.n	81056f0 <UART_SetConfig+0x2e4>
 81056a0:	a201      	add	r2, pc, #4	; (adr r2, 81056a8 <UART_SetConfig+0x29c>)
 81056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81056a6:	bf00      	nop
 81056a8:	081056c1 	.word	0x081056c1
 81056ac:	081056c9 	.word	0x081056c9
 81056b0:	081056d1 	.word	0x081056d1
 81056b4:	081056d9 	.word	0x081056d9
 81056b8:	081056e1 	.word	0x081056e1
 81056bc:	081056e9 	.word	0x081056e9
 81056c0:	2300      	movs	r3, #0
 81056c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81056c6:	e189      	b.n	81059dc <UART_SetConfig+0x5d0>
 81056c8:	2304      	movs	r3, #4
 81056ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81056ce:	e185      	b.n	81059dc <UART_SetConfig+0x5d0>
 81056d0:	2308      	movs	r3, #8
 81056d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81056d6:	e181      	b.n	81059dc <UART_SetConfig+0x5d0>
 81056d8:	2310      	movs	r3, #16
 81056da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81056de:	e17d      	b.n	81059dc <UART_SetConfig+0x5d0>
 81056e0:	2320      	movs	r3, #32
 81056e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81056e6:	e179      	b.n	81059dc <UART_SetConfig+0x5d0>
 81056e8:	2340      	movs	r3, #64	; 0x40
 81056ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81056ee:	e175      	b.n	81059dc <UART_SetConfig+0x5d0>
 81056f0:	2380      	movs	r3, #128	; 0x80
 81056f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81056f6:	bf00      	nop
 81056f8:	e170      	b.n	81059dc <UART_SetConfig+0x5d0>
 81056fa:	687b      	ldr	r3, [r7, #4]
 81056fc:	681b      	ldr	r3, [r3, #0]
 81056fe:	4a1b      	ldr	r2, [pc, #108]	; (810576c <UART_SetConfig+0x360>)
 8105700:	4293      	cmp	r3, r2
 8105702:	d142      	bne.n	810578a <UART_SetConfig+0x37e>
 8105704:	4b15      	ldr	r3, [pc, #84]	; (810575c <UART_SetConfig+0x350>)
 8105706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105708:	f003 0307 	and.w	r3, r3, #7
 810570c:	2b05      	cmp	r3, #5
 810570e:	d837      	bhi.n	8105780 <UART_SetConfig+0x374>
 8105710:	a201      	add	r2, pc, #4	; (adr r2, 8105718 <UART_SetConfig+0x30c>)
 8105712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105716:	bf00      	nop
 8105718:	08105731 	.word	0x08105731
 810571c:	08105739 	.word	0x08105739
 8105720:	08105741 	.word	0x08105741
 8105724:	08105749 	.word	0x08105749
 8105728:	08105771 	.word	0x08105771
 810572c:	08105779 	.word	0x08105779
 8105730:	2300      	movs	r3, #0
 8105732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105736:	e151      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105738:	2304      	movs	r3, #4
 810573a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810573e:	e14d      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105740:	2308      	movs	r3, #8
 8105742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105746:	e149      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105748:	2310      	movs	r3, #16
 810574a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810574e:	e145      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105750:	cfff69f3 	.word	0xcfff69f3
 8105754:	58000c00 	.word	0x58000c00
 8105758:	40011000 	.word	0x40011000
 810575c:	58024400 	.word	0x58024400
 8105760:	40004400 	.word	0x40004400
 8105764:	40004800 	.word	0x40004800
 8105768:	40004c00 	.word	0x40004c00
 810576c:	40005000 	.word	0x40005000
 8105770:	2320      	movs	r3, #32
 8105772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105776:	e131      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105778:	2340      	movs	r3, #64	; 0x40
 810577a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810577e:	e12d      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105780:	2380      	movs	r3, #128	; 0x80
 8105782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105786:	bf00      	nop
 8105788:	e128      	b.n	81059dc <UART_SetConfig+0x5d0>
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	681b      	ldr	r3, [r3, #0]
 810578e:	4ab6      	ldr	r2, [pc, #728]	; (8105a68 <UART_SetConfig+0x65c>)
 8105790:	4293      	cmp	r3, r2
 8105792:	d178      	bne.n	8105886 <UART_SetConfig+0x47a>
 8105794:	4bb5      	ldr	r3, [pc, #724]	; (8105a6c <UART_SetConfig+0x660>)
 8105796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105798:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810579c:	2b28      	cmp	r3, #40	; 0x28
 810579e:	d86d      	bhi.n	810587c <UART_SetConfig+0x470>
 81057a0:	a201      	add	r2, pc, #4	; (adr r2, 81057a8 <UART_SetConfig+0x39c>)
 81057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81057a6:	bf00      	nop
 81057a8:	0810584d 	.word	0x0810584d
 81057ac:	0810587d 	.word	0x0810587d
 81057b0:	0810587d 	.word	0x0810587d
 81057b4:	0810587d 	.word	0x0810587d
 81057b8:	0810587d 	.word	0x0810587d
 81057bc:	0810587d 	.word	0x0810587d
 81057c0:	0810587d 	.word	0x0810587d
 81057c4:	0810587d 	.word	0x0810587d
 81057c8:	08105855 	.word	0x08105855
 81057cc:	0810587d 	.word	0x0810587d
 81057d0:	0810587d 	.word	0x0810587d
 81057d4:	0810587d 	.word	0x0810587d
 81057d8:	0810587d 	.word	0x0810587d
 81057dc:	0810587d 	.word	0x0810587d
 81057e0:	0810587d 	.word	0x0810587d
 81057e4:	0810587d 	.word	0x0810587d
 81057e8:	0810585d 	.word	0x0810585d
 81057ec:	0810587d 	.word	0x0810587d
 81057f0:	0810587d 	.word	0x0810587d
 81057f4:	0810587d 	.word	0x0810587d
 81057f8:	0810587d 	.word	0x0810587d
 81057fc:	0810587d 	.word	0x0810587d
 8105800:	0810587d 	.word	0x0810587d
 8105804:	0810587d 	.word	0x0810587d
 8105808:	08105865 	.word	0x08105865
 810580c:	0810587d 	.word	0x0810587d
 8105810:	0810587d 	.word	0x0810587d
 8105814:	0810587d 	.word	0x0810587d
 8105818:	0810587d 	.word	0x0810587d
 810581c:	0810587d 	.word	0x0810587d
 8105820:	0810587d 	.word	0x0810587d
 8105824:	0810587d 	.word	0x0810587d
 8105828:	0810586d 	.word	0x0810586d
 810582c:	0810587d 	.word	0x0810587d
 8105830:	0810587d 	.word	0x0810587d
 8105834:	0810587d 	.word	0x0810587d
 8105838:	0810587d 	.word	0x0810587d
 810583c:	0810587d 	.word	0x0810587d
 8105840:	0810587d 	.word	0x0810587d
 8105844:	0810587d 	.word	0x0810587d
 8105848:	08105875 	.word	0x08105875
 810584c:	2301      	movs	r3, #1
 810584e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105852:	e0c3      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105854:	2304      	movs	r3, #4
 8105856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810585a:	e0bf      	b.n	81059dc <UART_SetConfig+0x5d0>
 810585c:	2308      	movs	r3, #8
 810585e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105862:	e0bb      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105864:	2310      	movs	r3, #16
 8105866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810586a:	e0b7      	b.n	81059dc <UART_SetConfig+0x5d0>
 810586c:	2320      	movs	r3, #32
 810586e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105872:	e0b3      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105874:	2340      	movs	r3, #64	; 0x40
 8105876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810587a:	e0af      	b.n	81059dc <UART_SetConfig+0x5d0>
 810587c:	2380      	movs	r3, #128	; 0x80
 810587e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105882:	bf00      	nop
 8105884:	e0aa      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105886:	687b      	ldr	r3, [r7, #4]
 8105888:	681b      	ldr	r3, [r3, #0]
 810588a:	4a79      	ldr	r2, [pc, #484]	; (8105a70 <UART_SetConfig+0x664>)
 810588c:	4293      	cmp	r3, r2
 810588e:	d132      	bne.n	81058f6 <UART_SetConfig+0x4ea>
 8105890:	4b76      	ldr	r3, [pc, #472]	; (8105a6c <UART_SetConfig+0x660>)
 8105892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105894:	f003 0307 	and.w	r3, r3, #7
 8105898:	2b05      	cmp	r3, #5
 810589a:	d827      	bhi.n	81058ec <UART_SetConfig+0x4e0>
 810589c:	a201      	add	r2, pc, #4	; (adr r2, 81058a4 <UART_SetConfig+0x498>)
 810589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81058a2:	bf00      	nop
 81058a4:	081058bd 	.word	0x081058bd
 81058a8:	081058c5 	.word	0x081058c5
 81058ac:	081058cd 	.word	0x081058cd
 81058b0:	081058d5 	.word	0x081058d5
 81058b4:	081058dd 	.word	0x081058dd
 81058b8:	081058e5 	.word	0x081058e5
 81058bc:	2300      	movs	r3, #0
 81058be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81058c2:	e08b      	b.n	81059dc <UART_SetConfig+0x5d0>
 81058c4:	2304      	movs	r3, #4
 81058c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81058ca:	e087      	b.n	81059dc <UART_SetConfig+0x5d0>
 81058cc:	2308      	movs	r3, #8
 81058ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81058d2:	e083      	b.n	81059dc <UART_SetConfig+0x5d0>
 81058d4:	2310      	movs	r3, #16
 81058d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81058da:	e07f      	b.n	81059dc <UART_SetConfig+0x5d0>
 81058dc:	2320      	movs	r3, #32
 81058de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81058e2:	e07b      	b.n	81059dc <UART_SetConfig+0x5d0>
 81058e4:	2340      	movs	r3, #64	; 0x40
 81058e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81058ea:	e077      	b.n	81059dc <UART_SetConfig+0x5d0>
 81058ec:	2380      	movs	r3, #128	; 0x80
 81058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81058f2:	bf00      	nop
 81058f4:	e072      	b.n	81059dc <UART_SetConfig+0x5d0>
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	4a5e      	ldr	r2, [pc, #376]	; (8105a74 <UART_SetConfig+0x668>)
 81058fc:	4293      	cmp	r3, r2
 81058fe:	d132      	bne.n	8105966 <UART_SetConfig+0x55a>
 8105900:	4b5a      	ldr	r3, [pc, #360]	; (8105a6c <UART_SetConfig+0x660>)
 8105902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105904:	f003 0307 	and.w	r3, r3, #7
 8105908:	2b05      	cmp	r3, #5
 810590a:	d827      	bhi.n	810595c <UART_SetConfig+0x550>
 810590c:	a201      	add	r2, pc, #4	; (adr r2, 8105914 <UART_SetConfig+0x508>)
 810590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105912:	bf00      	nop
 8105914:	0810592d 	.word	0x0810592d
 8105918:	08105935 	.word	0x08105935
 810591c:	0810593d 	.word	0x0810593d
 8105920:	08105945 	.word	0x08105945
 8105924:	0810594d 	.word	0x0810594d
 8105928:	08105955 	.word	0x08105955
 810592c:	2300      	movs	r3, #0
 810592e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105932:	e053      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105934:	2304      	movs	r3, #4
 8105936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810593a:	e04f      	b.n	81059dc <UART_SetConfig+0x5d0>
 810593c:	2308      	movs	r3, #8
 810593e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105942:	e04b      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105944:	2310      	movs	r3, #16
 8105946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810594a:	e047      	b.n	81059dc <UART_SetConfig+0x5d0>
 810594c:	2320      	movs	r3, #32
 810594e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105952:	e043      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105954:	2340      	movs	r3, #64	; 0x40
 8105956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810595a:	e03f      	b.n	81059dc <UART_SetConfig+0x5d0>
 810595c:	2380      	movs	r3, #128	; 0x80
 810595e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105962:	bf00      	nop
 8105964:	e03a      	b.n	81059dc <UART_SetConfig+0x5d0>
 8105966:	687b      	ldr	r3, [r7, #4]
 8105968:	681b      	ldr	r3, [r3, #0]
 810596a:	4a43      	ldr	r2, [pc, #268]	; (8105a78 <UART_SetConfig+0x66c>)
 810596c:	4293      	cmp	r3, r2
 810596e:	d132      	bne.n	81059d6 <UART_SetConfig+0x5ca>
 8105970:	4b3e      	ldr	r3, [pc, #248]	; (8105a6c <UART_SetConfig+0x660>)
 8105972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105974:	f003 0307 	and.w	r3, r3, #7
 8105978:	2b05      	cmp	r3, #5
 810597a:	d827      	bhi.n	81059cc <UART_SetConfig+0x5c0>
 810597c:	a201      	add	r2, pc, #4	; (adr r2, 8105984 <UART_SetConfig+0x578>)
 810597e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105982:	bf00      	nop
 8105984:	0810599d 	.word	0x0810599d
 8105988:	081059a5 	.word	0x081059a5
 810598c:	081059ad 	.word	0x081059ad
 8105990:	081059b5 	.word	0x081059b5
 8105994:	081059bd 	.word	0x081059bd
 8105998:	081059c5 	.word	0x081059c5
 810599c:	2302      	movs	r3, #2
 810599e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059a2:	e01b      	b.n	81059dc <UART_SetConfig+0x5d0>
 81059a4:	2304      	movs	r3, #4
 81059a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059aa:	e017      	b.n	81059dc <UART_SetConfig+0x5d0>
 81059ac:	2308      	movs	r3, #8
 81059ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059b2:	e013      	b.n	81059dc <UART_SetConfig+0x5d0>
 81059b4:	2310      	movs	r3, #16
 81059b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059ba:	e00f      	b.n	81059dc <UART_SetConfig+0x5d0>
 81059bc:	2320      	movs	r3, #32
 81059be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059c2:	e00b      	b.n	81059dc <UART_SetConfig+0x5d0>
 81059c4:	2340      	movs	r3, #64	; 0x40
 81059c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059ca:	e007      	b.n	81059dc <UART_SetConfig+0x5d0>
 81059cc:	2380      	movs	r3, #128	; 0x80
 81059ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059d2:	bf00      	nop
 81059d4:	e002      	b.n	81059dc <UART_SetConfig+0x5d0>
 81059d6:	2380      	movs	r3, #128	; 0x80
 81059d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	681b      	ldr	r3, [r3, #0]
 81059e0:	4a25      	ldr	r2, [pc, #148]	; (8105a78 <UART_SetConfig+0x66c>)
 81059e2:	4293      	cmp	r3, r2
 81059e4:	f040 80b8 	bne.w	8105b58 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81059e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81059ec:	2b08      	cmp	r3, #8
 81059ee:	d019      	beq.n	8105a24 <UART_SetConfig+0x618>
 81059f0:	2b08      	cmp	r3, #8
 81059f2:	dc04      	bgt.n	81059fe <UART_SetConfig+0x5f2>
 81059f4:	2b02      	cmp	r3, #2
 81059f6:	d009      	beq.n	8105a0c <UART_SetConfig+0x600>
 81059f8:	2b04      	cmp	r3, #4
 81059fa:	d00b      	beq.n	8105a14 <UART_SetConfig+0x608>
 81059fc:	e042      	b.n	8105a84 <UART_SetConfig+0x678>
 81059fe:	2b20      	cmp	r3, #32
 8105a00:	d02b      	beq.n	8105a5a <UART_SetConfig+0x64e>
 8105a02:	2b40      	cmp	r3, #64	; 0x40
 8105a04:	d02c      	beq.n	8105a60 <UART_SetConfig+0x654>
 8105a06:	2b10      	cmp	r3, #16
 8105a08:	d014      	beq.n	8105a34 <UART_SetConfig+0x628>
 8105a0a:	e03b      	b.n	8105a84 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105a0c:	f7fe fda0 	bl	8104550 <HAL_RCCEx_GetD3PCLK1Freq>
 8105a10:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105a12:	e03d      	b.n	8105a90 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105a14:	f107 0314 	add.w	r3, r7, #20
 8105a18:	4618      	mov	r0, r3
 8105a1a:	f7fe fdaf 	bl	810457c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105a1e:	69bb      	ldr	r3, [r7, #24]
 8105a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105a22:	e035      	b.n	8105a90 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105a24:	f107 0308 	add.w	r3, r7, #8
 8105a28:	4618      	mov	r0, r3
 8105a2a:	f7fe fef3 	bl	8104814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105a2e:	68fb      	ldr	r3, [r7, #12]
 8105a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105a32:	e02d      	b.n	8105a90 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105a34:	4b0d      	ldr	r3, [pc, #52]	; (8105a6c <UART_SetConfig+0x660>)
 8105a36:	681b      	ldr	r3, [r3, #0]
 8105a38:	f003 0320 	and.w	r3, r3, #32
 8105a3c:	2b00      	cmp	r3, #0
 8105a3e:	d009      	beq.n	8105a54 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105a40:	4b0a      	ldr	r3, [pc, #40]	; (8105a6c <UART_SetConfig+0x660>)
 8105a42:	681b      	ldr	r3, [r3, #0]
 8105a44:	08db      	lsrs	r3, r3, #3
 8105a46:	f003 0303 	and.w	r3, r3, #3
 8105a4a:	4a0c      	ldr	r2, [pc, #48]	; (8105a7c <UART_SetConfig+0x670>)
 8105a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8105a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105a52:	e01d      	b.n	8105a90 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8105a54:	4b09      	ldr	r3, [pc, #36]	; (8105a7c <UART_SetConfig+0x670>)
 8105a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105a58:	e01a      	b.n	8105a90 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105a5a:	4b09      	ldr	r3, [pc, #36]	; (8105a80 <UART_SetConfig+0x674>)
 8105a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105a5e:	e017      	b.n	8105a90 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105a66:	e013      	b.n	8105a90 <UART_SetConfig+0x684>
 8105a68:	40011400 	.word	0x40011400
 8105a6c:	58024400 	.word	0x58024400
 8105a70:	40007800 	.word	0x40007800
 8105a74:	40007c00 	.word	0x40007c00
 8105a78:	58000c00 	.word	0x58000c00
 8105a7c:	03d09000 	.word	0x03d09000
 8105a80:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8105a84:	2300      	movs	r3, #0
 8105a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105a88:	2301      	movs	r3, #1
 8105a8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105a8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105a92:	2b00      	cmp	r3, #0
 8105a94:	f000 824d 	beq.w	8105f32 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105a98:	687b      	ldr	r3, [r7, #4]
 8105a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105a9c:	4aad      	ldr	r2, [pc, #692]	; (8105d54 <UART_SetConfig+0x948>)
 8105a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105aa2:	461a      	mov	r2, r3
 8105aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8105aaa:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	685a      	ldr	r2, [r3, #4]
 8105ab0:	4613      	mov	r3, r2
 8105ab2:	005b      	lsls	r3, r3, #1
 8105ab4:	4413      	add	r3, r2
 8105ab6:	6a3a      	ldr	r2, [r7, #32]
 8105ab8:	429a      	cmp	r2, r3
 8105aba:	d305      	bcc.n	8105ac8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	685b      	ldr	r3, [r3, #4]
 8105ac0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105ac2:	6a3a      	ldr	r2, [r7, #32]
 8105ac4:	429a      	cmp	r2, r3
 8105ac6:	d903      	bls.n	8105ad0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8105ac8:	2301      	movs	r3, #1
 8105aca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105ace:	e230      	b.n	8105f32 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105ad2:	4618      	mov	r0, r3
 8105ad4:	f04f 0100 	mov.w	r1, #0
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105adc:	4a9d      	ldr	r2, [pc, #628]	; (8105d54 <UART_SetConfig+0x948>)
 8105ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105ae2:	b29b      	uxth	r3, r3
 8105ae4:	f04f 0400 	mov.w	r4, #0
 8105ae8:	461a      	mov	r2, r3
 8105aea:	4623      	mov	r3, r4
 8105aec:	f7fa fbf4 	bl	81002d8 <__aeabi_uldivmod>
 8105af0:	4603      	mov	r3, r0
 8105af2:	460c      	mov	r4, r1
 8105af4:	4619      	mov	r1, r3
 8105af6:	4622      	mov	r2, r4
 8105af8:	f04f 0300 	mov.w	r3, #0
 8105afc:	f04f 0400 	mov.w	r4, #0
 8105b00:	0214      	lsls	r4, r2, #8
 8105b02:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8105b06:	020b      	lsls	r3, r1, #8
 8105b08:	687a      	ldr	r2, [r7, #4]
 8105b0a:	6852      	ldr	r2, [r2, #4]
 8105b0c:	0852      	lsrs	r2, r2, #1
 8105b0e:	4611      	mov	r1, r2
 8105b10:	f04f 0200 	mov.w	r2, #0
 8105b14:	eb13 0b01 	adds.w	fp, r3, r1
 8105b18:	eb44 0c02 	adc.w	ip, r4, r2
 8105b1c:	4658      	mov	r0, fp
 8105b1e:	4661      	mov	r1, ip
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	685b      	ldr	r3, [r3, #4]
 8105b24:	f04f 0400 	mov.w	r4, #0
 8105b28:	461a      	mov	r2, r3
 8105b2a:	4623      	mov	r3, r4
 8105b2c:	f7fa fbd4 	bl	81002d8 <__aeabi_uldivmod>
 8105b30:	4603      	mov	r3, r0
 8105b32:	460c      	mov	r4, r1
 8105b34:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8105b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105b38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105b3c:	d308      	bcc.n	8105b50 <UART_SetConfig+0x744>
 8105b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105b44:	d204      	bcs.n	8105b50 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	681b      	ldr	r3, [r3, #0]
 8105b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105b4c:	60da      	str	r2, [r3, #12]
 8105b4e:	e1f0      	b.n	8105f32 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8105b50:	2301      	movs	r3, #1
 8105b52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105b56:	e1ec      	b.n	8105f32 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	69db      	ldr	r3, [r3, #28]
 8105b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105b60:	f040 8100 	bne.w	8105d64 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8105b64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105b68:	2b40      	cmp	r3, #64	; 0x40
 8105b6a:	f200 80b7 	bhi.w	8105cdc <UART_SetConfig+0x8d0>
 8105b6e:	a201      	add	r2, pc, #4	; (adr r2, 8105b74 <UART_SetConfig+0x768>)
 8105b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b74:	08105c79 	.word	0x08105c79
 8105b78:	08105c81 	.word	0x08105c81
 8105b7c:	08105cdd 	.word	0x08105cdd
 8105b80:	08105cdd 	.word	0x08105cdd
 8105b84:	08105c89 	.word	0x08105c89
 8105b88:	08105cdd 	.word	0x08105cdd
 8105b8c:	08105cdd 	.word	0x08105cdd
 8105b90:	08105cdd 	.word	0x08105cdd
 8105b94:	08105c99 	.word	0x08105c99
 8105b98:	08105cdd 	.word	0x08105cdd
 8105b9c:	08105cdd 	.word	0x08105cdd
 8105ba0:	08105cdd 	.word	0x08105cdd
 8105ba4:	08105cdd 	.word	0x08105cdd
 8105ba8:	08105cdd 	.word	0x08105cdd
 8105bac:	08105cdd 	.word	0x08105cdd
 8105bb0:	08105cdd 	.word	0x08105cdd
 8105bb4:	08105ca9 	.word	0x08105ca9
 8105bb8:	08105cdd 	.word	0x08105cdd
 8105bbc:	08105cdd 	.word	0x08105cdd
 8105bc0:	08105cdd 	.word	0x08105cdd
 8105bc4:	08105cdd 	.word	0x08105cdd
 8105bc8:	08105cdd 	.word	0x08105cdd
 8105bcc:	08105cdd 	.word	0x08105cdd
 8105bd0:	08105cdd 	.word	0x08105cdd
 8105bd4:	08105cdd 	.word	0x08105cdd
 8105bd8:	08105cdd 	.word	0x08105cdd
 8105bdc:	08105cdd 	.word	0x08105cdd
 8105be0:	08105cdd 	.word	0x08105cdd
 8105be4:	08105cdd 	.word	0x08105cdd
 8105be8:	08105cdd 	.word	0x08105cdd
 8105bec:	08105cdd 	.word	0x08105cdd
 8105bf0:	08105cdd 	.word	0x08105cdd
 8105bf4:	08105ccf 	.word	0x08105ccf
 8105bf8:	08105cdd 	.word	0x08105cdd
 8105bfc:	08105cdd 	.word	0x08105cdd
 8105c00:	08105cdd 	.word	0x08105cdd
 8105c04:	08105cdd 	.word	0x08105cdd
 8105c08:	08105cdd 	.word	0x08105cdd
 8105c0c:	08105cdd 	.word	0x08105cdd
 8105c10:	08105cdd 	.word	0x08105cdd
 8105c14:	08105cdd 	.word	0x08105cdd
 8105c18:	08105cdd 	.word	0x08105cdd
 8105c1c:	08105cdd 	.word	0x08105cdd
 8105c20:	08105cdd 	.word	0x08105cdd
 8105c24:	08105cdd 	.word	0x08105cdd
 8105c28:	08105cdd 	.word	0x08105cdd
 8105c2c:	08105cdd 	.word	0x08105cdd
 8105c30:	08105cdd 	.word	0x08105cdd
 8105c34:	08105cdd 	.word	0x08105cdd
 8105c38:	08105cdd 	.word	0x08105cdd
 8105c3c:	08105cdd 	.word	0x08105cdd
 8105c40:	08105cdd 	.word	0x08105cdd
 8105c44:	08105cdd 	.word	0x08105cdd
 8105c48:	08105cdd 	.word	0x08105cdd
 8105c4c:	08105cdd 	.word	0x08105cdd
 8105c50:	08105cdd 	.word	0x08105cdd
 8105c54:	08105cdd 	.word	0x08105cdd
 8105c58:	08105cdd 	.word	0x08105cdd
 8105c5c:	08105cdd 	.word	0x08105cdd
 8105c60:	08105cdd 	.word	0x08105cdd
 8105c64:	08105cdd 	.word	0x08105cdd
 8105c68:	08105cdd 	.word	0x08105cdd
 8105c6c:	08105cdd 	.word	0x08105cdd
 8105c70:	08105cdd 	.word	0x08105cdd
 8105c74:	08105cd5 	.word	0x08105cd5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105c78:	f7fe f9c6 	bl	8104008 <HAL_RCC_GetPCLK1Freq>
 8105c7c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105c7e:	e033      	b.n	8105ce8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105c80:	f7fe f9d8 	bl	8104034 <HAL_RCC_GetPCLK2Freq>
 8105c84:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105c86:	e02f      	b.n	8105ce8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105c88:	f107 0314 	add.w	r3, r7, #20
 8105c8c:	4618      	mov	r0, r3
 8105c8e:	f7fe fc75 	bl	810457c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105c92:	69bb      	ldr	r3, [r7, #24]
 8105c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105c96:	e027      	b.n	8105ce8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105c98:	f107 0308 	add.w	r3, r7, #8
 8105c9c:	4618      	mov	r0, r3
 8105c9e:	f7fe fdb9 	bl	8104814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105ca2:	68fb      	ldr	r3, [r7, #12]
 8105ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105ca6:	e01f      	b.n	8105ce8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105ca8:	4b2b      	ldr	r3, [pc, #172]	; (8105d58 <UART_SetConfig+0x94c>)
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	f003 0320 	and.w	r3, r3, #32
 8105cb0:	2b00      	cmp	r3, #0
 8105cb2:	d009      	beq.n	8105cc8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105cb4:	4b28      	ldr	r3, [pc, #160]	; (8105d58 <UART_SetConfig+0x94c>)
 8105cb6:	681b      	ldr	r3, [r3, #0]
 8105cb8:	08db      	lsrs	r3, r3, #3
 8105cba:	f003 0303 	and.w	r3, r3, #3
 8105cbe:	4a27      	ldr	r2, [pc, #156]	; (8105d5c <UART_SetConfig+0x950>)
 8105cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8105cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105cc6:	e00f      	b.n	8105ce8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8105cc8:	4b24      	ldr	r3, [pc, #144]	; (8105d5c <UART_SetConfig+0x950>)
 8105cca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105ccc:	e00c      	b.n	8105ce8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105cce:	4b24      	ldr	r3, [pc, #144]	; (8105d60 <UART_SetConfig+0x954>)
 8105cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105cd2:	e009      	b.n	8105ce8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105cd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105cda:	e005      	b.n	8105ce8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8105cdc:	2300      	movs	r3, #0
 8105cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105ce0:	2301      	movs	r3, #1
 8105ce2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105ce6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8105ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105cea:	2b00      	cmp	r3, #0
 8105cec:	f000 8121 	beq.w	8105f32 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105cf0:	687b      	ldr	r3, [r7, #4]
 8105cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105cf4:	4a17      	ldr	r2, [pc, #92]	; (8105d54 <UART_SetConfig+0x948>)
 8105cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105cfa:	461a      	mov	r2, r3
 8105cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8105d02:	005a      	lsls	r2, r3, #1
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	685b      	ldr	r3, [r3, #4]
 8105d08:	085b      	lsrs	r3, r3, #1
 8105d0a:	441a      	add	r2, r3
 8105d0c:	687b      	ldr	r3, [r7, #4]
 8105d0e:	685b      	ldr	r3, [r3, #4]
 8105d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8105d14:	b29b      	uxth	r3, r3
 8105d16:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105d1a:	2b0f      	cmp	r3, #15
 8105d1c:	d916      	bls.n	8105d4c <UART_SetConfig+0x940>
 8105d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105d24:	d212      	bcs.n	8105d4c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8105d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105d28:	b29b      	uxth	r3, r3
 8105d2a:	f023 030f 	bic.w	r3, r3, #15
 8105d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8105d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105d32:	085b      	lsrs	r3, r3, #1
 8105d34:	b29b      	uxth	r3, r3
 8105d36:	f003 0307 	and.w	r3, r3, #7
 8105d3a:	b29a      	uxth	r2, r3
 8105d3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8105d3e:	4313      	orrs	r3, r2
 8105d40:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	681b      	ldr	r3, [r3, #0]
 8105d46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8105d48:	60da      	str	r2, [r3, #12]
 8105d4a:	e0f2      	b.n	8105f32 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8105d4c:	2301      	movs	r3, #1
 8105d4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105d52:	e0ee      	b.n	8105f32 <UART_SetConfig+0xb26>
 8105d54:	08107480 	.word	0x08107480
 8105d58:	58024400 	.word	0x58024400
 8105d5c:	03d09000 	.word	0x03d09000
 8105d60:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8105d64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105d68:	2b40      	cmp	r3, #64	; 0x40
 8105d6a:	f200 80b7 	bhi.w	8105edc <UART_SetConfig+0xad0>
 8105d6e:	a201      	add	r2, pc, #4	; (adr r2, 8105d74 <UART_SetConfig+0x968>)
 8105d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d74:	08105e79 	.word	0x08105e79
 8105d78:	08105e81 	.word	0x08105e81
 8105d7c:	08105edd 	.word	0x08105edd
 8105d80:	08105edd 	.word	0x08105edd
 8105d84:	08105e89 	.word	0x08105e89
 8105d88:	08105edd 	.word	0x08105edd
 8105d8c:	08105edd 	.word	0x08105edd
 8105d90:	08105edd 	.word	0x08105edd
 8105d94:	08105e99 	.word	0x08105e99
 8105d98:	08105edd 	.word	0x08105edd
 8105d9c:	08105edd 	.word	0x08105edd
 8105da0:	08105edd 	.word	0x08105edd
 8105da4:	08105edd 	.word	0x08105edd
 8105da8:	08105edd 	.word	0x08105edd
 8105dac:	08105edd 	.word	0x08105edd
 8105db0:	08105edd 	.word	0x08105edd
 8105db4:	08105ea9 	.word	0x08105ea9
 8105db8:	08105edd 	.word	0x08105edd
 8105dbc:	08105edd 	.word	0x08105edd
 8105dc0:	08105edd 	.word	0x08105edd
 8105dc4:	08105edd 	.word	0x08105edd
 8105dc8:	08105edd 	.word	0x08105edd
 8105dcc:	08105edd 	.word	0x08105edd
 8105dd0:	08105edd 	.word	0x08105edd
 8105dd4:	08105edd 	.word	0x08105edd
 8105dd8:	08105edd 	.word	0x08105edd
 8105ddc:	08105edd 	.word	0x08105edd
 8105de0:	08105edd 	.word	0x08105edd
 8105de4:	08105edd 	.word	0x08105edd
 8105de8:	08105edd 	.word	0x08105edd
 8105dec:	08105edd 	.word	0x08105edd
 8105df0:	08105edd 	.word	0x08105edd
 8105df4:	08105ecf 	.word	0x08105ecf
 8105df8:	08105edd 	.word	0x08105edd
 8105dfc:	08105edd 	.word	0x08105edd
 8105e00:	08105edd 	.word	0x08105edd
 8105e04:	08105edd 	.word	0x08105edd
 8105e08:	08105edd 	.word	0x08105edd
 8105e0c:	08105edd 	.word	0x08105edd
 8105e10:	08105edd 	.word	0x08105edd
 8105e14:	08105edd 	.word	0x08105edd
 8105e18:	08105edd 	.word	0x08105edd
 8105e1c:	08105edd 	.word	0x08105edd
 8105e20:	08105edd 	.word	0x08105edd
 8105e24:	08105edd 	.word	0x08105edd
 8105e28:	08105edd 	.word	0x08105edd
 8105e2c:	08105edd 	.word	0x08105edd
 8105e30:	08105edd 	.word	0x08105edd
 8105e34:	08105edd 	.word	0x08105edd
 8105e38:	08105edd 	.word	0x08105edd
 8105e3c:	08105edd 	.word	0x08105edd
 8105e40:	08105edd 	.word	0x08105edd
 8105e44:	08105edd 	.word	0x08105edd
 8105e48:	08105edd 	.word	0x08105edd
 8105e4c:	08105edd 	.word	0x08105edd
 8105e50:	08105edd 	.word	0x08105edd
 8105e54:	08105edd 	.word	0x08105edd
 8105e58:	08105edd 	.word	0x08105edd
 8105e5c:	08105edd 	.word	0x08105edd
 8105e60:	08105edd 	.word	0x08105edd
 8105e64:	08105edd 	.word	0x08105edd
 8105e68:	08105edd 	.word	0x08105edd
 8105e6c:	08105edd 	.word	0x08105edd
 8105e70:	08105edd 	.word	0x08105edd
 8105e74:	08105ed5 	.word	0x08105ed5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105e78:	f7fe f8c6 	bl	8104008 <HAL_RCC_GetPCLK1Freq>
 8105e7c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105e7e:	e033      	b.n	8105ee8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105e80:	f7fe f8d8 	bl	8104034 <HAL_RCC_GetPCLK2Freq>
 8105e84:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105e86:	e02f      	b.n	8105ee8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105e88:	f107 0314 	add.w	r3, r7, #20
 8105e8c:	4618      	mov	r0, r3
 8105e8e:	f7fe fb75 	bl	810457c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105e92:	69bb      	ldr	r3, [r7, #24]
 8105e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105e96:	e027      	b.n	8105ee8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105e98:	f107 0308 	add.w	r3, r7, #8
 8105e9c:	4618      	mov	r0, r3
 8105e9e:	f7fe fcb9 	bl	8104814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105ea2:	68fb      	ldr	r3, [r7, #12]
 8105ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105ea6:	e01f      	b.n	8105ee8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105ea8:	4b2c      	ldr	r3, [pc, #176]	; (8105f5c <UART_SetConfig+0xb50>)
 8105eaa:	681b      	ldr	r3, [r3, #0]
 8105eac:	f003 0320 	and.w	r3, r3, #32
 8105eb0:	2b00      	cmp	r3, #0
 8105eb2:	d009      	beq.n	8105ec8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105eb4:	4b29      	ldr	r3, [pc, #164]	; (8105f5c <UART_SetConfig+0xb50>)
 8105eb6:	681b      	ldr	r3, [r3, #0]
 8105eb8:	08db      	lsrs	r3, r3, #3
 8105eba:	f003 0303 	and.w	r3, r3, #3
 8105ebe:	4a28      	ldr	r2, [pc, #160]	; (8105f60 <UART_SetConfig+0xb54>)
 8105ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8105ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105ec6:	e00f      	b.n	8105ee8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8105ec8:	4b25      	ldr	r3, [pc, #148]	; (8105f60 <UART_SetConfig+0xb54>)
 8105eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105ecc:	e00c      	b.n	8105ee8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105ece:	4b25      	ldr	r3, [pc, #148]	; (8105f64 <UART_SetConfig+0xb58>)
 8105ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105ed2:	e009      	b.n	8105ee8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105eda:	e005      	b.n	8105ee8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8105edc:	2300      	movs	r3, #0
 8105ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105ee0:	2301      	movs	r3, #1
 8105ee2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105ee6:	bf00      	nop
    }

    if (pclk != 0U)
 8105ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105eea:	2b00      	cmp	r3, #0
 8105eec:	d021      	beq.n	8105f32 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105eee:	687b      	ldr	r3, [r7, #4]
 8105ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105ef2:	4a1d      	ldr	r2, [pc, #116]	; (8105f68 <UART_SetConfig+0xb5c>)
 8105ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105ef8:	461a      	mov	r2, r3
 8105efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105efc:	fbb3 f2f2 	udiv	r2, r3, r2
 8105f00:	687b      	ldr	r3, [r7, #4]
 8105f02:	685b      	ldr	r3, [r3, #4]
 8105f04:	085b      	lsrs	r3, r3, #1
 8105f06:	441a      	add	r2, r3
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	685b      	ldr	r3, [r3, #4]
 8105f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8105f10:	b29b      	uxth	r3, r3
 8105f12:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105f16:	2b0f      	cmp	r3, #15
 8105f18:	d908      	bls.n	8105f2c <UART_SetConfig+0xb20>
 8105f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105f20:	d204      	bcs.n	8105f2c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8105f22:	687b      	ldr	r3, [r7, #4]
 8105f24:	681b      	ldr	r3, [r3, #0]
 8105f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105f28:	60da      	str	r2, [r3, #12]
 8105f2a:	e002      	b.n	8105f32 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8105f2c:	2301      	movs	r3, #1
 8105f2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8105f32:	687b      	ldr	r3, [r7, #4]
 8105f34:	2201      	movs	r2, #1
 8105f36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	2201      	movs	r2, #1
 8105f3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	2200      	movs	r2, #0
 8105f46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	2200      	movs	r2, #0
 8105f4c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8105f4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8105f52:	4618      	mov	r0, r3
 8105f54:	3738      	adds	r7, #56	; 0x38
 8105f56:	46bd      	mov	sp, r7
 8105f58:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8105f5c:	58024400 	.word	0x58024400
 8105f60:	03d09000 	.word	0x03d09000
 8105f64:	003d0900 	.word	0x003d0900
 8105f68:	08107480 	.word	0x08107480

08105f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105f6c:	b480      	push	{r7}
 8105f6e:	b083      	sub	sp, #12
 8105f70:	af00      	add	r7, sp, #0
 8105f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105f78:	f003 0301 	and.w	r3, r3, #1
 8105f7c:	2b00      	cmp	r3, #0
 8105f7e:	d00a      	beq.n	8105f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	681b      	ldr	r3, [r3, #0]
 8105f84:	685b      	ldr	r3, [r3, #4]
 8105f86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8105f8a:	687b      	ldr	r3, [r7, #4]
 8105f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105f8e:	687b      	ldr	r3, [r7, #4]
 8105f90:	681b      	ldr	r3, [r3, #0]
 8105f92:	430a      	orrs	r2, r1
 8105f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105f9a:	f003 0302 	and.w	r3, r3, #2
 8105f9e:	2b00      	cmp	r3, #0
 8105fa0:	d00a      	beq.n	8105fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	681b      	ldr	r3, [r3, #0]
 8105fa6:	685b      	ldr	r3, [r3, #4]
 8105fa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105fac:	687b      	ldr	r3, [r7, #4]
 8105fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	681b      	ldr	r3, [r3, #0]
 8105fb4:	430a      	orrs	r2, r1
 8105fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8105fb8:	687b      	ldr	r3, [r7, #4]
 8105fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105fbc:	f003 0304 	and.w	r3, r3, #4
 8105fc0:	2b00      	cmp	r3, #0
 8105fc2:	d00a      	beq.n	8105fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	681b      	ldr	r3, [r3, #0]
 8105fc8:	685b      	ldr	r3, [r3, #4]
 8105fca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8105fce:	687b      	ldr	r3, [r7, #4]
 8105fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	430a      	orrs	r2, r1
 8105fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105fde:	f003 0308 	and.w	r3, r3, #8
 8105fe2:	2b00      	cmp	r3, #0
 8105fe4:	d00a      	beq.n	8105ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	681b      	ldr	r3, [r3, #0]
 8105fea:	685b      	ldr	r3, [r3, #4]
 8105fec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	681b      	ldr	r3, [r3, #0]
 8105ff8:	430a      	orrs	r2, r1
 8105ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106000:	f003 0310 	and.w	r3, r3, #16
 8106004:	2b00      	cmp	r3, #0
 8106006:	d00a      	beq.n	810601e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	681b      	ldr	r3, [r3, #0]
 810600c:	689b      	ldr	r3, [r3, #8]
 810600e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8106012:	687b      	ldr	r3, [r7, #4]
 8106014:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8106016:	687b      	ldr	r3, [r7, #4]
 8106018:	681b      	ldr	r3, [r3, #0]
 810601a:	430a      	orrs	r2, r1
 810601c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106022:	f003 0320 	and.w	r3, r3, #32
 8106026:	2b00      	cmp	r3, #0
 8106028:	d00a      	beq.n	8106040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810602a:	687b      	ldr	r3, [r7, #4]
 810602c:	681b      	ldr	r3, [r3, #0]
 810602e:	689b      	ldr	r3, [r3, #8]
 8106030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8106034:	687b      	ldr	r3, [r7, #4]
 8106036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	681b      	ldr	r3, [r3, #0]
 810603c:	430a      	orrs	r2, r1
 810603e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106040:	687b      	ldr	r3, [r7, #4]
 8106042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106048:	2b00      	cmp	r3, #0
 810604a:	d01a      	beq.n	8106082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	681b      	ldr	r3, [r3, #0]
 8106050:	685b      	ldr	r3, [r3, #4]
 8106052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8106056:	687b      	ldr	r3, [r7, #4]
 8106058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	681b      	ldr	r3, [r3, #0]
 810605e:	430a      	orrs	r2, r1
 8106060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106062:	687b      	ldr	r3, [r7, #4]
 8106064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810606a:	d10a      	bne.n	8106082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	681b      	ldr	r3, [r3, #0]
 8106070:	685b      	ldr	r3, [r3, #4]
 8106072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8106076:	687b      	ldr	r3, [r7, #4]
 8106078:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810607a:	687b      	ldr	r3, [r7, #4]
 810607c:	681b      	ldr	r3, [r3, #0]
 810607e:	430a      	orrs	r2, r1
 8106080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810608a:	2b00      	cmp	r3, #0
 810608c:	d00a      	beq.n	81060a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810608e:	687b      	ldr	r3, [r7, #4]
 8106090:	681b      	ldr	r3, [r3, #0]
 8106092:	685b      	ldr	r3, [r3, #4]
 8106094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810609c:	687b      	ldr	r3, [r7, #4]
 810609e:	681b      	ldr	r3, [r3, #0]
 81060a0:	430a      	orrs	r2, r1
 81060a2:	605a      	str	r2, [r3, #4]
  }
}
 81060a4:	bf00      	nop
 81060a6:	370c      	adds	r7, #12
 81060a8:	46bd      	mov	sp, r7
 81060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060ae:	4770      	bx	lr

081060b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81060b0:	b580      	push	{r7, lr}
 81060b2:	b086      	sub	sp, #24
 81060b4:	af02      	add	r7, sp, #8
 81060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	2200      	movs	r2, #0
 81060bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 81060c0:	f7fb fc72 	bl	81019a8 <HAL_GetTick>
 81060c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81060c6:	687b      	ldr	r3, [r7, #4]
 81060c8:	681b      	ldr	r3, [r3, #0]
 81060ca:	681b      	ldr	r3, [r3, #0]
 81060cc:	f003 0308 	and.w	r3, r3, #8
 81060d0:	2b08      	cmp	r3, #8
 81060d2:	d10e      	bne.n	81060f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81060d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81060d8:	9300      	str	r3, [sp, #0]
 81060da:	68fb      	ldr	r3, [r7, #12]
 81060dc:	2200      	movs	r2, #0
 81060de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81060e2:	6878      	ldr	r0, [r7, #4]
 81060e4:	f000 f82c 	bl	8106140 <UART_WaitOnFlagUntilTimeout>
 81060e8:	4603      	mov	r3, r0
 81060ea:	2b00      	cmp	r3, #0
 81060ec:	d001      	beq.n	81060f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81060ee:	2303      	movs	r3, #3
 81060f0:	e022      	b.n	8106138 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	681b      	ldr	r3, [r3, #0]
 81060f6:	681b      	ldr	r3, [r3, #0]
 81060f8:	f003 0304 	and.w	r3, r3, #4
 81060fc:	2b04      	cmp	r3, #4
 81060fe:	d10e      	bne.n	810611e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106104:	9300      	str	r3, [sp, #0]
 8106106:	68fb      	ldr	r3, [r7, #12]
 8106108:	2200      	movs	r2, #0
 810610a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810610e:	6878      	ldr	r0, [r7, #4]
 8106110:	f000 f816 	bl	8106140 <UART_WaitOnFlagUntilTimeout>
 8106114:	4603      	mov	r3, r0
 8106116:	2b00      	cmp	r3, #0
 8106118:	d001      	beq.n	810611e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810611a:	2303      	movs	r3, #3
 810611c:	e00c      	b.n	8106138 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810611e:	687b      	ldr	r3, [r7, #4]
 8106120:	2220      	movs	r2, #32
 8106122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	2220      	movs	r2, #32
 810612a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	2200      	movs	r2, #0
 8106132:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8106136:	2300      	movs	r3, #0
}
 8106138:	4618      	mov	r0, r3
 810613a:	3710      	adds	r7, #16
 810613c:	46bd      	mov	sp, r7
 810613e:	bd80      	pop	{r7, pc}

08106140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8106140:	b580      	push	{r7, lr}
 8106142:	b084      	sub	sp, #16
 8106144:	af00      	add	r7, sp, #0
 8106146:	60f8      	str	r0, [r7, #12]
 8106148:	60b9      	str	r1, [r7, #8]
 810614a:	603b      	str	r3, [r7, #0]
 810614c:	4613      	mov	r3, r2
 810614e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106150:	e062      	b.n	8106218 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106152:	69bb      	ldr	r3, [r7, #24]
 8106154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106158:	d05e      	beq.n	8106218 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810615a:	f7fb fc25 	bl	81019a8 <HAL_GetTick>
 810615e:	4602      	mov	r2, r0
 8106160:	683b      	ldr	r3, [r7, #0]
 8106162:	1ad3      	subs	r3, r2, r3
 8106164:	69ba      	ldr	r2, [r7, #24]
 8106166:	429a      	cmp	r2, r3
 8106168:	d302      	bcc.n	8106170 <UART_WaitOnFlagUntilTimeout+0x30>
 810616a:	69bb      	ldr	r3, [r7, #24]
 810616c:	2b00      	cmp	r3, #0
 810616e:	d11d      	bne.n	81061ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8106170:	68fb      	ldr	r3, [r7, #12]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	681a      	ldr	r2, [r3, #0]
 8106176:	68fb      	ldr	r3, [r7, #12]
 8106178:	681b      	ldr	r3, [r3, #0]
 810617a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810617e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106180:	68fb      	ldr	r3, [r7, #12]
 8106182:	681b      	ldr	r3, [r3, #0]
 8106184:	689a      	ldr	r2, [r3, #8]
 8106186:	68fb      	ldr	r3, [r7, #12]
 8106188:	681b      	ldr	r3, [r3, #0]
 810618a:	f022 0201 	bic.w	r2, r2, #1
 810618e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8106190:	68fb      	ldr	r3, [r7, #12]
 8106192:	2220      	movs	r2, #32
 8106194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8106198:	68fb      	ldr	r3, [r7, #12]
 810619a:	2220      	movs	r2, #32
 810619c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 81061a0:	68fb      	ldr	r3, [r7, #12]
 81061a2:	2200      	movs	r2, #0
 81061a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 81061a8:	2303      	movs	r3, #3
 81061aa:	e045      	b.n	8106238 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81061ac:	68fb      	ldr	r3, [r7, #12]
 81061ae:	681b      	ldr	r3, [r3, #0]
 81061b0:	681b      	ldr	r3, [r3, #0]
 81061b2:	f003 0304 	and.w	r3, r3, #4
 81061b6:	2b00      	cmp	r3, #0
 81061b8:	d02e      	beq.n	8106218 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81061ba:	68fb      	ldr	r3, [r7, #12]
 81061bc:	681b      	ldr	r3, [r3, #0]
 81061be:	69db      	ldr	r3, [r3, #28]
 81061c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81061c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81061c8:	d126      	bne.n	8106218 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81061ca:	68fb      	ldr	r3, [r7, #12]
 81061cc:	681b      	ldr	r3, [r3, #0]
 81061ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81061d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 81061d4:	68fb      	ldr	r3, [r7, #12]
 81061d6:	681b      	ldr	r3, [r3, #0]
 81061d8:	681a      	ldr	r2, [r3, #0]
 81061da:	68fb      	ldr	r3, [r7, #12]
 81061dc:	681b      	ldr	r3, [r3, #0]
 81061de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 81061e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81061e4:	68fb      	ldr	r3, [r7, #12]
 81061e6:	681b      	ldr	r3, [r3, #0]
 81061e8:	689a      	ldr	r2, [r3, #8]
 81061ea:	68fb      	ldr	r3, [r7, #12]
 81061ec:	681b      	ldr	r3, [r3, #0]
 81061ee:	f022 0201 	bic.w	r2, r2, #1
 81061f2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 81061f4:	68fb      	ldr	r3, [r7, #12]
 81061f6:	2220      	movs	r2, #32
 81061f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 81061fc:	68fb      	ldr	r3, [r7, #12]
 81061fe:	2220      	movs	r2, #32
 8106200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8106204:	68fb      	ldr	r3, [r7, #12]
 8106206:	2220      	movs	r2, #32
 8106208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810620c:	68fb      	ldr	r3, [r7, #12]
 810620e:	2200      	movs	r2, #0
 8106210:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8106214:	2303      	movs	r3, #3
 8106216:	e00f      	b.n	8106238 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106218:	68fb      	ldr	r3, [r7, #12]
 810621a:	681b      	ldr	r3, [r3, #0]
 810621c:	69da      	ldr	r2, [r3, #28]
 810621e:	68bb      	ldr	r3, [r7, #8]
 8106220:	4013      	ands	r3, r2
 8106222:	68ba      	ldr	r2, [r7, #8]
 8106224:	429a      	cmp	r2, r3
 8106226:	bf0c      	ite	eq
 8106228:	2301      	moveq	r3, #1
 810622a:	2300      	movne	r3, #0
 810622c:	b2db      	uxtb	r3, r3
 810622e:	461a      	mov	r2, r3
 8106230:	79fb      	ldrb	r3, [r7, #7]
 8106232:	429a      	cmp	r2, r3
 8106234:	d08d      	beq.n	8106152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106236:	2300      	movs	r3, #0
}
 8106238:	4618      	mov	r0, r3
 810623a:	3710      	adds	r7, #16
 810623c:	46bd      	mov	sp, r7
 810623e:	bd80      	pop	{r7, pc}

08106240 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8106240:	b480      	push	{r7}
 8106242:	b085      	sub	sp, #20
 8106244:	af00      	add	r7, sp, #0
 8106246:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106248:	687b      	ldr	r3, [r7, #4]
 810624a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810624e:	2b01      	cmp	r3, #1
 8106250:	d101      	bne.n	8106256 <HAL_UARTEx_DisableFifoMode+0x16>
 8106252:	2302      	movs	r3, #2
 8106254:	e027      	b.n	81062a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8106256:	687b      	ldr	r3, [r7, #4]
 8106258:	2201      	movs	r2, #1
 810625a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810625e:	687b      	ldr	r3, [r7, #4]
 8106260:	2224      	movs	r2, #36	; 0x24
 8106262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106266:	687b      	ldr	r3, [r7, #4]
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	681b      	ldr	r3, [r3, #0]
 810626c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810626e:	687b      	ldr	r3, [r7, #4]
 8106270:	681b      	ldr	r3, [r3, #0]
 8106272:	681a      	ldr	r2, [r3, #0]
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	681b      	ldr	r3, [r3, #0]
 8106278:	f022 0201 	bic.w	r2, r2, #1
 810627c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810627e:	68fb      	ldr	r3, [r7, #12]
 8106280:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8106284:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8106286:	687b      	ldr	r3, [r7, #4]
 8106288:	2200      	movs	r2, #0
 810628a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	681b      	ldr	r3, [r3, #0]
 8106290:	68fa      	ldr	r2, [r7, #12]
 8106292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106294:	687b      	ldr	r3, [r7, #4]
 8106296:	2220      	movs	r2, #32
 8106298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810629c:	687b      	ldr	r3, [r7, #4]
 810629e:	2200      	movs	r2, #0
 81062a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81062a4:	2300      	movs	r3, #0
}
 81062a6:	4618      	mov	r0, r3
 81062a8:	3714      	adds	r7, #20
 81062aa:	46bd      	mov	sp, r7
 81062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062b0:	4770      	bx	lr

081062b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81062b2:	b580      	push	{r7, lr}
 81062b4:	b084      	sub	sp, #16
 81062b6:	af00      	add	r7, sp, #0
 81062b8:	6078      	str	r0, [r7, #4]
 81062ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81062bc:	687b      	ldr	r3, [r7, #4]
 81062be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81062c2:	2b01      	cmp	r3, #1
 81062c4:	d101      	bne.n	81062ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81062c6:	2302      	movs	r3, #2
 81062c8:	e02d      	b.n	8106326 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	2201      	movs	r2, #1
 81062ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	2224      	movs	r2, #36	; 0x24
 81062d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81062da:	687b      	ldr	r3, [r7, #4]
 81062dc:	681b      	ldr	r3, [r3, #0]
 81062de:	681b      	ldr	r3, [r3, #0]
 81062e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81062e2:	687b      	ldr	r3, [r7, #4]
 81062e4:	681b      	ldr	r3, [r3, #0]
 81062e6:	681a      	ldr	r2, [r3, #0]
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	681b      	ldr	r3, [r3, #0]
 81062ec:	f022 0201 	bic.w	r2, r2, #1
 81062f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81062f2:	687b      	ldr	r3, [r7, #4]
 81062f4:	681b      	ldr	r3, [r3, #0]
 81062f6:	689b      	ldr	r3, [r3, #8]
 81062f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 81062fc:	687b      	ldr	r3, [r7, #4]
 81062fe:	681b      	ldr	r3, [r3, #0]
 8106300:	683a      	ldr	r2, [r7, #0]
 8106302:	430a      	orrs	r2, r1
 8106304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106306:	6878      	ldr	r0, [r7, #4]
 8106308:	f000 f850 	bl	81063ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810630c:	687b      	ldr	r3, [r7, #4]
 810630e:	681b      	ldr	r3, [r3, #0]
 8106310:	68fa      	ldr	r2, [r7, #12]
 8106312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	2220      	movs	r2, #32
 8106318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	2200      	movs	r2, #0
 8106320:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8106324:	2300      	movs	r3, #0
}
 8106326:	4618      	mov	r0, r3
 8106328:	3710      	adds	r7, #16
 810632a:	46bd      	mov	sp, r7
 810632c:	bd80      	pop	{r7, pc}

0810632e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810632e:	b580      	push	{r7, lr}
 8106330:	b084      	sub	sp, #16
 8106332:	af00      	add	r7, sp, #0
 8106334:	6078      	str	r0, [r7, #4]
 8106336:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810633e:	2b01      	cmp	r3, #1
 8106340:	d101      	bne.n	8106346 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8106342:	2302      	movs	r3, #2
 8106344:	e02d      	b.n	81063a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8106346:	687b      	ldr	r3, [r7, #4]
 8106348:	2201      	movs	r2, #1
 810634a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	2224      	movs	r2, #36	; 0x24
 8106352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	681b      	ldr	r3, [r3, #0]
 810635a:	681b      	ldr	r3, [r3, #0]
 810635c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810635e:	687b      	ldr	r3, [r7, #4]
 8106360:	681b      	ldr	r3, [r3, #0]
 8106362:	681a      	ldr	r2, [r3, #0]
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	681b      	ldr	r3, [r3, #0]
 8106368:	f022 0201 	bic.w	r2, r2, #1
 810636c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810636e:	687b      	ldr	r3, [r7, #4]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	689b      	ldr	r3, [r3, #8]
 8106374:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	681b      	ldr	r3, [r3, #0]
 810637c:	683a      	ldr	r2, [r7, #0]
 810637e:	430a      	orrs	r2, r1
 8106380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106382:	6878      	ldr	r0, [r7, #4]
 8106384:	f000 f812 	bl	81063ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106388:	687b      	ldr	r3, [r7, #4]
 810638a:	681b      	ldr	r3, [r3, #0]
 810638c:	68fa      	ldr	r2, [r7, #12]
 810638e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106390:	687b      	ldr	r3, [r7, #4]
 8106392:	2220      	movs	r2, #32
 8106394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	2200      	movs	r2, #0
 810639c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81063a0:	2300      	movs	r3, #0
}
 81063a2:	4618      	mov	r0, r3
 81063a4:	3710      	adds	r7, #16
 81063a6:	46bd      	mov	sp, r7
 81063a8:	bd80      	pop	{r7, pc}
	...

081063ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81063ac:	b480      	push	{r7}
 81063ae:	b089      	sub	sp, #36	; 0x24
 81063b0:	af00      	add	r7, sp, #0
 81063b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 81063b4:	4a2f      	ldr	r2, [pc, #188]	; (8106474 <UARTEx_SetNbDataToProcess+0xc8>)
 81063b6:	f107 0314 	add.w	r3, r7, #20
 81063ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 81063be:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 81063c2:	4a2d      	ldr	r2, [pc, #180]	; (8106478 <UARTEx_SetNbDataToProcess+0xcc>)
 81063c4:	f107 030c 	add.w	r3, r7, #12
 81063c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 81063cc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81063d4:	2b00      	cmp	r3, #0
 81063d6:	d108      	bne.n	81063ea <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 81063d8:	687b      	ldr	r3, [r7, #4]
 81063da:	2201      	movs	r2, #1
 81063dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	2201      	movs	r2, #1
 81063e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81063e8:	e03d      	b.n	8106466 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81063ea:	2310      	movs	r3, #16
 81063ec:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81063ee:	2310      	movs	r3, #16
 81063f0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	681b      	ldr	r3, [r3, #0]
 81063f6:	689b      	ldr	r3, [r3, #8]
 81063f8:	0e5b      	lsrs	r3, r3, #25
 81063fa:	b2db      	uxtb	r3, r3
 81063fc:	f003 0307 	and.w	r3, r3, #7
 8106400:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106402:	687b      	ldr	r3, [r7, #4]
 8106404:	681b      	ldr	r3, [r3, #0]
 8106406:	689b      	ldr	r3, [r3, #8]
 8106408:	0f5b      	lsrs	r3, r3, #29
 810640a:	b2db      	uxtb	r3, r3
 810640c:	f003 0307 	and.w	r3, r3, #7
 8106410:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8106412:	7fbb      	ldrb	r3, [r7, #30]
 8106414:	7f3a      	ldrb	r2, [r7, #28]
 8106416:	f107 0120 	add.w	r1, r7, #32
 810641a:	440a      	add	r2, r1
 810641c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8106420:	fb02 f303 	mul.w	r3, r2, r3
 8106424:	7f3a      	ldrb	r2, [r7, #28]
 8106426:	f107 0120 	add.w	r1, r7, #32
 810642a:	440a      	add	r2, r1
 810642c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8106430:	fb93 f3f2 	sdiv	r3, r3, r2
 8106434:	b29a      	uxth	r2, r3
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 810643c:	7ffb      	ldrb	r3, [r7, #31]
 810643e:	7f7a      	ldrb	r2, [r7, #29]
 8106440:	f107 0120 	add.w	r1, r7, #32
 8106444:	440a      	add	r2, r1
 8106446:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 810644a:	fb02 f303 	mul.w	r3, r2, r3
 810644e:	7f7a      	ldrb	r2, [r7, #29]
 8106450:	f107 0120 	add.w	r1, r7, #32
 8106454:	440a      	add	r2, r1
 8106456:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810645a:	fb93 f3f2 	sdiv	r3, r3, r2
 810645e:	b29a      	uxth	r2, r3
 8106460:	687b      	ldr	r3, [r7, #4]
 8106462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8106466:	bf00      	nop
 8106468:	3724      	adds	r7, #36	; 0x24
 810646a:	46bd      	mov	sp, r7
 810646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106470:	4770      	bx	lr
 8106472:	bf00      	nop
 8106474:	08107460 	.word	0x08107460
 8106478:	08107468 	.word	0x08107468

0810647c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 810647c:	b480      	push	{r7}
 810647e:	b083      	sub	sp, #12
 8106480:	af00      	add	r7, sp, #0
 8106482:	6078      	str	r0, [r7, #4]
 8106484:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8106486:	683b      	ldr	r3, [r7, #0]
 8106488:	681b      	ldr	r3, [r3, #0]
 810648a:	2b00      	cmp	r3, #0
 810648c:	d123      	bne.n	81064d6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810648e:	687b      	ldr	r3, [r7, #4]
 8106490:	681b      	ldr	r3, [r3, #0]
 8106492:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8106496:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810649a:	683a      	ldr	r2, [r7, #0]
 810649c:	6851      	ldr	r1, [r2, #4]
 810649e:	683a      	ldr	r2, [r7, #0]
 81064a0:	6892      	ldr	r2, [r2, #8]
 81064a2:	4311      	orrs	r1, r2
 81064a4:	683a      	ldr	r2, [r7, #0]
 81064a6:	68d2      	ldr	r2, [r2, #12]
 81064a8:	4311      	orrs	r1, r2
 81064aa:	683a      	ldr	r2, [r7, #0]
 81064ac:	6912      	ldr	r2, [r2, #16]
 81064ae:	4311      	orrs	r1, r2
 81064b0:	683a      	ldr	r2, [r7, #0]
 81064b2:	6952      	ldr	r2, [r2, #20]
 81064b4:	4311      	orrs	r1, r2
 81064b6:	683a      	ldr	r2, [r7, #0]
 81064b8:	6992      	ldr	r2, [r2, #24]
 81064ba:	4311      	orrs	r1, r2
 81064bc:	683a      	ldr	r2, [r7, #0]
 81064be:	69d2      	ldr	r2, [r2, #28]
 81064c0:	4311      	orrs	r1, r2
 81064c2:	683a      	ldr	r2, [r7, #0]
 81064c4:	6a12      	ldr	r2, [r2, #32]
 81064c6:	4311      	orrs	r1, r2
 81064c8:	683a      	ldr	r2, [r7, #0]
 81064ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 81064cc:	430a      	orrs	r2, r1
 81064ce:	431a      	orrs	r2, r3
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	601a      	str	r2, [r3, #0]
 81064d4:	e028      	b.n	8106528 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 81064d6:	687b      	ldr	r3, [r7, #4]
 81064d8:	681b      	ldr	r3, [r3, #0]
 81064da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 81064de:	683b      	ldr	r3, [r7, #0]
 81064e0:	69d9      	ldr	r1, [r3, #28]
 81064e2:	683b      	ldr	r3, [r7, #0]
 81064e4:	6a1b      	ldr	r3, [r3, #32]
 81064e6:	4319      	orrs	r1, r3
 81064e8:	683b      	ldr	r3, [r7, #0]
 81064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81064ec:	430b      	orrs	r3, r1
 81064ee:	431a      	orrs	r2, r3
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 81064f4:	687b      	ldr	r3, [r7, #4]
 81064f6:	685b      	ldr	r3, [r3, #4]
 81064f8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 81064fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8106500:	683a      	ldr	r2, [r7, #0]
 8106502:	6851      	ldr	r1, [r2, #4]
 8106504:	683a      	ldr	r2, [r7, #0]
 8106506:	6892      	ldr	r2, [r2, #8]
 8106508:	4311      	orrs	r1, r2
 810650a:	683a      	ldr	r2, [r7, #0]
 810650c:	68d2      	ldr	r2, [r2, #12]
 810650e:	4311      	orrs	r1, r2
 8106510:	683a      	ldr	r2, [r7, #0]
 8106512:	6912      	ldr	r2, [r2, #16]
 8106514:	4311      	orrs	r1, r2
 8106516:	683a      	ldr	r2, [r7, #0]
 8106518:	6952      	ldr	r2, [r2, #20]
 810651a:	4311      	orrs	r1, r2
 810651c:	683a      	ldr	r2, [r7, #0]
 810651e:	6992      	ldr	r2, [r2, #24]
 8106520:	430a      	orrs	r2, r1
 8106522:	431a      	orrs	r2, r3
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8106528:	2300      	movs	r3, #0
}
 810652a:	4618      	mov	r0, r3
 810652c:	370c      	adds	r7, #12
 810652e:	46bd      	mov	sp, r7
 8106530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106534:	4770      	bx	lr

08106536 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8106536:	b480      	push	{r7}
 8106538:	b085      	sub	sp, #20
 810653a:	af00      	add	r7, sp, #0
 810653c:	60f8      	str	r0, [r7, #12]
 810653e:	60b9      	str	r1, [r7, #8]
 8106540:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	2b00      	cmp	r3, #0
 8106546:	d128      	bne.n	810659a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8106548:	68fb      	ldr	r3, [r7, #12]
 810654a:	689b      	ldr	r3, [r3, #8]
 810654c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8106550:	68bb      	ldr	r3, [r7, #8]
 8106552:	681b      	ldr	r3, [r3, #0]
 8106554:	1e59      	subs	r1, r3, #1
 8106556:	68bb      	ldr	r3, [r7, #8]
 8106558:	685b      	ldr	r3, [r3, #4]
 810655a:	3b01      	subs	r3, #1
 810655c:	011b      	lsls	r3, r3, #4
 810655e:	4319      	orrs	r1, r3
 8106560:	68bb      	ldr	r3, [r7, #8]
 8106562:	689b      	ldr	r3, [r3, #8]
 8106564:	3b01      	subs	r3, #1
 8106566:	021b      	lsls	r3, r3, #8
 8106568:	4319      	orrs	r1, r3
 810656a:	68bb      	ldr	r3, [r7, #8]
 810656c:	68db      	ldr	r3, [r3, #12]
 810656e:	3b01      	subs	r3, #1
 8106570:	031b      	lsls	r3, r3, #12
 8106572:	4319      	orrs	r1, r3
 8106574:	68bb      	ldr	r3, [r7, #8]
 8106576:	691b      	ldr	r3, [r3, #16]
 8106578:	3b01      	subs	r3, #1
 810657a:	041b      	lsls	r3, r3, #16
 810657c:	4319      	orrs	r1, r3
 810657e:	68bb      	ldr	r3, [r7, #8]
 8106580:	695b      	ldr	r3, [r3, #20]
 8106582:	3b01      	subs	r3, #1
 8106584:	051b      	lsls	r3, r3, #20
 8106586:	4319      	orrs	r1, r3
 8106588:	68bb      	ldr	r3, [r7, #8]
 810658a:	699b      	ldr	r3, [r3, #24]
 810658c:	3b01      	subs	r3, #1
 810658e:	061b      	lsls	r3, r3, #24
 8106590:	430b      	orrs	r3, r1
 8106592:	431a      	orrs	r2, r3
 8106594:	68fb      	ldr	r3, [r7, #12]
 8106596:	609a      	str	r2, [r3, #8]
 8106598:	e02f      	b.n	81065fa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810659a:	68fb      	ldr	r3, [r7, #12]
 810659c:	689b      	ldr	r3, [r3, #8]
 810659e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81065a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81065a6:	68ba      	ldr	r2, [r7, #8]
 81065a8:	68d2      	ldr	r2, [r2, #12]
 81065aa:	3a01      	subs	r2, #1
 81065ac:	0311      	lsls	r1, r2, #12
 81065ae:	68ba      	ldr	r2, [r7, #8]
 81065b0:	6952      	ldr	r2, [r2, #20]
 81065b2:	3a01      	subs	r2, #1
 81065b4:	0512      	lsls	r2, r2, #20
 81065b6:	430a      	orrs	r2, r1
 81065b8:	431a      	orrs	r2, r3
 81065ba:	68fb      	ldr	r3, [r7, #12]
 81065bc:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 81065be:	68fb      	ldr	r3, [r7, #12]
 81065c0:	68db      	ldr	r3, [r3, #12]
 81065c2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 81065c6:	68bb      	ldr	r3, [r7, #8]
 81065c8:	681b      	ldr	r3, [r3, #0]
 81065ca:	1e59      	subs	r1, r3, #1
 81065cc:	68bb      	ldr	r3, [r7, #8]
 81065ce:	685b      	ldr	r3, [r3, #4]
 81065d0:	3b01      	subs	r3, #1
 81065d2:	011b      	lsls	r3, r3, #4
 81065d4:	4319      	orrs	r1, r3
 81065d6:	68bb      	ldr	r3, [r7, #8]
 81065d8:	689b      	ldr	r3, [r3, #8]
 81065da:	3b01      	subs	r3, #1
 81065dc:	021b      	lsls	r3, r3, #8
 81065de:	4319      	orrs	r1, r3
 81065e0:	68bb      	ldr	r3, [r7, #8]
 81065e2:	691b      	ldr	r3, [r3, #16]
 81065e4:	3b01      	subs	r3, #1
 81065e6:	041b      	lsls	r3, r3, #16
 81065e8:	4319      	orrs	r1, r3
 81065ea:	68bb      	ldr	r3, [r7, #8]
 81065ec:	699b      	ldr	r3, [r3, #24]
 81065ee:	3b01      	subs	r3, #1
 81065f0:	061b      	lsls	r3, r3, #24
 81065f2:	430b      	orrs	r3, r1
 81065f4:	431a      	orrs	r2, r3
 81065f6:	68fb      	ldr	r3, [r7, #12]
 81065f8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 81065fa:	2300      	movs	r3, #0
}
 81065fc:	4618      	mov	r0, r3
 81065fe:	3714      	adds	r7, #20
 8106600:	46bd      	mov	sp, r7
 8106602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106606:	4770      	bx	lr

08106608 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8106608:	b084      	sub	sp, #16
 810660a:	b480      	push	{r7}
 810660c:	b085      	sub	sp, #20
 810660e:	af00      	add	r7, sp, #0
 8106610:	6078      	str	r0, [r7, #4]
 8106612:	f107 001c 	add.w	r0, r7, #28
 8106616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810661a:	2300      	movs	r3, #0
 810661c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 810661e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8106620:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8106622:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8106624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8106626:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8106628:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 810662a:	431a      	orrs	r2, r3
             Init.ClockDiv
 810662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 810662e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8106630:	68fa      	ldr	r2, [r7, #12]
 8106632:	4313      	orrs	r3, r2
 8106634:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8106636:	687b      	ldr	r3, [r7, #4]
 8106638:	685a      	ldr	r2, [r3, #4]
 810663a:	4b07      	ldr	r3, [pc, #28]	; (8106658 <SDMMC_Init+0x50>)
 810663c:	4013      	ands	r3, r2
 810663e:	68fa      	ldr	r2, [r7, #12]
 8106640:	431a      	orrs	r2, r3
 8106642:	687b      	ldr	r3, [r7, #4]
 8106644:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8106646:	2300      	movs	r3, #0
}
 8106648:	4618      	mov	r0, r3
 810664a:	3714      	adds	r7, #20
 810664c:	46bd      	mov	sp, r7
 810664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106652:	b004      	add	sp, #16
 8106654:	4770      	bx	lr
 8106656:	bf00      	nop
 8106658:	ffc02c00 	.word	0xffc02c00

0810665c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 810665c:	b480      	push	{r7}
 810665e:	b083      	sub	sp, #12
 8106660:	af00      	add	r7, sp, #0
 8106662:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 810666a:	4618      	mov	r0, r3
 810666c:	370c      	adds	r7, #12
 810666e:	46bd      	mov	sp, r7
 8106670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106674:	4770      	bx	lr

08106676 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8106676:	b480      	push	{r7}
 8106678:	b083      	sub	sp, #12
 810667a:	af00      	add	r7, sp, #0
 810667c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810667e:	687b      	ldr	r3, [r7, #4]
 8106680:	681b      	ldr	r3, [r3, #0]
 8106682:	f043 0203 	orr.w	r2, r3, #3
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810668a:	2300      	movs	r3, #0
}
 810668c:	4618      	mov	r0, r3
 810668e:	370c      	adds	r7, #12
 8106690:	46bd      	mov	sp, r7
 8106692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106696:	4770      	bx	lr

08106698 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8106698:	b480      	push	{r7}
 810669a:	b083      	sub	sp, #12
 810669c:	af00      	add	r7, sp, #0
 810669e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 81066a0:	687b      	ldr	r3, [r7, #4]
 81066a2:	681b      	ldr	r3, [r3, #0]
 81066a4:	f003 0303 	and.w	r3, r3, #3
}
 81066a8:	4618      	mov	r0, r3
 81066aa:	370c      	adds	r7, #12
 81066ac:	46bd      	mov	sp, r7
 81066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066b2:	4770      	bx	lr

081066b4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 81066b4:	b480      	push	{r7}
 81066b6:	b085      	sub	sp, #20
 81066b8:	af00      	add	r7, sp, #0
 81066ba:	6078      	str	r0, [r7, #4]
 81066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 81066be:	2300      	movs	r3, #0
 81066c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 81066c2:	683b      	ldr	r3, [r7, #0]
 81066c4:	681a      	ldr	r2, [r3, #0]
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 81066ca:	683b      	ldr	r3, [r7, #0]
 81066cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 81066ce:	683b      	ldr	r3, [r7, #0]
 81066d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 81066d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 81066d4:	683b      	ldr	r3, [r7, #0]
 81066d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 81066d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 81066da:	683b      	ldr	r3, [r7, #0]
 81066dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 81066de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 81066e0:	68fa      	ldr	r2, [r7, #12]
 81066e2:	4313      	orrs	r3, r2
 81066e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 81066e6:	687b      	ldr	r3, [r7, #4]
 81066e8:	68da      	ldr	r2, [r3, #12]
 81066ea:	4b06      	ldr	r3, [pc, #24]	; (8106704 <SDMMC_SendCommand+0x50>)
 81066ec:	4013      	ands	r3, r2
 81066ee:	68fa      	ldr	r2, [r7, #12]
 81066f0:	431a      	orrs	r2, r3
 81066f2:	687b      	ldr	r3, [r7, #4]
 81066f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 81066f6:	2300      	movs	r3, #0
}
 81066f8:	4618      	mov	r0, r3
 81066fa:	3714      	adds	r7, #20
 81066fc:	46bd      	mov	sp, r7
 81066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106702:	4770      	bx	lr
 8106704:	fffee0c0 	.word	0xfffee0c0

08106708 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8106708:	b480      	push	{r7}
 810670a:	b083      	sub	sp, #12
 810670c:	af00      	add	r7, sp, #0
 810670e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	691b      	ldr	r3, [r3, #16]
 8106714:	b2db      	uxtb	r3, r3
}
 8106716:	4618      	mov	r0, r3
 8106718:	370c      	adds	r7, #12
 810671a:	46bd      	mov	sp, r7
 810671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106720:	4770      	bx	lr

08106722 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8106722:	b480      	push	{r7}
 8106724:	b085      	sub	sp, #20
 8106726:	af00      	add	r7, sp, #0
 8106728:	6078      	str	r0, [r7, #4]
 810672a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810672c:	687b      	ldr	r3, [r7, #4]
 810672e:	3314      	adds	r3, #20
 8106730:	461a      	mov	r2, r3
 8106732:	683b      	ldr	r3, [r7, #0]
 8106734:	4413      	add	r3, r2
 8106736:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8106738:	68fb      	ldr	r3, [r7, #12]
 810673a:	681b      	ldr	r3, [r3, #0]
}
 810673c:	4618      	mov	r0, r3
 810673e:	3714      	adds	r7, #20
 8106740:	46bd      	mov	sp, r7
 8106742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106746:	4770      	bx	lr

08106748 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8106748:	b480      	push	{r7}
 810674a:	b085      	sub	sp, #20
 810674c:	af00      	add	r7, sp, #0
 810674e:	6078      	str	r0, [r7, #4]
 8106750:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8106752:	2300      	movs	r3, #0
 8106754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8106756:	683b      	ldr	r3, [r7, #0]
 8106758:	681a      	ldr	r2, [r3, #0]
 810675a:	687b      	ldr	r3, [r7, #4]
 810675c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810675e:	683b      	ldr	r3, [r7, #0]
 8106760:	685a      	ldr	r2, [r3, #4]
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8106766:	683b      	ldr	r3, [r7, #0]
 8106768:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 810676a:	683b      	ldr	r3, [r7, #0]
 810676c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 810676e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8106770:	683b      	ldr	r3, [r7, #0]
 8106772:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8106774:	431a      	orrs	r2, r3
                       Data->DPSM);
 8106776:	683b      	ldr	r3, [r7, #0]
 8106778:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 810677a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 810677c:	68fa      	ldr	r2, [r7, #12]
 810677e:	4313      	orrs	r3, r2
 8106780:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106786:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810678a:	68fb      	ldr	r3, [r7, #12]
 810678c:	431a      	orrs	r2, r3
 810678e:	687b      	ldr	r3, [r7, #4]
 8106790:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8106792:	2300      	movs	r3, #0

}
 8106794:	4618      	mov	r0, r3
 8106796:	3714      	adds	r7, #20
 8106798:	46bd      	mov	sp, r7
 810679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810679e:	4770      	bx	lr

081067a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 81067a0:	b580      	push	{r7, lr}
 81067a2:	b088      	sub	sp, #32
 81067a4:	af00      	add	r7, sp, #0
 81067a6:	6078      	str	r0, [r7, #4]
 81067a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 81067aa:	683b      	ldr	r3, [r7, #0]
 81067ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 81067ae:	2310      	movs	r3, #16
 81067b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81067b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 81067b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81067b8:	2300      	movs	r3, #0
 81067ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81067bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81067c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81067c2:	f107 0308 	add.w	r3, r7, #8
 81067c6:	4619      	mov	r1, r3
 81067c8:	6878      	ldr	r0, [r7, #4]
 81067ca:	f7ff ff73 	bl	81066b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 81067ce:	f241 3288 	movw	r2, #5000	; 0x1388
 81067d2:	2110      	movs	r1, #16
 81067d4:	6878      	ldr	r0, [r7, #4]
 81067d6:	f000 f93d 	bl	8106a54 <SDMMC_GetCmdResp1>
 81067da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81067dc:	69fb      	ldr	r3, [r7, #28]
}
 81067de:	4618      	mov	r0, r3
 81067e0:	3720      	adds	r7, #32
 81067e2:	46bd      	mov	sp, r7
 81067e4:	bd80      	pop	{r7, pc}

081067e6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 81067e6:	b580      	push	{r7, lr}
 81067e8:	b08a      	sub	sp, #40	; 0x28
 81067ea:	af00      	add	r7, sp, #0
 81067ec:	60f8      	str	r0, [r7, #12]
 81067ee:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 81067f2:	683b      	ldr	r3, [r7, #0]
 81067f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 81067f6:	2307      	movs	r3, #7
 81067f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81067fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 81067fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106800:	2300      	movs	r3, #0
 8106802:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106808:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810680a:	f107 0310 	add.w	r3, r7, #16
 810680e:	4619      	mov	r1, r3
 8106810:	68f8      	ldr	r0, [r7, #12]
 8106812:	f7ff ff4f 	bl	81066b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8106816:	f241 3288 	movw	r2, #5000	; 0x1388
 810681a:	2107      	movs	r1, #7
 810681c:	68f8      	ldr	r0, [r7, #12]
 810681e:	f000 f919 	bl	8106a54 <SDMMC_GetCmdResp1>
 8106822:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8106824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8106826:	4618      	mov	r0, r3
 8106828:	3728      	adds	r7, #40	; 0x28
 810682a:	46bd      	mov	sp, r7
 810682c:	bd80      	pop	{r7, pc}

0810682e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810682e:	b580      	push	{r7, lr}
 8106830:	b088      	sub	sp, #32
 8106832:	af00      	add	r7, sp, #0
 8106834:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8106836:	2300      	movs	r3, #0
 8106838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810683a:	2300      	movs	r3, #0
 810683c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810683e:	2300      	movs	r3, #0
 8106840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106842:	2300      	movs	r3, #0
 8106844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810684a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810684c:	f107 0308 	add.w	r3, r7, #8
 8106850:	4619      	mov	r1, r3
 8106852:	6878      	ldr	r0, [r7, #4]
 8106854:	f7ff ff2e 	bl	81066b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8106858:	6878      	ldr	r0, [r7, #4]
 810685a:	f000 f8cd 	bl	81069f8 <SDMMC_GetCmdError>
 810685e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8106860:	69fb      	ldr	r3, [r7, #28]
}
 8106862:	4618      	mov	r0, r3
 8106864:	3720      	adds	r7, #32
 8106866:	46bd      	mov	sp, r7
 8106868:	bd80      	pop	{r7, pc}

0810686a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810686a:	b580      	push	{r7, lr}
 810686c:	b088      	sub	sp, #32
 810686e:	af00      	add	r7, sp, #0
 8106870:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8106872:	2300      	movs	r3, #0
 8106874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8106876:	2302      	movs	r3, #2
 8106878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810687a:	f44f 7340 	mov.w	r3, #768	; 0x300
 810687e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106880:	2300      	movs	r3, #0
 8106882:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106888:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810688a:	f107 0308 	add.w	r3, r7, #8
 810688e:	4619      	mov	r1, r3
 8106890:	6878      	ldr	r0, [r7, #4]
 8106892:	f7ff ff0f 	bl	81066b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8106896:	6878      	ldr	r0, [r7, #4]
 8106898:	f000 f9ce 	bl	8106c38 <SDMMC_GetCmdResp2>
 810689c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810689e:	69fb      	ldr	r3, [r7, #28]
}
 81068a0:	4618      	mov	r0, r3
 81068a2:	3720      	adds	r7, #32
 81068a4:	46bd      	mov	sp, r7
 81068a6:	bd80      	pop	{r7, pc}

081068a8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 81068a8:	b580      	push	{r7, lr}
 81068aa:	b088      	sub	sp, #32
 81068ac:	af00      	add	r7, sp, #0
 81068ae:	6078      	str	r0, [r7, #4]
 81068b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 81068b2:	683b      	ldr	r3, [r7, #0]
 81068b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 81068b6:	2309      	movs	r3, #9
 81068b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 81068ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 81068be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81068c0:	2300      	movs	r3, #0
 81068c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81068c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81068c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81068ca:	f107 0308 	add.w	r3, r7, #8
 81068ce:	4619      	mov	r1, r3
 81068d0:	6878      	ldr	r0, [r7, #4]
 81068d2:	f7ff feef 	bl	81066b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 81068d6:	6878      	ldr	r0, [r7, #4]
 81068d8:	f000 f9ae 	bl	8106c38 <SDMMC_GetCmdResp2>
 81068dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81068de:	69fb      	ldr	r3, [r7, #28]
}
 81068e0:	4618      	mov	r0, r3
 81068e2:	3720      	adds	r7, #32
 81068e4:	46bd      	mov	sp, r7
 81068e6:	bd80      	pop	{r7, pc}

081068e8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 81068e8:	b580      	push	{r7, lr}
 81068ea:	b088      	sub	sp, #32
 81068ec:	af00      	add	r7, sp, #0
 81068ee:	6078      	str	r0, [r7, #4]
 81068f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 81068f2:	2300      	movs	r3, #0
 81068f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 81068f6:	2303      	movs	r3, #3
 81068f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81068fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 81068fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106900:	2300      	movs	r3, #0
 8106902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106908:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810690a:	f107 0308 	add.w	r3, r7, #8
 810690e:	4619      	mov	r1, r3
 8106910:	6878      	ldr	r0, [r7, #4]
 8106912:	f7ff fecf 	bl	81066b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8106916:	683a      	ldr	r2, [r7, #0]
 8106918:	2103      	movs	r1, #3
 810691a:	6878      	ldr	r0, [r7, #4]
 810691c:	f000 fa16 	bl	8106d4c <SDMMC_GetCmdResp6>
 8106920:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8106922:	69fb      	ldr	r3, [r7, #28]
}
 8106924:	4618      	mov	r0, r3
 8106926:	3720      	adds	r7, #32
 8106928:	46bd      	mov	sp, r7
 810692a:	bd80      	pop	{r7, pc}

0810692c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810692c:	b580      	push	{r7, lr}
 810692e:	b088      	sub	sp, #32
 8106930:	af00      	add	r7, sp, #0
 8106932:	6078      	str	r0, [r7, #4]
 8106934:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8106936:	683b      	ldr	r3, [r7, #0]
 8106938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810693a:	230d      	movs	r3, #13
 810693c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810693e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8106942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106944:	2300      	movs	r3, #0
 8106946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810694c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810694e:	f107 0308 	add.w	r3, r7, #8
 8106952:	4619      	mov	r1, r3
 8106954:	6878      	ldr	r0, [r7, #4]
 8106956:	f7ff fead 	bl	81066b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810695a:	f241 3288 	movw	r2, #5000	; 0x1388
 810695e:	210d      	movs	r1, #13
 8106960:	6878      	ldr	r0, [r7, #4]
 8106962:	f000 f877 	bl	8106a54 <SDMMC_GetCmdResp1>
 8106966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8106968:	69fb      	ldr	r3, [r7, #28]
}
 810696a:	4618      	mov	r0, r3
 810696c:	3720      	adds	r7, #32
 810696e:	46bd      	mov	sp, r7
 8106970:	bd80      	pop	{r7, pc}

08106972 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8106972:	b580      	push	{r7, lr}
 8106974:	b088      	sub	sp, #32
 8106976:	af00      	add	r7, sp, #0
 8106978:	6078      	str	r0, [r7, #4]
 810697a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810697c:	683b      	ldr	r3, [r7, #0]
 810697e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8106980:	2301      	movs	r3, #1
 8106982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8106984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8106988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810698a:	2300      	movs	r3, #0
 810698c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810698e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8106994:	f107 0308 	add.w	r3, r7, #8
 8106998:	4619      	mov	r1, r3
 810699a:	6878      	ldr	r0, [r7, #4]
 810699c:	f7ff fe8a 	bl	81066b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 81069a0:	6878      	ldr	r0, [r7, #4]
 81069a2:	f000 f993 	bl	8106ccc <SDMMC_GetCmdResp3>
 81069a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81069a8:	69fb      	ldr	r3, [r7, #28]
}
 81069aa:	4618      	mov	r0, r3
 81069ac:	3720      	adds	r7, #32
 81069ae:	46bd      	mov	sp, r7
 81069b0:	bd80      	pop	{r7, pc}

081069b2 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 81069b2:	b580      	push	{r7, lr}
 81069b4:	b088      	sub	sp, #32
 81069b6:	af00      	add	r7, sp, #0
 81069b8:	6078      	str	r0, [r7, #4]
 81069ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 81069bc:	683b      	ldr	r3, [r7, #0]
 81069be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 81069c0:	2308      	movs	r3, #8
 81069c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81069c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 81069c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81069ca:	2300      	movs	r3, #0
 81069cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81069ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81069d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81069d4:	f107 0308 	add.w	r3, r7, #8
 81069d8:	4619      	mov	r1, r3
 81069da:	6878      	ldr	r0, [r7, #4]
 81069dc:	f7ff fe6a 	bl	81066b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD,SDMMC_CMDTIMEOUT);
 81069e0:	f241 3288 	movw	r2, #5000	; 0x1388
 81069e4:	2108      	movs	r1, #8
 81069e6:	6878      	ldr	r0, [r7, #4]
 81069e8:	f000 f834 	bl	8106a54 <SDMMC_GetCmdResp1>
 81069ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81069ee:	69fb      	ldr	r3, [r7, #28]
}
 81069f0:	4618      	mov	r0, r3
 81069f2:	3720      	adds	r7, #32
 81069f4:	46bd      	mov	sp, r7
 81069f6:	bd80      	pop	{r7, pc}

081069f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 81069f8:	b480      	push	{r7}
 81069fa:	b085      	sub	sp, #20
 81069fc:	af00      	add	r7, sp, #0
 81069fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8106a00:	4b11      	ldr	r3, [pc, #68]	; (8106a48 <SDMMC_GetCmdError+0x50>)
 8106a02:	681b      	ldr	r3, [r3, #0]
 8106a04:	4a11      	ldr	r2, [pc, #68]	; (8106a4c <SDMMC_GetCmdError+0x54>)
 8106a06:	fba2 2303 	umull	r2, r3, r2, r3
 8106a0a:	0a5b      	lsrs	r3, r3, #9
 8106a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8106a10:	fb02 f303 	mul.w	r3, r2, r3
 8106a14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8106a16:	68fb      	ldr	r3, [r7, #12]
 8106a18:	1e5a      	subs	r2, r3, #1
 8106a1a:	60fa      	str	r2, [r7, #12]
 8106a1c:	2b00      	cmp	r3, #0
 8106a1e:	d102      	bne.n	8106a26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8106a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8106a24:	e009      	b.n	8106a3a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106a2e:	2b00      	cmp	r3, #0
 8106a30:	d0f1      	beq.n	8106a16 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8106a32:	687b      	ldr	r3, [r7, #4]
 8106a34:	4a06      	ldr	r2, [pc, #24]	; (8106a50 <SDMMC_GetCmdError+0x58>)
 8106a36:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8106a38:	2300      	movs	r3, #0
}
 8106a3a:	4618      	mov	r0, r3
 8106a3c:	3714      	adds	r7, #20
 8106a3e:	46bd      	mov	sp, r7
 8106a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a44:	4770      	bx	lr
 8106a46:	bf00      	nop
 8106a48:	10000000 	.word	0x10000000
 8106a4c:	10624dd3 	.word	0x10624dd3
 8106a50:	002000c5 	.word	0x002000c5

08106a54 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8106a54:	b580      	push	{r7, lr}
 8106a56:	b088      	sub	sp, #32
 8106a58:	af00      	add	r7, sp, #0
 8106a5a:	60f8      	str	r0, [r7, #12]
 8106a5c:	460b      	mov	r3, r1
 8106a5e:	607a      	str	r2, [r7, #4]
 8106a60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8106a62:	4b70      	ldr	r3, [pc, #448]	; (8106c24 <SDMMC_GetCmdResp1+0x1d0>)
 8106a64:	681b      	ldr	r3, [r3, #0]
 8106a66:	4a70      	ldr	r2, [pc, #448]	; (8106c28 <SDMMC_GetCmdResp1+0x1d4>)
 8106a68:	fba2 2303 	umull	r2, r3, r2, r3
 8106a6c:	0a5a      	lsrs	r2, r3, #9
 8106a6e:	687b      	ldr	r3, [r7, #4]
 8106a70:	fb02 f303 	mul.w	r3, r2, r3
 8106a74:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8106a76:	69fb      	ldr	r3, [r7, #28]
 8106a78:	1e5a      	subs	r2, r3, #1
 8106a7a:	61fa      	str	r2, [r7, #28]
 8106a7c:	2b00      	cmp	r3, #0
 8106a7e:	d102      	bne.n	8106a86 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8106a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8106a84:	e0c9      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8106a86:	68fb      	ldr	r3, [r7, #12]
 8106a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106a8a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8106a8c:	69ba      	ldr	r2, [r7, #24]
 8106a8e:	4b67      	ldr	r3, [pc, #412]	; (8106c2c <SDMMC_GetCmdResp1+0x1d8>)
 8106a90:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8106a92:	2b00      	cmp	r3, #0
 8106a94:	d0ef      	beq.n	8106a76 <SDMMC_GetCmdResp1+0x22>
 8106a96:	69bb      	ldr	r3, [r7, #24]
 8106a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8106a9c:	2b00      	cmp	r3, #0
 8106a9e:	d1ea      	bne.n	8106a76 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8106aa0:	68fb      	ldr	r3, [r7, #12]
 8106aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106aa4:	f003 0304 	and.w	r3, r3, #4
 8106aa8:	2b00      	cmp	r3, #0
 8106aaa:	d004      	beq.n	8106ab6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8106aac:	68fb      	ldr	r3, [r7, #12]
 8106aae:	2204      	movs	r2, #4
 8106ab0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8106ab2:	2304      	movs	r3, #4
 8106ab4:	e0b1      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8106ab6:	68fb      	ldr	r3, [r7, #12]
 8106ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106aba:	f003 0301 	and.w	r3, r3, #1
 8106abe:	2b00      	cmp	r3, #0
 8106ac0:	d004      	beq.n	8106acc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8106ac2:	68fb      	ldr	r3, [r7, #12]
 8106ac4:	2201      	movs	r2, #1
 8106ac6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8106ac8:	2301      	movs	r3, #1
 8106aca:	e0a6      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8106acc:	68fb      	ldr	r3, [r7, #12]
 8106ace:	4a58      	ldr	r2, [pc, #352]	; (8106c30 <SDMMC_GetCmdResp1+0x1dc>)
 8106ad0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8106ad2:	68f8      	ldr	r0, [r7, #12]
 8106ad4:	f7ff fe18 	bl	8106708 <SDMMC_GetCommandResponse>
 8106ad8:	4603      	mov	r3, r0
 8106ada:	461a      	mov	r2, r3
 8106adc:	7afb      	ldrb	r3, [r7, #11]
 8106ade:	4293      	cmp	r3, r2
 8106ae0:	d001      	beq.n	8106ae6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8106ae2:	2301      	movs	r3, #1
 8106ae4:	e099      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8106ae6:	2100      	movs	r1, #0
 8106ae8:	68f8      	ldr	r0, [r7, #12]
 8106aea:	f7ff fe1a 	bl	8106722 <SDMMC_GetResponse>
 8106aee:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8106af0:	697a      	ldr	r2, [r7, #20]
 8106af2:	4b50      	ldr	r3, [pc, #320]	; (8106c34 <SDMMC_GetCmdResp1+0x1e0>)
 8106af4:	4013      	ands	r3, r2
 8106af6:	2b00      	cmp	r3, #0
 8106af8:	d101      	bne.n	8106afe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8106afa:	2300      	movs	r3, #0
 8106afc:	e08d      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8106afe:	697b      	ldr	r3, [r7, #20]
 8106b00:	2b00      	cmp	r3, #0
 8106b02:	da02      	bge.n	8106b0a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8106b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106b08:	e087      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8106b0a:	697b      	ldr	r3, [r7, #20]
 8106b0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8106b10:	2b00      	cmp	r3, #0
 8106b12:	d001      	beq.n	8106b18 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8106b14:	2340      	movs	r3, #64	; 0x40
 8106b16:	e080      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8106b18:	697b      	ldr	r3, [r7, #20]
 8106b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106b1e:	2b00      	cmp	r3, #0
 8106b20:	d001      	beq.n	8106b26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8106b22:	2380      	movs	r3, #128	; 0x80
 8106b24:	e079      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8106b26:	697b      	ldr	r3, [r7, #20]
 8106b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106b2c:	2b00      	cmp	r3, #0
 8106b2e:	d002      	beq.n	8106b36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8106b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8106b34:	e071      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8106b36:	697b      	ldr	r3, [r7, #20]
 8106b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106b3c:	2b00      	cmp	r3, #0
 8106b3e:	d002      	beq.n	8106b46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8106b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8106b44:	e069      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8106b46:	697b      	ldr	r3, [r7, #20]
 8106b48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8106b4c:	2b00      	cmp	r3, #0
 8106b4e:	d002      	beq.n	8106b56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8106b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8106b54:	e061      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8106b56:	697b      	ldr	r3, [r7, #20]
 8106b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106b5c:	2b00      	cmp	r3, #0
 8106b5e:	d002      	beq.n	8106b66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8106b60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8106b64:	e059      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8106b66:	697b      	ldr	r3, [r7, #20]
 8106b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8106b6c:	2b00      	cmp	r3, #0
 8106b6e:	d002      	beq.n	8106b76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8106b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106b74:	e051      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8106b76:	697b      	ldr	r3, [r7, #20]
 8106b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106b7c:	2b00      	cmp	r3, #0
 8106b7e:	d002      	beq.n	8106b86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8106b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8106b84:	e049      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8106b86:	697b      	ldr	r3, [r7, #20]
 8106b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8106b8c:	2b00      	cmp	r3, #0
 8106b8e:	d002      	beq.n	8106b96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8106b90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8106b94:	e041      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8106b96:	697b      	ldr	r3, [r7, #20]
 8106b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106b9c:	2b00      	cmp	r3, #0
 8106b9e:	d002      	beq.n	8106ba6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8106ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106ba4:	e039      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8106ba6:	697b      	ldr	r3, [r7, #20]
 8106ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8106bac:	2b00      	cmp	r3, #0
 8106bae:	d002      	beq.n	8106bb6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8106bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8106bb4:	e031      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8106bb6:	697b      	ldr	r3, [r7, #20]
 8106bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106bbc:	2b00      	cmp	r3, #0
 8106bbe:	d002      	beq.n	8106bc6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8106bc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8106bc4:	e029      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8106bc6:	697b      	ldr	r3, [r7, #20]
 8106bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106bcc:	2b00      	cmp	r3, #0
 8106bce:	d002      	beq.n	8106bd6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8106bd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8106bd4:	e021      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8106bd6:	697b      	ldr	r3, [r7, #20]
 8106bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106bdc:	2b00      	cmp	r3, #0
 8106bde:	d002      	beq.n	8106be6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8106be0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8106be4:	e019      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8106be6:	697b      	ldr	r3, [r7, #20]
 8106be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8106bec:	2b00      	cmp	r3, #0
 8106bee:	d002      	beq.n	8106bf6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8106bf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8106bf4:	e011      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8106bf6:	697b      	ldr	r3, [r7, #20]
 8106bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8106bfc:	2b00      	cmp	r3, #0
 8106bfe:	d002      	beq.n	8106c06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8106c00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8106c04:	e009      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8106c06:	697b      	ldr	r3, [r7, #20]
 8106c08:	f003 0308 	and.w	r3, r3, #8
 8106c0c:	2b00      	cmp	r3, #0
 8106c0e:	d002      	beq.n	8106c16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8106c10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8106c14:	e001      	b.n	8106c1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8106c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8106c1a:	4618      	mov	r0, r3
 8106c1c:	3720      	adds	r7, #32
 8106c1e:	46bd      	mov	sp, r7
 8106c20:	bd80      	pop	{r7, pc}
 8106c22:	bf00      	nop
 8106c24:	10000000 	.word	0x10000000
 8106c28:	10624dd3 	.word	0x10624dd3
 8106c2c:	00200045 	.word	0x00200045
 8106c30:	002000c5 	.word	0x002000c5
 8106c34:	fdffe008 	.word	0xfdffe008

08106c38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8106c38:	b480      	push	{r7}
 8106c3a:	b085      	sub	sp, #20
 8106c3c:	af00      	add	r7, sp, #0
 8106c3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8106c40:	4b1f      	ldr	r3, [pc, #124]	; (8106cc0 <SDMMC_GetCmdResp2+0x88>)
 8106c42:	681b      	ldr	r3, [r3, #0]
 8106c44:	4a1f      	ldr	r2, [pc, #124]	; (8106cc4 <SDMMC_GetCmdResp2+0x8c>)
 8106c46:	fba2 2303 	umull	r2, r3, r2, r3
 8106c4a:	0a5b      	lsrs	r3, r3, #9
 8106c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8106c50:	fb02 f303 	mul.w	r3, r2, r3
 8106c54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8106c56:	68fb      	ldr	r3, [r7, #12]
 8106c58:	1e5a      	subs	r2, r3, #1
 8106c5a:	60fa      	str	r2, [r7, #12]
 8106c5c:	2b00      	cmp	r3, #0
 8106c5e:	d102      	bne.n	8106c66 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8106c60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8106c64:	e026      	b.n	8106cb4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8106c66:	687b      	ldr	r3, [r7, #4]
 8106c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106c6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8106c6c:	68bb      	ldr	r3, [r7, #8]
 8106c6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8106c72:	2b00      	cmp	r3, #0
 8106c74:	d0ef      	beq.n	8106c56 <SDMMC_GetCmdResp2+0x1e>
 8106c76:	68bb      	ldr	r3, [r7, #8]
 8106c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8106c7c:	2b00      	cmp	r3, #0
 8106c7e:	d1ea      	bne.n	8106c56 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8106c80:	687b      	ldr	r3, [r7, #4]
 8106c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106c84:	f003 0304 	and.w	r3, r3, #4
 8106c88:	2b00      	cmp	r3, #0
 8106c8a:	d004      	beq.n	8106c96 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	2204      	movs	r2, #4
 8106c90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8106c92:	2304      	movs	r3, #4
 8106c94:	e00e      	b.n	8106cb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106c9a:	f003 0301 	and.w	r3, r3, #1
 8106c9e:	2b00      	cmp	r3, #0
 8106ca0:	d004      	beq.n	8106cac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8106ca2:	687b      	ldr	r3, [r7, #4]
 8106ca4:	2201      	movs	r2, #1
 8106ca6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8106ca8:	2301      	movs	r3, #1
 8106caa:	e003      	b.n	8106cb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	4a06      	ldr	r2, [pc, #24]	; (8106cc8 <SDMMC_GetCmdResp2+0x90>)
 8106cb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8106cb2:	2300      	movs	r3, #0
}
 8106cb4:	4618      	mov	r0, r3
 8106cb6:	3714      	adds	r7, #20
 8106cb8:	46bd      	mov	sp, r7
 8106cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cbe:	4770      	bx	lr
 8106cc0:	10000000 	.word	0x10000000
 8106cc4:	10624dd3 	.word	0x10624dd3
 8106cc8:	002000c5 	.word	0x002000c5

08106ccc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8106ccc:	b480      	push	{r7}
 8106cce:	b085      	sub	sp, #20
 8106cd0:	af00      	add	r7, sp, #0
 8106cd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8106cd4:	4b1a      	ldr	r3, [pc, #104]	; (8106d40 <SDMMC_GetCmdResp3+0x74>)
 8106cd6:	681b      	ldr	r3, [r3, #0]
 8106cd8:	4a1a      	ldr	r2, [pc, #104]	; (8106d44 <SDMMC_GetCmdResp3+0x78>)
 8106cda:	fba2 2303 	umull	r2, r3, r2, r3
 8106cde:	0a5b      	lsrs	r3, r3, #9
 8106ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8106ce4:	fb02 f303 	mul.w	r3, r2, r3
 8106ce8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8106cea:	68fb      	ldr	r3, [r7, #12]
 8106cec:	1e5a      	subs	r2, r3, #1
 8106cee:	60fa      	str	r2, [r7, #12]
 8106cf0:	2b00      	cmp	r3, #0
 8106cf2:	d102      	bne.n	8106cfa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8106cf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8106cf8:	e01b      	b.n	8106d32 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8106cfa:	687b      	ldr	r3, [r7, #4]
 8106cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106cfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8106d00:	68bb      	ldr	r3, [r7, #8]
 8106d02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8106d06:	2b00      	cmp	r3, #0
 8106d08:	d0ef      	beq.n	8106cea <SDMMC_GetCmdResp3+0x1e>
 8106d0a:	68bb      	ldr	r3, [r7, #8]
 8106d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8106d10:	2b00      	cmp	r3, #0
 8106d12:	d1ea      	bne.n	8106cea <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8106d14:	687b      	ldr	r3, [r7, #4]
 8106d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106d18:	f003 0304 	and.w	r3, r3, #4
 8106d1c:	2b00      	cmp	r3, #0
 8106d1e:	d004      	beq.n	8106d2a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	2204      	movs	r2, #4
 8106d24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8106d26:	2304      	movs	r3, #4
 8106d28:	e003      	b.n	8106d32 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8106d2a:	687b      	ldr	r3, [r7, #4]
 8106d2c:	4a06      	ldr	r2, [pc, #24]	; (8106d48 <SDMMC_GetCmdResp3+0x7c>)
 8106d2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8106d30:	2300      	movs	r3, #0
}
 8106d32:	4618      	mov	r0, r3
 8106d34:	3714      	adds	r7, #20
 8106d36:	46bd      	mov	sp, r7
 8106d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d3c:	4770      	bx	lr
 8106d3e:	bf00      	nop
 8106d40:	10000000 	.word	0x10000000
 8106d44:	10624dd3 	.word	0x10624dd3
 8106d48:	002000c5 	.word	0x002000c5

08106d4c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8106d4c:	b580      	push	{r7, lr}
 8106d4e:	b088      	sub	sp, #32
 8106d50:	af00      	add	r7, sp, #0
 8106d52:	60f8      	str	r0, [r7, #12]
 8106d54:	460b      	mov	r3, r1
 8106d56:	607a      	str	r2, [r7, #4]
 8106d58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8106d5a:	4b35      	ldr	r3, [pc, #212]	; (8106e30 <SDMMC_GetCmdResp6+0xe4>)
 8106d5c:	681b      	ldr	r3, [r3, #0]
 8106d5e:	4a35      	ldr	r2, [pc, #212]	; (8106e34 <SDMMC_GetCmdResp6+0xe8>)
 8106d60:	fba2 2303 	umull	r2, r3, r2, r3
 8106d64:	0a5b      	lsrs	r3, r3, #9
 8106d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8106d6a:	fb02 f303 	mul.w	r3, r2, r3
 8106d6e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8106d70:	69fb      	ldr	r3, [r7, #28]
 8106d72:	1e5a      	subs	r2, r3, #1
 8106d74:	61fa      	str	r2, [r7, #28]
 8106d76:	2b00      	cmp	r3, #0
 8106d78:	d102      	bne.n	8106d80 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8106d7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8106d7e:	e052      	b.n	8106e26 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8106d80:	68fb      	ldr	r3, [r7, #12]
 8106d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106d84:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8106d86:	69bb      	ldr	r3, [r7, #24]
 8106d88:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8106d8c:	2b00      	cmp	r3, #0
 8106d8e:	d0ef      	beq.n	8106d70 <SDMMC_GetCmdResp6+0x24>
 8106d90:	69bb      	ldr	r3, [r7, #24]
 8106d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8106d96:	2b00      	cmp	r3, #0
 8106d98:	d1ea      	bne.n	8106d70 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8106d9a:	68fb      	ldr	r3, [r7, #12]
 8106d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106d9e:	f003 0304 	and.w	r3, r3, #4
 8106da2:	2b00      	cmp	r3, #0
 8106da4:	d004      	beq.n	8106db0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8106da6:	68fb      	ldr	r3, [r7, #12]
 8106da8:	2204      	movs	r2, #4
 8106daa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8106dac:	2304      	movs	r3, #4
 8106dae:	e03a      	b.n	8106e26 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8106db0:	68fb      	ldr	r3, [r7, #12]
 8106db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106db4:	f003 0301 	and.w	r3, r3, #1
 8106db8:	2b00      	cmp	r3, #0
 8106dba:	d004      	beq.n	8106dc6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8106dbc:	68fb      	ldr	r3, [r7, #12]
 8106dbe:	2201      	movs	r2, #1
 8106dc0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8106dc2:	2301      	movs	r3, #1
 8106dc4:	e02f      	b.n	8106e26 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8106dc6:	68f8      	ldr	r0, [r7, #12]
 8106dc8:	f7ff fc9e 	bl	8106708 <SDMMC_GetCommandResponse>
 8106dcc:	4603      	mov	r3, r0
 8106dce:	461a      	mov	r2, r3
 8106dd0:	7afb      	ldrb	r3, [r7, #11]
 8106dd2:	4293      	cmp	r3, r2
 8106dd4:	d001      	beq.n	8106dda <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8106dd6:	2301      	movs	r3, #1
 8106dd8:	e025      	b.n	8106e26 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8106dda:	68fb      	ldr	r3, [r7, #12]
 8106ddc:	4a16      	ldr	r2, [pc, #88]	; (8106e38 <SDMMC_GetCmdResp6+0xec>)
 8106dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8106de0:	2100      	movs	r1, #0
 8106de2:	68f8      	ldr	r0, [r7, #12]
 8106de4:	f7ff fc9d 	bl	8106722 <SDMMC_GetResponse>
 8106de8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8106dea:	697b      	ldr	r3, [r7, #20]
 8106dec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8106df0:	2b00      	cmp	r3, #0
 8106df2:	d106      	bne.n	8106e02 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8106df4:	697b      	ldr	r3, [r7, #20]
 8106df6:	0c1b      	lsrs	r3, r3, #16
 8106df8:	b29a      	uxth	r2, r3
 8106dfa:	687b      	ldr	r3, [r7, #4]
 8106dfc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8106dfe:	2300      	movs	r3, #0
 8106e00:	e011      	b.n	8106e26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8106e02:	697b      	ldr	r3, [r7, #20]
 8106e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8106e08:	2b00      	cmp	r3, #0
 8106e0a:	d002      	beq.n	8106e12 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8106e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8106e10:	e009      	b.n	8106e26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8106e12:	697b      	ldr	r3, [r7, #20]
 8106e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106e18:	2b00      	cmp	r3, #0
 8106e1a:	d002      	beq.n	8106e22 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8106e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106e20:	e001      	b.n	8106e26 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8106e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8106e26:	4618      	mov	r0, r3
 8106e28:	3720      	adds	r7, #32
 8106e2a:	46bd      	mov	sp, r7
 8106e2c:	bd80      	pop	{r7, pc}
 8106e2e:	bf00      	nop
 8106e30:	10000000 	.word	0x10000000
 8106e34:	10624dd3 	.word	0x10624dd3
 8106e38:	002000c5 	.word	0x002000c5

08106e3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8106e3c:	b084      	sub	sp, #16
 8106e3e:	b580      	push	{r7, lr}
 8106e40:	b084      	sub	sp, #16
 8106e42:	af00      	add	r7, sp, #0
 8106e44:	6078      	str	r0, [r7, #4]
 8106e46:	f107 001c 	add.w	r0, r7, #28
 8106e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8106e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e50:	2b01      	cmp	r3, #1
 8106e52:	d122      	bne.n	8106e9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8106e54:	687b      	ldr	r3, [r7, #4]
 8106e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106e58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106e5c:	687b      	ldr	r3, [r7, #4]
 8106e5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8106e60:	687b      	ldr	r3, [r7, #4]
 8106e62:	68db      	ldr	r3, [r3, #12]
 8106e64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8106e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106e6c:	687a      	ldr	r2, [r7, #4]
 8106e6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8106e70:	687b      	ldr	r3, [r7, #4]
 8106e72:	68db      	ldr	r3, [r3, #12]
 8106e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8106e78:	687b      	ldr	r3, [r7, #4]
 8106e7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8106e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106e7e:	2b01      	cmp	r3, #1
 8106e80:	d105      	bne.n	8106e8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8106e82:	687b      	ldr	r3, [r7, #4]
 8106e84:	68db      	ldr	r3, [r3, #12]
 8106e86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8106e8a:	687b      	ldr	r3, [r7, #4]
 8106e8c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8106e8e:	6878      	ldr	r0, [r7, #4]
 8106e90:	f000 fa48 	bl	8107324 <USB_CoreReset>
 8106e94:	4603      	mov	r3, r0
 8106e96:	73fb      	strb	r3, [r7, #15]
 8106e98:	e01a      	b.n	8106ed0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8106e9a:	687b      	ldr	r3, [r7, #4]
 8106e9c:	68db      	ldr	r3, [r3, #12]
 8106e9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106ea2:	687b      	ldr	r3, [r7, #4]
 8106ea4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8106ea6:	6878      	ldr	r0, [r7, #4]
 8106ea8:	f000 fa3c 	bl	8107324 <USB_CoreReset>
 8106eac:	4603      	mov	r3, r0
 8106eae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8106eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106eb2:	2b00      	cmp	r3, #0
 8106eb4:	d106      	bne.n	8106ec4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8106eb6:	687b      	ldr	r3, [r7, #4]
 8106eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106eba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8106ebe:	687b      	ldr	r3, [r7, #4]
 8106ec0:	639a      	str	r2, [r3, #56]	; 0x38
 8106ec2:	e005      	b.n	8106ed0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8106ec4:	687b      	ldr	r3, [r7, #4]
 8106ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106ec8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106ecc:	687b      	ldr	r3, [r7, #4]
 8106ece:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8106ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ed2:	2b01      	cmp	r3, #1
 8106ed4:	d10b      	bne.n	8106eee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8106ed6:	687b      	ldr	r3, [r7, #4]
 8106ed8:	689b      	ldr	r3, [r3, #8]
 8106eda:	f043 0206 	orr.w	r2, r3, #6
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8106ee2:	687b      	ldr	r3, [r7, #4]
 8106ee4:	689b      	ldr	r3, [r3, #8]
 8106ee6:	f043 0220 	orr.w	r2, r3, #32
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8106eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8106ef0:	4618      	mov	r0, r3
 8106ef2:	3710      	adds	r7, #16
 8106ef4:	46bd      	mov	sp, r7
 8106ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8106efa:	b004      	add	sp, #16
 8106efc:	4770      	bx	lr

08106efe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8106efe:	b480      	push	{r7}
 8106f00:	b083      	sub	sp, #12
 8106f02:	af00      	add	r7, sp, #0
 8106f04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8106f06:	687b      	ldr	r3, [r7, #4]
 8106f08:	689b      	ldr	r3, [r3, #8]
 8106f0a:	f023 0201 	bic.w	r2, r3, #1
 8106f0e:	687b      	ldr	r3, [r7, #4]
 8106f10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8106f12:	2300      	movs	r3, #0
}
 8106f14:	4618      	mov	r0, r3
 8106f16:	370c      	adds	r7, #12
 8106f18:	46bd      	mov	sp, r7
 8106f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f1e:	4770      	bx	lr

08106f20 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8106f20:	b580      	push	{r7, lr}
 8106f22:	b082      	sub	sp, #8
 8106f24:	af00      	add	r7, sp, #0
 8106f26:	6078      	str	r0, [r7, #4]
 8106f28:	460b      	mov	r3, r1
 8106f2a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	68db      	ldr	r3, [r3, #12]
 8106f30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8106f38:	78fb      	ldrb	r3, [r7, #3]
 8106f3a:	2b01      	cmp	r3, #1
 8106f3c:	d106      	bne.n	8106f4c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8106f3e:	687b      	ldr	r3, [r7, #4]
 8106f40:	68db      	ldr	r3, [r3, #12]
 8106f42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8106f46:	687b      	ldr	r3, [r7, #4]
 8106f48:	60da      	str	r2, [r3, #12]
 8106f4a:	e00b      	b.n	8106f64 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8106f4c:	78fb      	ldrb	r3, [r7, #3]
 8106f4e:	2b00      	cmp	r3, #0
 8106f50:	d106      	bne.n	8106f60 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8106f52:	687b      	ldr	r3, [r7, #4]
 8106f54:	68db      	ldr	r3, [r3, #12]
 8106f56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8106f5a:	687b      	ldr	r3, [r7, #4]
 8106f5c:	60da      	str	r2, [r3, #12]
 8106f5e:	e001      	b.n	8106f64 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8106f60:	2301      	movs	r3, #1
 8106f62:	e003      	b.n	8106f6c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8106f64:	2032      	movs	r0, #50	; 0x32
 8106f66:	f7fa fd2b 	bl	81019c0 <HAL_Delay>

  return HAL_OK;
 8106f6a:	2300      	movs	r3, #0
}
 8106f6c:	4618      	mov	r0, r3
 8106f6e:	3708      	adds	r7, #8
 8106f70:	46bd      	mov	sp, r7
 8106f72:	bd80      	pop	{r7, pc}

08106f74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8106f74:	b084      	sub	sp, #16
 8106f76:	b580      	push	{r7, lr}
 8106f78:	b086      	sub	sp, #24
 8106f7a:	af00      	add	r7, sp, #0
 8106f7c:	6078      	str	r0, [r7, #4]
 8106f7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8106f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8106f86:	2300      	movs	r3, #0
 8106f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8106f8a:	687b      	ldr	r3, [r7, #4]
 8106f8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8106f8e:	2300      	movs	r3, #0
 8106f90:	613b      	str	r3, [r7, #16]
 8106f92:	e009      	b.n	8106fa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8106f94:	687a      	ldr	r2, [r7, #4]
 8106f96:	693b      	ldr	r3, [r7, #16]
 8106f98:	3340      	adds	r3, #64	; 0x40
 8106f9a:	009b      	lsls	r3, r3, #2
 8106f9c:	4413      	add	r3, r2
 8106f9e:	2200      	movs	r2, #0
 8106fa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8106fa2:	693b      	ldr	r3, [r7, #16]
 8106fa4:	3301      	adds	r3, #1
 8106fa6:	613b      	str	r3, [r7, #16]
 8106fa8:	693b      	ldr	r3, [r7, #16]
 8106faa:	2b0e      	cmp	r3, #14
 8106fac:	d9f2      	bls.n	8106f94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8106fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106fb0:	2b00      	cmp	r3, #0
 8106fb2:	d11c      	bne.n	8106fee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8106fb4:	68fb      	ldr	r3, [r7, #12]
 8106fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8106fba:	685b      	ldr	r3, [r3, #4]
 8106fbc:	68fa      	ldr	r2, [r7, #12]
 8106fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8106fc2:	f043 0302 	orr.w	r3, r3, #2
 8106fc6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8106fc8:	687b      	ldr	r3, [r7, #4]
 8106fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106fcc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8106fd0:	687b      	ldr	r3, [r7, #4]
 8106fd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8106fd4:	687b      	ldr	r3, [r7, #4]
 8106fd6:	681b      	ldr	r3, [r3, #0]
 8106fd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8106fe0:	687b      	ldr	r3, [r7, #4]
 8106fe2:	681b      	ldr	r3, [r3, #0]
 8106fe4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8106fe8:	687b      	ldr	r3, [r7, #4]
 8106fea:	601a      	str	r2, [r3, #0]
 8106fec:	e005      	b.n	8106ffa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106ff2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8106ffa:	68fb      	ldr	r3, [r7, #12]
 8106ffc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8107000:	461a      	mov	r2, r3
 8107002:	2300      	movs	r3, #0
 8107004:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8107006:	68fb      	ldr	r3, [r7, #12]
 8107008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810700c:	4619      	mov	r1, r3
 810700e:	68fb      	ldr	r3, [r7, #12]
 8107010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8107014:	461a      	mov	r2, r3
 8107016:	680b      	ldr	r3, [r1, #0]
 8107018:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810701c:	2b01      	cmp	r3, #1
 810701e:	d10c      	bne.n	810703a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8107020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107022:	2b00      	cmp	r3, #0
 8107024:	d104      	bne.n	8107030 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8107026:	2100      	movs	r1, #0
 8107028:	6878      	ldr	r0, [r7, #4]
 810702a:	f000 f949 	bl	81072c0 <USB_SetDevSpeed>
 810702e:	e008      	b.n	8107042 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8107030:	2101      	movs	r1, #1
 8107032:	6878      	ldr	r0, [r7, #4]
 8107034:	f000 f944 	bl	81072c0 <USB_SetDevSpeed>
 8107038:	e003      	b.n	8107042 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810703a:	2103      	movs	r1, #3
 810703c:	6878      	ldr	r0, [r7, #4]
 810703e:	f000 f93f 	bl	81072c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8107042:	2110      	movs	r1, #16
 8107044:	6878      	ldr	r0, [r7, #4]
 8107046:	f000 f8f3 	bl	8107230 <USB_FlushTxFifo>
 810704a:	4603      	mov	r3, r0
 810704c:	2b00      	cmp	r3, #0
 810704e:	d001      	beq.n	8107054 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8107050:	2301      	movs	r3, #1
 8107052:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8107054:	6878      	ldr	r0, [r7, #4]
 8107056:	f000 f911 	bl	810727c <USB_FlushRxFifo>
 810705a:	4603      	mov	r3, r0
 810705c:	2b00      	cmp	r3, #0
 810705e:	d001      	beq.n	8107064 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8107060:	2301      	movs	r3, #1
 8107062:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8107064:	68fb      	ldr	r3, [r7, #12]
 8107066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810706a:	461a      	mov	r2, r3
 810706c:	2300      	movs	r3, #0
 810706e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8107070:	68fb      	ldr	r3, [r7, #12]
 8107072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8107076:	461a      	mov	r2, r3
 8107078:	2300      	movs	r3, #0
 810707a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810707c:	68fb      	ldr	r3, [r7, #12]
 810707e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8107082:	461a      	mov	r2, r3
 8107084:	2300      	movs	r3, #0
 8107086:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107088:	2300      	movs	r3, #0
 810708a:	613b      	str	r3, [r7, #16]
 810708c:	e043      	b.n	8107116 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810708e:	693b      	ldr	r3, [r7, #16]
 8107090:	015a      	lsls	r2, r3, #5
 8107092:	68fb      	ldr	r3, [r7, #12]
 8107094:	4413      	add	r3, r2
 8107096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810709a:	681b      	ldr	r3, [r3, #0]
 810709c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81070a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 81070a4:	d118      	bne.n	81070d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 81070a6:	693b      	ldr	r3, [r7, #16]
 81070a8:	2b00      	cmp	r3, #0
 81070aa:	d10a      	bne.n	81070c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 81070ac:	693b      	ldr	r3, [r7, #16]
 81070ae:	015a      	lsls	r2, r3, #5
 81070b0:	68fb      	ldr	r3, [r7, #12]
 81070b2:	4413      	add	r3, r2
 81070b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81070b8:	461a      	mov	r2, r3
 81070ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 81070be:	6013      	str	r3, [r2, #0]
 81070c0:	e013      	b.n	81070ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 81070c2:	693b      	ldr	r3, [r7, #16]
 81070c4:	015a      	lsls	r2, r3, #5
 81070c6:	68fb      	ldr	r3, [r7, #12]
 81070c8:	4413      	add	r3, r2
 81070ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81070ce:	461a      	mov	r2, r3
 81070d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 81070d4:	6013      	str	r3, [r2, #0]
 81070d6:	e008      	b.n	81070ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 81070d8:	693b      	ldr	r3, [r7, #16]
 81070da:	015a      	lsls	r2, r3, #5
 81070dc:	68fb      	ldr	r3, [r7, #12]
 81070de:	4413      	add	r3, r2
 81070e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81070e4:	461a      	mov	r2, r3
 81070e6:	2300      	movs	r3, #0
 81070e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 81070ea:	693b      	ldr	r3, [r7, #16]
 81070ec:	015a      	lsls	r2, r3, #5
 81070ee:	68fb      	ldr	r3, [r7, #12]
 81070f0:	4413      	add	r3, r2
 81070f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81070f6:	461a      	mov	r2, r3
 81070f8:	2300      	movs	r3, #0
 81070fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 81070fc:	693b      	ldr	r3, [r7, #16]
 81070fe:	015a      	lsls	r2, r3, #5
 8107100:	68fb      	ldr	r3, [r7, #12]
 8107102:	4413      	add	r3, r2
 8107104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8107108:	461a      	mov	r2, r3
 810710a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810710e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8107110:	693b      	ldr	r3, [r7, #16]
 8107112:	3301      	adds	r3, #1
 8107114:	613b      	str	r3, [r7, #16]
 8107116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107118:	693a      	ldr	r2, [r7, #16]
 810711a:	429a      	cmp	r2, r3
 810711c:	d3b7      	bcc.n	810708e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810711e:	2300      	movs	r3, #0
 8107120:	613b      	str	r3, [r7, #16]
 8107122:	e043      	b.n	81071ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8107124:	693b      	ldr	r3, [r7, #16]
 8107126:	015a      	lsls	r2, r3, #5
 8107128:	68fb      	ldr	r3, [r7, #12]
 810712a:	4413      	add	r3, r2
 810712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8107130:	681b      	ldr	r3, [r3, #0]
 8107132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8107136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810713a:	d118      	bne.n	810716e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 810713c:	693b      	ldr	r3, [r7, #16]
 810713e:	2b00      	cmp	r3, #0
 8107140:	d10a      	bne.n	8107158 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8107142:	693b      	ldr	r3, [r7, #16]
 8107144:	015a      	lsls	r2, r3, #5
 8107146:	68fb      	ldr	r3, [r7, #12]
 8107148:	4413      	add	r3, r2
 810714a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810714e:	461a      	mov	r2, r3
 8107150:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8107154:	6013      	str	r3, [r2, #0]
 8107156:	e013      	b.n	8107180 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8107158:	693b      	ldr	r3, [r7, #16]
 810715a:	015a      	lsls	r2, r3, #5
 810715c:	68fb      	ldr	r3, [r7, #12]
 810715e:	4413      	add	r3, r2
 8107160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8107164:	461a      	mov	r2, r3
 8107166:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 810716a:	6013      	str	r3, [r2, #0]
 810716c:	e008      	b.n	8107180 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810716e:	693b      	ldr	r3, [r7, #16]
 8107170:	015a      	lsls	r2, r3, #5
 8107172:	68fb      	ldr	r3, [r7, #12]
 8107174:	4413      	add	r3, r2
 8107176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810717a:	461a      	mov	r2, r3
 810717c:	2300      	movs	r3, #0
 810717e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8107180:	693b      	ldr	r3, [r7, #16]
 8107182:	015a      	lsls	r2, r3, #5
 8107184:	68fb      	ldr	r3, [r7, #12]
 8107186:	4413      	add	r3, r2
 8107188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810718c:	461a      	mov	r2, r3
 810718e:	2300      	movs	r3, #0
 8107190:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8107192:	693b      	ldr	r3, [r7, #16]
 8107194:	015a      	lsls	r2, r3, #5
 8107196:	68fb      	ldr	r3, [r7, #12]
 8107198:	4413      	add	r3, r2
 810719a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810719e:	461a      	mov	r2, r3
 81071a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 81071a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 81071a6:	693b      	ldr	r3, [r7, #16]
 81071a8:	3301      	adds	r3, #1
 81071aa:	613b      	str	r3, [r7, #16]
 81071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81071ae:	693a      	ldr	r2, [r7, #16]
 81071b0:	429a      	cmp	r2, r3
 81071b2:	d3b7      	bcc.n	8107124 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 81071b4:	68fb      	ldr	r3, [r7, #12]
 81071b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81071ba:	691b      	ldr	r3, [r3, #16]
 81071bc:	68fa      	ldr	r2, [r7, #12]
 81071be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81071c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81071c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 81071c8:	687b      	ldr	r3, [r7, #4]
 81071ca:	2200      	movs	r2, #0
 81071cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 81071ce:	687b      	ldr	r3, [r7, #4]
 81071d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 81071d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 81071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81071d8:	2b00      	cmp	r3, #0
 81071da:	d105      	bne.n	81071e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 81071dc:	687b      	ldr	r3, [r7, #4]
 81071de:	699b      	ldr	r3, [r3, #24]
 81071e0:	f043 0210 	orr.w	r2, r3, #16
 81071e4:	687b      	ldr	r3, [r7, #4]
 81071e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 81071e8:	687b      	ldr	r3, [r7, #4]
 81071ea:	699a      	ldr	r2, [r3, #24]
 81071ec:	4b0f      	ldr	r3, [pc, #60]	; (810722c <USB_DevInit+0x2b8>)
 81071ee:	4313      	orrs	r3, r2
 81071f0:	687a      	ldr	r2, [r7, #4]
 81071f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 81071f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81071f6:	2b00      	cmp	r3, #0
 81071f8:	d005      	beq.n	8107206 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 81071fa:	687b      	ldr	r3, [r7, #4]
 81071fc:	699b      	ldr	r3, [r3, #24]
 81071fe:	f043 0208 	orr.w	r2, r3, #8
 8107202:	687b      	ldr	r3, [r7, #4]
 8107204:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8107206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107208:	2b01      	cmp	r3, #1
 810720a:	d107      	bne.n	810721c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810720c:	687b      	ldr	r3, [r7, #4]
 810720e:	699b      	ldr	r3, [r3, #24]
 8107210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8107214:	f043 0304 	orr.w	r3, r3, #4
 8107218:	687a      	ldr	r2, [r7, #4]
 810721a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810721c:	7dfb      	ldrb	r3, [r7, #23]
}
 810721e:	4618      	mov	r0, r3
 8107220:	3718      	adds	r7, #24
 8107222:	46bd      	mov	sp, r7
 8107224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8107228:	b004      	add	sp, #16
 810722a:	4770      	bx	lr
 810722c:	803c3800 	.word	0x803c3800

08107230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8107230:	b480      	push	{r7}
 8107232:	b085      	sub	sp, #20
 8107234:	af00      	add	r7, sp, #0
 8107236:	6078      	str	r0, [r7, #4]
 8107238:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 810723a:	2300      	movs	r3, #0
 810723c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810723e:	683b      	ldr	r3, [r7, #0]
 8107240:	019b      	lsls	r3, r3, #6
 8107242:	f043 0220 	orr.w	r2, r3, #32
 8107246:	687b      	ldr	r3, [r7, #4]
 8107248:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810724a:	68fb      	ldr	r3, [r7, #12]
 810724c:	3301      	adds	r3, #1
 810724e:	60fb      	str	r3, [r7, #12]
 8107250:	68fb      	ldr	r3, [r7, #12]
 8107252:	4a09      	ldr	r2, [pc, #36]	; (8107278 <USB_FlushTxFifo+0x48>)
 8107254:	4293      	cmp	r3, r2
 8107256:	d901      	bls.n	810725c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8107258:	2303      	movs	r3, #3
 810725a:	e006      	b.n	810726a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	691b      	ldr	r3, [r3, #16]
 8107260:	f003 0320 	and.w	r3, r3, #32
 8107264:	2b20      	cmp	r3, #32
 8107266:	d0f0      	beq.n	810724a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8107268:	2300      	movs	r3, #0
}
 810726a:	4618      	mov	r0, r3
 810726c:	3714      	adds	r7, #20
 810726e:	46bd      	mov	sp, r7
 8107270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107274:	4770      	bx	lr
 8107276:	bf00      	nop
 8107278:	00030d40 	.word	0x00030d40

0810727c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810727c:	b480      	push	{r7}
 810727e:	b085      	sub	sp, #20
 8107280:	af00      	add	r7, sp, #0
 8107282:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8107284:	2300      	movs	r3, #0
 8107286:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8107288:	687b      	ldr	r3, [r7, #4]
 810728a:	2210      	movs	r2, #16
 810728c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810728e:	68fb      	ldr	r3, [r7, #12]
 8107290:	3301      	adds	r3, #1
 8107292:	60fb      	str	r3, [r7, #12]
 8107294:	68fb      	ldr	r3, [r7, #12]
 8107296:	4a09      	ldr	r2, [pc, #36]	; (81072bc <USB_FlushRxFifo+0x40>)
 8107298:	4293      	cmp	r3, r2
 810729a:	d901      	bls.n	81072a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 810729c:	2303      	movs	r3, #3
 810729e:	e006      	b.n	81072ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 81072a0:	687b      	ldr	r3, [r7, #4]
 81072a2:	691b      	ldr	r3, [r3, #16]
 81072a4:	f003 0310 	and.w	r3, r3, #16
 81072a8:	2b10      	cmp	r3, #16
 81072aa:	d0f0      	beq.n	810728e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 81072ac:	2300      	movs	r3, #0
}
 81072ae:	4618      	mov	r0, r3
 81072b0:	3714      	adds	r7, #20
 81072b2:	46bd      	mov	sp, r7
 81072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072b8:	4770      	bx	lr
 81072ba:	bf00      	nop
 81072bc:	00030d40 	.word	0x00030d40

081072c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 81072c0:	b480      	push	{r7}
 81072c2:	b085      	sub	sp, #20
 81072c4:	af00      	add	r7, sp, #0
 81072c6:	6078      	str	r0, [r7, #4]
 81072c8:	460b      	mov	r3, r1
 81072ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81072cc:	687b      	ldr	r3, [r7, #4]
 81072ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 81072d0:	68fb      	ldr	r3, [r7, #12]
 81072d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81072d6:	681a      	ldr	r2, [r3, #0]
 81072d8:	78fb      	ldrb	r3, [r7, #3]
 81072da:	68f9      	ldr	r1, [r7, #12]
 81072dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 81072e0:	4313      	orrs	r3, r2
 81072e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 81072e4:	2300      	movs	r3, #0
}
 81072e6:	4618      	mov	r0, r3
 81072e8:	3714      	adds	r7, #20
 81072ea:	46bd      	mov	sp, r7
 81072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072f0:	4770      	bx	lr

081072f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 81072f2:	b580      	push	{r7, lr}
 81072f4:	b084      	sub	sp, #16
 81072f6:	af00      	add	r7, sp, #0
 81072f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81072fa:	687b      	ldr	r3, [r7, #4]
 81072fc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 81072fe:	68fb      	ldr	r3, [r7, #12]
 8107300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8107304:	685b      	ldr	r3, [r3, #4]
 8107306:	68fa      	ldr	r2, [r7, #12]
 8107308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810730c:	f043 0302 	orr.w	r3, r3, #2
 8107310:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8107312:	2003      	movs	r0, #3
 8107314:	f7fa fb54 	bl	81019c0 <HAL_Delay>

  return HAL_OK;
 8107318:	2300      	movs	r3, #0
}
 810731a:	4618      	mov	r0, r3
 810731c:	3710      	adds	r7, #16
 810731e:	46bd      	mov	sp, r7
 8107320:	bd80      	pop	{r7, pc}
	...

08107324 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8107324:	b480      	push	{r7}
 8107326:	b085      	sub	sp, #20
 8107328:	af00      	add	r7, sp, #0
 810732a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 810732c:	2300      	movs	r3, #0
 810732e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8107330:	68fb      	ldr	r3, [r7, #12]
 8107332:	3301      	adds	r3, #1
 8107334:	60fb      	str	r3, [r7, #12]
 8107336:	68fb      	ldr	r3, [r7, #12]
 8107338:	4a13      	ldr	r2, [pc, #76]	; (8107388 <USB_CoreReset+0x64>)
 810733a:	4293      	cmp	r3, r2
 810733c:	d901      	bls.n	8107342 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810733e:	2303      	movs	r3, #3
 8107340:	e01b      	b.n	810737a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8107342:	687b      	ldr	r3, [r7, #4]
 8107344:	691b      	ldr	r3, [r3, #16]
 8107346:	2b00      	cmp	r3, #0
 8107348:	daf2      	bge.n	8107330 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810734a:	2300      	movs	r3, #0
 810734c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810734e:	687b      	ldr	r3, [r7, #4]
 8107350:	691b      	ldr	r3, [r3, #16]
 8107352:	f043 0201 	orr.w	r2, r3, #1
 8107356:	687b      	ldr	r3, [r7, #4]
 8107358:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810735a:	68fb      	ldr	r3, [r7, #12]
 810735c:	3301      	adds	r3, #1
 810735e:	60fb      	str	r3, [r7, #12]
 8107360:	68fb      	ldr	r3, [r7, #12]
 8107362:	4a09      	ldr	r2, [pc, #36]	; (8107388 <USB_CoreReset+0x64>)
 8107364:	4293      	cmp	r3, r2
 8107366:	d901      	bls.n	810736c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8107368:	2303      	movs	r3, #3
 810736a:	e006      	b.n	810737a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810736c:	687b      	ldr	r3, [r7, #4]
 810736e:	691b      	ldr	r3, [r3, #16]
 8107370:	f003 0301 	and.w	r3, r3, #1
 8107374:	2b01      	cmp	r3, #1
 8107376:	d0f0      	beq.n	810735a <USB_CoreReset+0x36>

  return HAL_OK;
 8107378:	2300      	movs	r3, #0
}
 810737a:	4618      	mov	r0, r3
 810737c:	3714      	adds	r7, #20
 810737e:	46bd      	mov	sp, r7
 8107380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107384:	4770      	bx	lr
 8107386:	bf00      	nop
 8107388:	00030d40 	.word	0x00030d40

0810738c <__libc_init_array>:
 810738c:	b570      	push	{r4, r5, r6, lr}
 810738e:	4e0d      	ldr	r6, [pc, #52]	; (81073c4 <__libc_init_array+0x38>)
 8107390:	4c0d      	ldr	r4, [pc, #52]	; (81073c8 <__libc_init_array+0x3c>)
 8107392:	1ba4      	subs	r4, r4, r6
 8107394:	10a4      	asrs	r4, r4, #2
 8107396:	2500      	movs	r5, #0
 8107398:	42a5      	cmp	r5, r4
 810739a:	d109      	bne.n	81073b0 <__libc_init_array+0x24>
 810739c:	4e0b      	ldr	r6, [pc, #44]	; (81073cc <__libc_init_array+0x40>)
 810739e:	4c0c      	ldr	r4, [pc, #48]	; (81073d0 <__libc_init_array+0x44>)
 81073a0:	f000 f82c 	bl	81073fc <_init>
 81073a4:	1ba4      	subs	r4, r4, r6
 81073a6:	10a4      	asrs	r4, r4, #2
 81073a8:	2500      	movs	r5, #0
 81073aa:	42a5      	cmp	r5, r4
 81073ac:	d105      	bne.n	81073ba <__libc_init_array+0x2e>
 81073ae:	bd70      	pop	{r4, r5, r6, pc}
 81073b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 81073b4:	4798      	blx	r3
 81073b6:	3501      	adds	r5, #1
 81073b8:	e7ee      	b.n	8107398 <__libc_init_array+0xc>
 81073ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 81073be:	4798      	blx	r3
 81073c0:	3501      	adds	r5, #1
 81073c2:	e7f2      	b.n	81073aa <__libc_init_array+0x1e>
 81073c4:	081074a0 	.word	0x081074a0
 81073c8:	081074a0 	.word	0x081074a0
 81073cc:	081074a0 	.word	0x081074a0
 81073d0:	081074a4 	.word	0x081074a4

081073d4 <memcpy>:
 81073d4:	b510      	push	{r4, lr}
 81073d6:	1e43      	subs	r3, r0, #1
 81073d8:	440a      	add	r2, r1
 81073da:	4291      	cmp	r1, r2
 81073dc:	d100      	bne.n	81073e0 <memcpy+0xc>
 81073de:	bd10      	pop	{r4, pc}
 81073e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 81073e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 81073e8:	e7f7      	b.n	81073da <memcpy+0x6>

081073ea <memset>:
 81073ea:	4402      	add	r2, r0
 81073ec:	4603      	mov	r3, r0
 81073ee:	4293      	cmp	r3, r2
 81073f0:	d100      	bne.n	81073f4 <memset+0xa>
 81073f2:	4770      	bx	lr
 81073f4:	f803 1b01 	strb.w	r1, [r3], #1
 81073f8:	e7f9      	b.n	81073ee <memset+0x4>
	...

081073fc <_init>:
 81073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81073fe:	bf00      	nop
 8107400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107402:	bc08      	pop	{r3}
 8107404:	469e      	mov	lr, r3
 8107406:	4770      	bx	lr

08107408 <_fini>:
 8107408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810740a:	bf00      	nop
 810740c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810740e:	bc08      	pop	{r3}
 8107410:	469e      	mov	lr, r3
 8107412:	4770      	bx	lr
