
TouchGFX_Test_01_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0001a910  20000000  08003990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  2001a910  0801e2a0  0003a910  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2001a9e0  0801e2a0  0003a9e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0003a910  2**0
                  CONTENTS, READONLY
  9 .debug_info   000119ac  00000000  00000000  0003a93e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000205d  00000000  00000000  0004c2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000980  00000000  00000000  0004e348  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008b8  00000000  00000000  0004ecc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000376f4  00000000  00000000  0004f580  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000892d  00000000  00000000  00086c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0016f4b6  00000000  00000000  0008f5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001fea57  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000025bc  00000000  00000000  001fead4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2001a910 	.word	0x2001a910
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003960 	.word	0x08003960

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2001a914 	.word	0x2001a914
 80002d4:	08003960 	.word	0x08003960

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b38      	ldr	r3, [pc, #224]	; (80004fc <main+0xf0>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	69fb      	ldr	r3, [r7, #28]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	61fa      	str	r2, [r7, #28]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	69fb      	ldr	r3, [r7, #28]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 fab5 	bl	80009a4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fbdd 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f86b 	bl	8000518 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000442:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <main+0xf0>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	4a2c      	ldr	r2, [pc, #176]	; (80004fc <main+0xf0>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000452:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <main+0xf0>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f000 ff51 	bl	8001308 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000466:	2100      	movs	r1, #0
 8000468:	2000      	movs	r0, #0
 800046a:	f000 ff67 	bl	800133c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b21      	ldr	r3, [pc, #132]	; (80004fc <main+0xf0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x80>
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	61fa      	str	r2, [r7, #28]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x6a>
if ( timeout < 0 )
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x8a>
{
Error_Handler();
 8000492:	f000 fa87 	bl	80009a4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f9ef 	bl	8000878 <MX_GPIO_Init>
  MX_LTDC_Init();
 800049a:	f000 f939 	bl	8000710 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  HAL_LTDC_SetAddress (&hltdc , (uint32_t)&framebuffer, LTDC_LAYER_1);
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <main+0xf4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	4619      	mov	r1, r3
 80004a4:	4817      	ldr	r0, [pc, #92]	; (8000504 <main+0xf8>)
 80004a6:	f001 f86b 	bl	8001580 <HAL_LTDC_SetAddress>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t* code = (uint32_t*)0x08000000;
 80004aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004ae:	61bb      	str	r3, [r7, #24]
  uint32_t* stop = (uint32_t*)0x08020000;
 80004b0:	4b15      	ldr	r3, [pc, #84]	; (8000508 <main+0xfc>)
 80004b2:	613b      	str	r3, [r7, #16]
  uint32_t mem_sum = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]

  uint32_t start = HAL_GetTick();
 80004b8:	f000 fc24 	bl	8000d04 <HAL_GetTick>
 80004bc:	60f8      	str	r0, [r7, #12]

  while (code != stop)
 80004be:	e006      	b.n	80004ce <main+0xc2>
  {
	  mem_sum += *code++;
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	1d1a      	adds	r2, r3, #4
 80004c4:	61ba      	str	r2, [r7, #24]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	4413      	add	r3, r2
 80004cc:	617b      	str	r3, [r7, #20]
  while (code != stop)
 80004ce:	69ba      	ldr	r2, [r7, #24]
 80004d0:	693b      	ldr	r3, [r7, #16]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d1f4      	bne.n	80004c0 <main+0xb4>
  }

  result = mem_sum;
 80004d6:	4a0d      	ldr	r2, [pc, #52]	; (800050c <main+0x100>)
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	6013      	str	r3, [r2, #0]
  uint32_t end = HAL_GetTick();
 80004dc:	f000 fc12 	bl	8000d04 <HAL_GetTick>
 80004e0:	60b8      	str	r0, [r7, #8]
  time = end - start;
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	4a09      	ldr	r2, [pc, #36]	; (8000510 <main+0x104>)
 80004ea:	6013      	str	r3, [r2, #0]
  //TFT_FillScreen((uint32_t)0x07E0);

  while (1)
  {
	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80004ec:	2104      	movs	r1, #4
 80004ee:	4809      	ldr	r0, [pc, #36]	; (8000514 <main+0x108>)
 80004f0:	f000 feef 	bl	80012d2 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80004f4:	20c8      	movs	r0, #200	; 0xc8
 80004f6:	f000 fc11 	bl	8000d1c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80004fa:	e7f7      	b.n	80004ec <main+0xe0>
 80004fc:	58024400 	.word	0x58024400
 8000500:	20000008 	.word	0x20000008
 8000504:	2001a92c 	.word	0x2001a92c
 8000508:	08020000 	.word	0x08020000
 800050c:	2001a9d8 	.word	0x2001a9d8
 8000510:	2001a9d4 	.word	0x2001a9d4
 8000514:	58022400 	.word	0x58022400

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b0cc      	sub	sp, #304	; 0x130
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000522:	224c      	movs	r2, #76	; 0x4c
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f003 fa12 	bl	8003950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000530:	2220      	movs	r2, #32
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f003 fa0b 	bl	8003950 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	4618      	mov	r0, r3
 8000540:	23bc      	movs	r3, #188	; 0xbc
 8000542:	461a      	mov	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f003 fa03 	bl	8003950 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800054a:	2004      	movs	r0, #4
 800054c:	f001 f9e8 	bl	8001920 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	4b6a      	ldr	r3, [pc, #424]	; (8000700 <SystemClock_Config+0x1e8>)
 8000558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055a:	4a69      	ldr	r2, [pc, #420]	; (8000700 <SystemClock_Config+0x1e8>)
 800055c:	f023 0301 	bic.w	r3, r3, #1
 8000560:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000562:	4b67      	ldr	r3, [pc, #412]	; (8000700 <SystemClock_Config+0x1e8>)
 8000564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000566:	f003 0201 	and.w	r2, r3, #1
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	4b65      	ldr	r3, [pc, #404]	; (8000704 <SystemClock_Config+0x1ec>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a64      	ldr	r2, [pc, #400]	; (8000704 <SystemClock_Config+0x1ec>)
 8000574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b62      	ldr	r3, [pc, #392]	; (8000704 <SystemClock_Config+0x1ec>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800058a:	bf00      	nop
 800058c:	4b5d      	ldr	r3, [pc, #372]	; (8000704 <SystemClock_Config+0x1ec>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000598:	d1f8      	bne.n	800058c <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800059a:	4b5b      	ldr	r3, [pc, #364]	; (8000708 <SystemClock_Config+0x1f0>)
 800059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800059e:	f023 0303 	bic.w	r3, r3, #3
 80005a2:	4a59      	ldr	r2, [pc, #356]	; (8000708 <SystemClock_Config+0x1f0>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005aa:	2321      	movs	r3, #33	; 0x21
 80005ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c4:	2302      	movs	r3, #2
 80005c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ca:	2308      	movs	r3, #8
 80005cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 256;
 80005d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005de:	2304      	movs	r3, #4
 80005e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80005ea:	2304      	movs	r3, #4
 80005ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000600:	4618      	mov	r0, r3
 8000602:	f001 f9f7 	bl	80019f4 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800060c:	f000 f9ca 	bl	80009a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	233f      	movs	r3, #63	; 0x3f
 8000612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2303      	movs	r3, #3
 8000618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000622:	2308      	movs	r3, #8
 8000624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800062e:	2340      	movs	r3, #64	; 0x40
 8000630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800063c:	2340      	movs	r3, #64	; 0x40
 800063e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000642:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000646:	2102      	movs	r1, #2
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fde3 	bl	8002214 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x140>
  {
    Error_Handler();
 8000654:	f000 f9a6 	bl	80009a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART3
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	4a2b      	ldr	r2, [pc, #172]	; (800070c <SystemClock_Config+0x1f4>)
 800065e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2220      	movs	r2, #32
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 129;
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2281      	movs	r2, #129	; 0x81
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2202      	movs	r2, #2
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2202      	movs	r2, #2
 800067e:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2202      	movs	r2, #2
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000690:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2200      	movs	r2, #0
 8000698:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	2200      	movs	r2, #0
 80006a8:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2200      	movs	r2, #0
 80006b0:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	2200      	movs	r2, #0
 80006b8:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2200      	movs	r2, #0
 80006c8:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2200      	movs	r2, #0
 80006d0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80006da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f8be 	bl	8002864 <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x1da>
  {
    Error_Handler();
 80006ee:	f000 f959 	bl	80009a4 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80006f2:	f001 f96f 	bl	80019d4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80006f6:	bf00      	nop
 80006f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	58000400 	.word	0x58000400
 8000704:	58024800 	.word	0x58024800
 8000708:	58024400 	.word	0x58024400
 800070c:	23058202 	.word	0x23058202

08000710 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09a      	sub	sp, #104	; 0x68
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000716:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800071a:	2234      	movs	r2, #52	; 0x34
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 f916 	bl	8003950 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2234      	movs	r2, #52	; 0x34
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f003 f910 	bl	8003950 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000730:	4b4f      	ldr	r3, [pc, #316]	; (8000870 <MX_LTDC_Init+0x160>)
 8000732:	4a50      	ldr	r2, [pc, #320]	; (8000874 <MX_LTDC_Init+0x164>)
 8000734:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000736:	4b4e      	ldr	r3, [pc, #312]	; (8000870 <MX_LTDC_Init+0x160>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800073c:	4b4c      	ldr	r3, [pc, #304]	; (8000870 <MX_LTDC_Init+0x160>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000742:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <MX_LTDC_Init+0x160>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <MX_LTDC_Init+0x160>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 800074e:	4b48      	ldr	r3, [pc, #288]	; (8000870 <MX_LTDC_Init+0x160>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000754:	4b46      	ldr	r3, [pc, #280]	; (8000870 <MX_LTDC_Init+0x160>)
 8000756:	2209      	movs	r2, #9
 8000758:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 800075a:	4b45      	ldr	r3, [pc, #276]	; (8000870 <MX_LTDC_Init+0x160>)
 800075c:	222b      	movs	r2, #43	; 0x2b
 800075e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8000760:	4b43      	ldr	r3, [pc, #268]	; (8000870 <MX_LTDC_Init+0x160>)
 8000762:	2215      	movs	r2, #21
 8000764:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8000766:	4b42      	ldr	r3, [pc, #264]	; (8000870 <MX_LTDC_Init+0x160>)
 8000768:	f240 220b 	movw	r2, #523	; 0x20b
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 800076e:	4b40      	ldr	r3, [pc, #256]	; (8000870 <MX_LTDC_Init+0x160>)
 8000770:	f240 1225 	movw	r2, #293	; 0x125
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 8000776:	4b3e      	ldr	r3, [pc, #248]	; (8000870 <MX_LTDC_Init+0x160>)
 8000778:	f240 2213 	movw	r2, #531	; 0x213
 800077c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 800077e:	4b3c      	ldr	r3, [pc, #240]	; (8000870 <MX_LTDC_Init+0x160>)
 8000780:	f240 1229 	movw	r2, #297	; 0x129
 8000784:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000786:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <MX_LTDC_Init+0x160>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800078e:	4b38      	ldr	r3, [pc, #224]	; (8000870 <MX_LTDC_Init+0x160>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000796:	4b36      	ldr	r3, [pc, #216]	; (8000870 <MX_LTDC_Init+0x160>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800079e:	4834      	ldr	r0, [pc, #208]	; (8000870 <MX_LTDC_Init+0x160>)
 80007a0:	f000 fde0 	bl	8001364 <HAL_LTDC_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80007aa:	f000 f8fb 	bl	80009a4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 200;
 80007b2:	23c8      	movs	r3, #200	; 0xc8
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 80007ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007c0:	2302      	movs	r3, #2
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80007c4:	23ff      	movs	r3, #255	; 0xff
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d0:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007d2:	2305      	movs	r3, #5
 80007d4:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 80007da:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007de:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 80007e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007e4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 255;
 80007f2:	23ff      	movs	r3, #255	; 0xff
 80007f4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007fc:	2200      	movs	r2, #0
 80007fe:	4619      	mov	r1, r3
 8000800:	481b      	ldr	r0, [pc, #108]	; (8000870 <MX_LTDC_Init+0x160>)
 8000802:	f000 fe7f 	bl	8001504 <HAL_LTDC_ConfigLayer>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 800080c:	f000 f8ca 	bl	80009a4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800082e:	2305      	movs	r3, #5
 8000830:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	2201      	movs	r2, #1
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_LTDC_Init+0x160>)
 8000858:	f000 fe54 	bl	8001504 <HAL_LTDC_ConfigLayer>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8000862:	f000 f89f 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3768      	adds	r7, #104	; 0x68
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2001a92c 	.word	0x2001a92c
 8000874:	50001000 	.word	0x50001000

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800088e:	4b42      	ldr	r3, [pc, #264]	; (8000998 <MX_GPIO_Init+0x120>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000894:	4a40      	ldr	r2, [pc, #256]	; (8000998 <MX_GPIO_Init+0x120>)
 8000896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089e:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <MX_GPIO_Init+0x120>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008ac:	4b3a      	ldr	r3, [pc, #232]	; (8000998 <MX_GPIO_Init+0x120>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	4a39      	ldr	r2, [pc, #228]	; (8000998 <MX_GPIO_Init+0x120>)
 80008b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <MX_GPIO_Init+0x120>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80008ca:	4b33      	ldr	r3, [pc, #204]	; (8000998 <MX_GPIO_Init+0x120>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	4a31      	ldr	r2, [pc, #196]	; (8000998 <MX_GPIO_Init+0x120>)
 80008d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008da:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <MX_GPIO_Init+0x120>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e8:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_GPIO_Init+0x120>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ee:	4a2a      	ldr	r2, [pc, #168]	; (8000998 <MX_GPIO_Init+0x120>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_GPIO_Init+0x120>)
 80008fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_GPIO_Init+0x120>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	4a22      	ldr	r2, [pc, #136]	; (8000998 <MX_GPIO_Init+0x120>)
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <MX_GPIO_Init+0x120>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	f003 0308 	and.w	r3, r3, #8
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_GPIO_Init+0x120>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <MX_GPIO_Init+0x120>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_GPIO_Init+0x120>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISPD7_GPIO_Port, LCD_DISPD7_Pin, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	4815      	ldr	r0, [pc, #84]	; (800099c <MX_GPIO_Init+0x124>)
 8000948:	f000 fcaa 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2104      	movs	r1, #4
 8000950:	4813      	ldr	r0, [pc, #76]	; (80009a0 <MX_GPIO_Init+0x128>)
 8000952:	f000 fca5 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000962:	2302      	movs	r3, #2
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	480b      	ldr	r0, [pc, #44]	; (800099c <MX_GPIO_Init+0x124>)
 800096e:	f000 fae7 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000972:	2304      	movs	r3, #4
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_GPIO_Init+0x128>)
 800098a:	f000 fad9 	bl	8000f40 <HAL_GPIO_Init>

}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	; 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	58024400 	.word	0x58024400
 800099c:	58020c00 	.word	0x58020c00
 80009a0:	58022400 	.word	0x58022400

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_MspInit+0x30>)
 80009bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009c0:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x30>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x30>)
 80009cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	58024400 	.word	0x58024400

080009e8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a4a      	ldr	r2, [pc, #296]	; (8000b30 <HAL_LTDC_MspInit+0x148>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	f040 808e 	bne.w	8000b28 <HAL_LTDC_MspInit+0x140>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000a0c:	4b49      	ldr	r3, [pc, #292]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000a12:	4a48      	ldr	r2, [pc, #288]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000a1c:	4b45      	ldr	r3, [pc, #276]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a2a:	4b42      	ldr	r3, [pc, #264]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a40      	ldr	r2, [pc, #256]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a48:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	4a39      	ldr	r2, [pc, #228]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a58:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a66:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a76:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a84:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	4a2a      	ldr	r2, [pc, #168]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <HAL_LTDC_MspInit+0x14c>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000aa2:	23fc      	movs	r3, #252	; 0xfc
 8000aa4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ab2:	230e      	movs	r3, #14
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	481e      	ldr	r0, [pc, #120]	; (8000b38 <HAL_LTDC_MspInit+0x150>)
 8000abe:	f000 fa3f 	bl	8000f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000ac2:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000ac6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ad4:	230e      	movs	r3, #14
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4817      	ldr	r0, [pc, #92]	; (8000b3c <HAL_LTDC_MspInit+0x154>)
 8000ae0:	f000 fa2e 	bl	8000f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000ae4:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000ae8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000af6:	230e      	movs	r3, #14
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	480f      	ldr	r0, [pc, #60]	; (8000b40 <HAL_LTDC_MspInit+0x158>)
 8000b02:	f000 fa1d 	bl	8000f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b18:	230e      	movs	r3, #14
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <HAL_LTDC_MspInit+0x15c>)
 8000b24:	f000 fa0c 	bl	8000f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	50001000 	.word	0x50001000
 8000b34:	58024400 	.word	0x58024400
 8000b38:	58022800 	.word	0x58022800
 8000b3c:	58022000 	.word	0x58022000
 8000b40:	58022400 	.word	0x58022400
 8000b44:	58021c00 	.word	0x58021c00

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f89e 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ba8:	f7ff fb96 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bae:	e003      	b.n	8000bb8 <LoopCopyDataInit>

08000bb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000bb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bb6:	3104      	adds	r1, #4

08000bb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000bbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bc0:	d3f6      	bcc.n	8000bb0 <CopyDataInit>
  ldr  r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000bc4:	e002      	b.n	8000bcc <LoopFillZerobss>

08000bc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc8:	f842 3b04 	str.w	r3, [r2], #4

08000bcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000bce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bd0:	d3f9      	bcc.n	8000bc6 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f002 fe99 	bl	8003908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fc19 	bl	800040c <main>
  bx  lr    
 8000bda:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000be0:	08003990 	.word	0x08003990
  ldr  r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be8:	2001a910 	.word	0x2001a910
  ldr  r2, =_sbss
 8000bec:	2001a910 	.word	0x2001a910
  ldr  r3, = _ebss
 8000bf0:	2001a9e0 	.word	0x2001a9e0

08000bf4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC3_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f96c 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c04:	f001 fcbc 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 8000c08:	4601      	mov	r1, r0
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_Init+0x68>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <HAL_Init+0x6c>)
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	f003 031f 	and.w	r3, r3, #31
 8000c1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000c20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_Init+0x68>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_Init+0x6c>)
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	f003 031f 	and.w	r3, r3, #31
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	fa22 f303 	lsr.w	r3, r2, r3
 8000c38:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <HAL_Init+0x70>)
 8000c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_Init+0x74>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f814 	bl	8000c70 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e002      	b.n	8000c58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c52:	f7ff feaf 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	58024400 	.word	0x58024400
 8000c64:	08003978 	.word	0x08003978
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	20000000 	.word	0x20000000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_InitTick+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e021      	b.n	8000cc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_InitTick+0x64>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_InitTick+0x60>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f943 	bl	8000f26 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f91b 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x68>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2001a90c 	.word	0x2001a90c
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	2001a908 	.word	0x2001a908

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2001a90c 	.word	0x2001a90c
 8000d00:	2001a9dc 	.word	0x2001a9dc

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	2001a9dc 	.word	0x2001a9dc

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_Delay+0x40>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2001a90c 	.word	0x2001a90c

08000d60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <HAL_GetREVID+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	0c1b      	lsrs	r3, r3, #16
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	5c001000 	.word	0x5c001000

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <__NVIC_SetPriorityGrouping+0x40>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000da2:	4313      	orrs	r3, r2
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x40>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00
 8000dbc:	05fa0000 	.word	0x05fa0000

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff47 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff5e 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff90 	bl	8000e30 <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5f 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffb2 	bl	8000e98 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f4e:	4b89      	ldr	r3, [pc, #548]	; (8001174 <HAL_GPIO_Init+0x234>)
 8000f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f52:	e194      	b.n	800127e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8186 	beq.w	8001278 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d00b      	beq.n	8000f8c <HAL_GPIO_Init+0x4c>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d007      	beq.n	8000f8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f80:	2b11      	cmp	r3, #17
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b12      	cmp	r3, #18
 8000f8a:	d130      	bne.n	8000fee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	091b      	lsrs	r3, r3, #4
 8000fd8:	f003 0201 	and.w	r2, r3, #1
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0xee>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b12      	cmp	r3, #18
 800102c:	d123      	bne.n	8001076 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	69b9      	ldr	r1, [r7, #24]
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0203 	and.w	r2, r3, #3
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 80e0 	beq.w	8001278 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b8:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <HAL_GPIO_Init+0x238>)
 80010ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010be:	4a2e      	ldr	r2, [pc, #184]	; (8001178 <HAL_GPIO_Init+0x238>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <HAL_GPIO_Init+0x238>)
 80010ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d6:	4a29      	ldr	r2, [pc, #164]	; (800117c <HAL_GPIO_Init+0x23c>)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	220f      	movs	r2, #15
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a20      	ldr	r2, [pc, #128]	; (8001180 <HAL_GPIO_Init+0x240>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d052      	beq.n	80011a8 <HAL_GPIO_Init+0x268>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <HAL_GPIO_Init+0x244>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d031      	beq.n	800116e <HAL_GPIO_Init+0x22e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <HAL_GPIO_Init+0x248>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d02b      	beq.n	800116a <HAL_GPIO_Init+0x22a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a1d      	ldr	r2, [pc, #116]	; (800118c <HAL_GPIO_Init+0x24c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d025      	beq.n	8001166 <HAL_GPIO_Init+0x226>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <HAL_GPIO_Init+0x250>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d01f      	beq.n	8001162 <HAL_GPIO_Init+0x222>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <HAL_GPIO_Init+0x254>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d019      	beq.n	800115e <HAL_GPIO_Init+0x21e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_GPIO_Init+0x258>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x21a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a19      	ldr	r2, [pc, #100]	; (800119c <HAL_GPIO_Init+0x25c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x216>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <HAL_GPIO_Init+0x260>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x212>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_GPIO_Init+0x264>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x20e>
 800114a:	2309      	movs	r3, #9
 800114c:	e02d      	b.n	80011aa <HAL_GPIO_Init+0x26a>
 800114e:	230a      	movs	r3, #10
 8001150:	e02b      	b.n	80011aa <HAL_GPIO_Init+0x26a>
 8001152:	2308      	movs	r3, #8
 8001154:	e029      	b.n	80011aa <HAL_GPIO_Init+0x26a>
 8001156:	2307      	movs	r3, #7
 8001158:	e027      	b.n	80011aa <HAL_GPIO_Init+0x26a>
 800115a:	2306      	movs	r3, #6
 800115c:	e025      	b.n	80011aa <HAL_GPIO_Init+0x26a>
 800115e:	2305      	movs	r3, #5
 8001160:	e023      	b.n	80011aa <HAL_GPIO_Init+0x26a>
 8001162:	2304      	movs	r3, #4
 8001164:	e021      	b.n	80011aa <HAL_GPIO_Init+0x26a>
 8001166:	2303      	movs	r3, #3
 8001168:	e01f      	b.n	80011aa <HAL_GPIO_Init+0x26a>
 800116a:	2302      	movs	r3, #2
 800116c:	e01d      	b.n	80011aa <HAL_GPIO_Init+0x26a>
 800116e:	2301      	movs	r3, #1
 8001170:	e01b      	b.n	80011aa <HAL_GPIO_Init+0x26a>
 8001172:	bf00      	nop
 8001174:	58000080 	.word	0x58000080
 8001178:	58024400 	.word	0x58024400
 800117c:	58000400 	.word	0x58000400
 8001180:	58020000 	.word	0x58020000
 8001184:	58020400 	.word	0x58020400
 8001188:	58020800 	.word	0x58020800
 800118c:	58020c00 	.word	0x58020c00
 8001190:	58021000 	.word	0x58021000
 8001194:	58021400 	.word	0x58021400
 8001198:	58021800 	.word	0x58021800
 800119c:	58021c00 	.word	0x58021c00
 80011a0:	58022000 	.word	0x58022000
 80011a4:	58022400 	.word	0x58022400
 80011a8:	2300      	movs	r3, #0
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	f002 0203 	and.w	r2, r2, #3
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	4093      	lsls	r3, r2
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ba:	4938      	ldr	r1, [pc, #224]	; (800129c <HAL_GPIO_Init+0x35c>)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3302      	adds	r3, #2
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800121c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800124a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	3301      	adds	r3, #1
 800127c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	f47f ae63 	bne.w	8000f54 <HAL_GPIO_Init+0x14>
  }
}
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	58000400 	.word	0x58000400

080012a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
 80012ac:	4613      	mov	r3, r2
 80012ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b0:	787b      	ldrb	r3, [r7, #1]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012bc:	e003      	b.n	80012c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	041a      	lsls	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695a      	ldr	r2, [r3, #20]
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	401a      	ands	r2, r3
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d104      	bne.n	80012f6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	041a      	lsls	r2, r3, #16
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012f6:	887a      	ldrh	r2, [r7, #2]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_HSEM_FastTake+0x2c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3320      	adds	r3, #32
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_HSEM_FastTake+0x30>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d101      	bne.n	8001324 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	e000      	b.n	8001326 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	58026400 	.word	0x58026400
 8001338:	80000300 	.word	0x80000300

0800133c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001346:	4906      	ldr	r1, [pc, #24]	; (8001360 <HAL_HSEM_Release+0x24>)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	58026400 	.word	0x58026400

08001364 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0bf      	b.n	80014f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d106      	bne.n	8001390 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fb2c 	bl	80009e8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2202      	movs	r2, #2
 8001394:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699a      	ldr	r2, [r3, #24]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80013a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6999      	ldr	r1, [r3, #24]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80013bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6899      	ldr	r1, [r3, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <HAL_LTDC_Init+0x19c>)
 80013d8:	400b      	ands	r3, r1
 80013da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	041b      	lsls	r3, r3, #16
 80013e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6899      	ldr	r1, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68d9      	ldr	r1, [r3, #12]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <HAL_LTDC_Init+0x19c>)
 8001406:	400b      	ands	r3, r1
 8001408:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	041b      	lsls	r3, r3, #16
 8001410:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68d9      	ldr	r1, [r3, #12]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1a      	ldr	r2, [r3, #32]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <HAL_LTDC_Init+0x19c>)
 8001434:	400b      	ands	r3, r1
 8001436:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6919      	ldr	r1, [r3, #16]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6959      	ldr	r1, [r3, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <HAL_LTDC_Init+0x19c>)
 8001462:	400b      	ands	r3, r1
 8001464:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	041b      	lsls	r3, r3, #16
 800146c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6959      	ldr	r1, [r3, #20]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001494:	041b      	lsls	r3, r3, #16
 8001496:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0206 	orr.w	r2, r2, #6
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699a      	ldr	r2, [r3, #24]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	f000f800 	.word	0xf000f800

08001504 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_LTDC_ConfigLayer+0x1a>
 800151a:	2302      	movs	r3, #2
 800151c:	e02c      	b.n	8001578 <HAL_LTDC_ConfigLayer+0x74>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2202      	movs	r2, #2
 800152a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2134      	movs	r1, #52	; 0x34
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	4614      	mov	r4, r2
 8001542:	461d      	mov	r5, r3
 8001544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 f847 	bl	80015ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2201      	movs	r2, #1
 8001564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bdb0      	pop	{r4, r5, r7, pc}

08001580 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_LTDC_SetAddress+0x1a>
 8001596:	2302      	movs	r3, #2
 8001598:	e024      	b.n	80015e4 <HAL_LTDC_SetAddress+0x64>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2202      	movs	r2, #2
 80015a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2234      	movs	r2, #52	; 0x34
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
 80015b2:	3338      	adds	r3, #56	; 0x38
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6979      	ldr	r1, [r7, #20]
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 f811 	bl	80015ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2201      	movs	r2, #1
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	0c1b      	lsrs	r3, r3, #16
 8001604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001608:	4413      	add	r3, r2
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	01db      	lsls	r3, r3, #7
 8001618:	4413      	add	r3, r2
 800161a:	3384      	adds	r3, #132	; 0x84
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	4611      	mov	r1, r2
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	01d2      	lsls	r2, r2, #7
 8001628:	440a      	add	r2, r1
 800162a:	3284      	adds	r2, #132	; 0x84
 800162c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001630:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0c1b      	lsrs	r3, r3, #16
 800163e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001642:	4413      	add	r3, r2
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4619      	mov	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	01db      	lsls	r3, r3, #7
 8001650:	440b      	add	r3, r1
 8001652:	3384      	adds	r3, #132	; 0x84
 8001654:	4619      	mov	r1, r3
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800166a:	4413      	add	r3, r2
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	01db      	lsls	r3, r3, #7
 800167a:	4413      	add	r3, r2
 800167c:	3384      	adds	r3, #132	; 0x84
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	4611      	mov	r1, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	01d2      	lsls	r2, r2, #7
 800168a:	440a      	add	r2, r1
 800168c:	3284      	adds	r2, #132	; 0x84
 800168e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001692:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a2:	4413      	add	r3, r2
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	01db      	lsls	r3, r3, #7
 80016b0:	440b      	add	r3, r1
 80016b2:	3384      	adds	r3, #132	; 0x84
 80016b4:	4619      	mov	r1, r3
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	01db      	lsls	r3, r3, #7
 80016c6:	4413      	add	r3, r2
 80016c8:	3384      	adds	r3, #132	; 0x84
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	4611      	mov	r1, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	01d2      	lsls	r2, r2, #7
 80016d6:	440a      	add	r2, r1
 80016d8:	3284      	adds	r2, #132	; 0x84
 80016da:	f023 0307 	bic.w	r3, r3, #7
 80016de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	01db      	lsls	r3, r3, #7
 80016ea:	4413      	add	r3, r2
 80016ec:	3384      	adds	r3, #132	; 0x84
 80016ee:	461a      	mov	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	061b      	lsls	r3, r3, #24
 8001710:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	01db      	lsls	r3, r3, #7
 800171c:	4413      	add	r3, r2
 800171e:	3384      	adds	r3, #132	; 0x84
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	01db      	lsls	r3, r3, #7
 800172c:	4413      	add	r3, r2
 800172e:	3384      	adds	r3, #132	; 0x84
 8001730:	461a      	mov	r2, r3
 8001732:	2300      	movs	r3, #0
 8001734:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800173c:	461a      	mov	r2, r3
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	431a      	orrs	r2, r3
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	431a      	orrs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	01db      	lsls	r3, r3, #7
 8001750:	440b      	add	r3, r1
 8001752:	3384      	adds	r3, #132	; 0x84
 8001754:	4619      	mov	r1, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	4313      	orrs	r3, r2
 800175a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	01db      	lsls	r3, r3, #7
 8001766:	4413      	add	r3, r2
 8001768:	3384      	adds	r3, #132	; 0x84
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	4611      	mov	r1, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	01d2      	lsls	r2, r2, #7
 8001776:	440a      	add	r2, r1
 8001778:	3284      	adds	r2, #132	; 0x84
 800177a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800177e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	01db      	lsls	r3, r3, #7
 800178a:	4413      	add	r3, r2
 800178c:	3384      	adds	r3, #132	; 0x84
 800178e:	461a      	mov	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	01db      	lsls	r3, r3, #7
 80017a0:	4413      	add	r3, r2
 80017a2:	3384      	adds	r3, #132	; 0x84
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4619      	mov	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	01db      	lsls	r3, r3, #7
 80017b0:	440b      	add	r3, r1
 80017b2:	3384      	adds	r3, #132	; 0x84
 80017b4:	4619      	mov	r1, r3
 80017b6:	4b58      	ldr	r3, [pc, #352]	; (8001918 <LTDC_SetConfig+0x32c>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	69da      	ldr	r2, [r3, #28]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	68f9      	ldr	r1, [r7, #12]
 80017c6:	6809      	ldr	r1, [r1, #0]
 80017c8:	4608      	mov	r0, r1
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	01c9      	lsls	r1, r1, #7
 80017ce:	4401      	add	r1, r0
 80017d0:	3184      	adds	r1, #132	; 0x84
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	01db      	lsls	r3, r3, #7
 80017e0:	4413      	add	r3, r2
 80017e2:	3384      	adds	r3, #132	; 0x84
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	01db      	lsls	r3, r3, #7
 80017f0:	4413      	add	r3, r2
 80017f2:	3384      	adds	r3, #132	; 0x84
 80017f4:	461a      	mov	r2, r3
 80017f6:	2300      	movs	r3, #0
 80017f8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	01db      	lsls	r3, r3, #7
 8001804:	4413      	add	r3, r2
 8001806:	3384      	adds	r3, #132	; 0x84
 8001808:	461a      	mov	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8001818:	2304      	movs	r3, #4
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	e01b      	b.n	8001856 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8001826:	2303      	movs	r3, #3
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	e014      	b.n	8001856 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	2b04      	cmp	r3, #4
 8001832:	d00b      	beq.n	800184c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001838:	2b02      	cmp	r3, #2
 800183a:	d007      	beq.n	800184c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001840:	2b03      	cmp	r3, #3
 8001842:	d003      	beq.n	800184c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001848:	2b07      	cmp	r3, #7
 800184a:	d102      	bne.n	8001852 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800184c:	2302      	movs	r3, #2
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	e001      	b.n	8001856 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8001852:	2301      	movs	r3, #1
 8001854:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	01db      	lsls	r3, r3, #7
 8001860:	4413      	add	r3, r2
 8001862:	3384      	adds	r3, #132	; 0x84
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	4611      	mov	r1, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	01d2      	lsls	r2, r2, #7
 8001870:	440a      	add	r2, r1
 8001872:	3284      	adds	r2, #132	; 0x84
 8001874:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8001878:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	1acb      	subs	r3, r1, r3
 8001890:	69f9      	ldr	r1, [r7, #28]
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	3307      	adds	r3, #7
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	6809      	ldr	r1, [r1, #0]
 800189c:	4608      	mov	r0, r1
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	01c9      	lsls	r1, r1, #7
 80018a2:	4401      	add	r1, r0
 80018a4:	3184      	adds	r1, #132	; 0x84
 80018a6:	4313      	orrs	r3, r2
 80018a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	01db      	lsls	r3, r3, #7
 80018b4:	4413      	add	r3, r2
 80018b6:	3384      	adds	r3, #132	; 0x84
 80018b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	01db      	lsls	r3, r3, #7
 80018c4:	440b      	add	r3, r1
 80018c6:	3384      	adds	r3, #132	; 0x84
 80018c8:	4619      	mov	r1, r3
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <LTDC_SetConfig+0x330>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	01db      	lsls	r3, r3, #7
 80018da:	4413      	add	r3, r2
 80018dc:	3384      	adds	r3, #132	; 0x84
 80018de:	461a      	mov	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	01db      	lsls	r3, r3, #7
 80018f0:	4413      	add	r3, r2
 80018f2:	3384      	adds	r3, #132	; 0x84
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	4611      	mov	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	01d2      	lsls	r2, r2, #7
 8001900:	440a      	add	r2, r1
 8001902:	3284      	adds	r2, #132	; 0x84
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6013      	str	r3, [r2, #0]
}
 800190a:	bf00      	nop
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	fffff8f8 	.word	0xfffff8f8
 800191c:	fffff800 	.word	0xfffff800

08001920 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	2b06      	cmp	r3, #6
 8001932:	d00a      	beq.n	800194a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d001      	beq.n	8001946 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e040      	b.n	80019c8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e03e      	b.n	80019c8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001952:	491f      	ldr	r1, [pc, #124]	; (80019d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4313      	orrs	r3, r2
 8001958:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800195a:	f7ff f9d3 	bl	8000d04 <HAL_GetTick>
 800195e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001960:	e009      	b.n	8001976 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001962:	f7ff f9cf 	bl	8000d04 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001970:	d901      	bls.n	8001976 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e028      	b.n	80019c8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800197e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001982:	d1ee      	bne.n	8001962 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b1e      	cmp	r3, #30
 8001988:	d008      	beq.n	800199c <HAL_PWREx_ConfigSupply+0x7c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b2e      	cmp	r3, #46	; 0x2e
 800198e:	d005      	beq.n	800199c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b1d      	cmp	r3, #29
 8001994:	d002      	beq.n	800199c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b2d      	cmp	r3, #45	; 0x2d
 800199a:	d114      	bne.n	80019c6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800199c:	f7ff f9b2 	bl	8000d04 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019a2:	e009      	b.n	80019b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019a4:	f7ff f9ae 	bl	8000d04 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019b2:	d901      	bls.n	80019b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e007      	b.n	80019c8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d1ee      	bne.n	80019a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	58024800 	.word	0x58024800

080019d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	58024800 	.word	0x58024800

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e3ff      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8087 	beq.w	8001b22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a14:	4b99      	ldr	r3, [pc, #612]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a1e:	4b97      	ldr	r3, [pc, #604]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	2b10      	cmp	r3, #16
 8001a28:	d007      	beq.n	8001a3a <HAL_RCC_OscConfig+0x46>
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	2b18      	cmp	r3, #24
 8001a2e:	d110      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5e>
 8001a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d10b      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3a:	4b90      	ldr	r3, [pc, #576]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d06c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x12c>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d168      	bne.n	8001b20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e3d9      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x76>
 8001a5c:	4b87      	ldr	r3, [pc, #540]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a86      	ldr	r2, [pc, #536]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e02e      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x98>
 8001a72:	4b82      	ldr	r3, [pc, #520]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a81      	ldr	r2, [pc, #516]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b7f      	ldr	r3, [pc, #508]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a7e      	ldr	r2, [pc, #504]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e01d      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xbc>
 8001a96:	4b79      	ldr	r3, [pc, #484]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a78      	ldr	r2, [pc, #480]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b76      	ldr	r3, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001ab0:	4b72      	ldr	r3, [pc, #456]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a71      	ldr	r2, [pc, #452]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b6f      	ldr	r3, [pc, #444]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6e      	ldr	r2, [pc, #440]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f918 	bl	8000d04 <HAL_GetTick>
 8001ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff f914 	bl	8000d04 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e38d      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aea:	4b64      	ldr	r3, [pc, #400]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xe4>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f904 	bl	8000d04 <HAL_GetTick>
 8001afc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff f900 	bl	8000d04 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e379      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b12:	4b5a      	ldr	r3, [pc, #360]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x10c>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 80ae 	beq.w	8001c8c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b30:	4b52      	ldr	r3, [pc, #328]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b3a:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <HAL_RCC_OscConfig+0x162>
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	2b18      	cmp	r3, #24
 8001b4a:	d13a      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x1ce>
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d135      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b56:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_RCC_OscConfig+0x17a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e34b      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6e:	f7ff f8f7 	bl	8000d60 <HAL_GetREVID>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f241 0303 	movw	r3, #4099	; 0x1003
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d817      	bhi.n	8001bac <HAL_RCC_OscConfig+0x1b8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b40      	cmp	r3, #64	; 0x40
 8001b82:	d108      	bne.n	8001b96 <HAL_RCC_OscConfig+0x1a2>
 8001b84:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b8c:	4a3b      	ldr	r2, [pc, #236]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b92:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b94:	e07a      	b.n	8001c8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	031b      	lsls	r3, r3, #12
 8001ba4:	4935      	ldr	r1, [pc, #212]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001baa:	e06f      	b.n	8001c8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	4930      	ldr	r1, [pc, #192]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc0:	e064      	b.n	8001c8c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d045      	beq.n	8001c56 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bca:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0219 	bic.w	r2, r3, #25
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	4929      	ldr	r1, [pc, #164]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f892 	bl	8000d04 <HAL_GetTick>
 8001be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff f88e 	bl	8000d04 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e307      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c02:	f7ff f8ad 	bl	8000d60 <HAL_GetREVID>
 8001c06:	4602      	mov	r2, r0
 8001c08:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d817      	bhi.n	8001c40 <HAL_RCC_OscConfig+0x24c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b40      	cmp	r3, #64	; 0x40
 8001c16:	d108      	bne.n	8001c2a <HAL_RCC_OscConfig+0x236>
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c20:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c26:	6053      	str	r3, [r2, #4]
 8001c28:	e030      	b.n	8001c8c <HAL_RCC_OscConfig+0x298>
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	031b      	lsls	r3, r3, #12
 8001c38:	4910      	ldr	r1, [pc, #64]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
 8001c3e:	e025      	b.n	8001c8c <HAL_RCC_OscConfig+0x298>
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	490b      	ldr	r1, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
 8001c54:	e01a      	b.n	8001c8c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <HAL_RCC_OscConfig+0x288>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f84f 	bl	8000d04 <HAL_GetTick>
 8001c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff f84b 	bl	8000d04 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d903      	bls.n	8001c80 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e2c4      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
 8001c7c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c80:	4ba4      	ldr	r3, [pc, #656]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1ee      	bne.n	8001c6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a9 	beq.w	8001dec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9a:	4b9e      	ldr	r3, [pc, #632]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ca2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ca4:	4b9b      	ldr	r3, [pc, #620]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d007      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2cc>
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b18      	cmp	r3, #24
 8001cb4:	d13a      	bne.n	8001d2c <HAL_RCC_OscConfig+0x338>
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d135      	bne.n	8001d2c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cc0:	4b94      	ldr	r3, [pc, #592]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x2e4>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	2b80      	cmp	r3, #128	; 0x80
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e296      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cd8:	f7ff f842 	bl	8000d60 <HAL_GetREVID>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d817      	bhi.n	8001d16 <HAL_RCC_OscConfig+0x322>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d108      	bne.n	8001d00 <HAL_RCC_OscConfig+0x30c>
 8001cee:	4b89      	ldr	r3, [pc, #548]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cf6:	4a87      	ldr	r2, [pc, #540]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001cf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cfe:	e075      	b.n	8001dec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d00:	4b84      	ldr	r3, [pc, #528]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	069b      	lsls	r3, r3, #26
 8001d0e:	4981      	ldr	r1, [pc, #516]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d14:	e06a      	b.n	8001dec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d16:	4b7f      	ldr	r3, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	497b      	ldr	r1, [pc, #492]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d2a:	e05f      	b.n	8001dec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d042      	beq.n	8001dba <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d34:	4b77      	ldr	r3, [pc, #476]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a76      	ldr	r2, [pc, #472]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe ffe0 	bl	8000d04 <HAL_GetTick>
 8001d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d48:	f7fe ffdc 	bl	8000d04 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e255      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d5a:	4b6e      	ldr	r3, [pc, #440]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d66:	f7fe fffb 	bl	8000d60 <HAL_GetREVID>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d817      	bhi.n	8001da4 <HAL_RCC_OscConfig+0x3b0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d108      	bne.n	8001d8e <HAL_RCC_OscConfig+0x39a>
 8001d7c:	4b65      	ldr	r3, [pc, #404]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d84:	4a63      	ldr	r2, [pc, #396]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001d86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d8a:	6053      	str	r3, [r2, #4]
 8001d8c:	e02e      	b.n	8001dec <HAL_RCC_OscConfig+0x3f8>
 8001d8e:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	069b      	lsls	r3, r3, #26
 8001d9c:	495d      	ldr	r1, [pc, #372]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
 8001da2:	e023      	b.n	8001dec <HAL_RCC_OscConfig+0x3f8>
 8001da4:	4b5b      	ldr	r3, [pc, #364]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	4958      	ldr	r1, [pc, #352]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60cb      	str	r3, [r1, #12]
 8001db8:	e018      	b.n	8001dec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001dba:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a55      	ldr	r2, [pc, #340]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7fe ff9d 	bl	8000d04 <HAL_GetTick>
 8001dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dce:	f7fe ff99 	bl	8000d04 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e212      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001de0:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d036      	beq.n	8001e66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d019      	beq.n	8001e34 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e00:	4b44      	ldr	r3, [pc, #272]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e04:	4a43      	ldr	r2, [pc, #268]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7fe ff7a 	bl	8000d04 <HAL_GetTick>
 8001e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e14:	f7fe ff76 	bl	8000d04 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e1ef      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x420>
 8001e32:	e018      	b.n	8001e66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e34:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e38:	4a36      	ldr	r2, [pc, #216]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7fe ff60 	bl	8000d04 <HAL_GetTick>
 8001e44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e48:	f7fe ff5c 	bl	8000d04 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e1d5      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d036      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d019      	beq.n	8001eae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e7a:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e86:	f7fe ff3d 	bl	8000d04 <HAL_GetTick>
 8001e8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e8e:	f7fe ff39 	bl	8000d04 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e1b2      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x49a>
 8001eac:	e018      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001eba:	f7fe ff23 	bl	8000d04 <HAL_GetTick>
 8001ebe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ec2:	f7fe ff1f 	bl	8000d04 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e198      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <HAL_RCC_OscConfig+0x520>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8085 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_RCC_OscConfig+0x524>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <HAL_RCC_OscConfig+0x524>)
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001efa:	f7fe ff03 	bl	8000d04 <HAL_GetTick>
 8001efe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f00:	e00c      	b.n	8001f1c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f02:	f7fe feff 	bl	8000d04 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b64      	cmp	r3, #100	; 0x64
 8001f0e:	d905      	bls.n	8001f1c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e178      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
 8001f14:	58024400 	.word	0x58024400
 8001f18:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f1c:	4b96      	ldr	r3, [pc, #600]	; (8002178 <HAL_RCC_OscConfig+0x784>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ec      	beq.n	8001f02 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x54a>
 8001f30:	4b92      	ldr	r3, [pc, #584]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	4a91      	ldr	r2, [pc, #580]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3c:	e02d      	b.n	8001f9a <HAL_RCC_OscConfig+0x5a6>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x56c>
 8001f46:	4b8d      	ldr	r3, [pc, #564]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	4a8c      	ldr	r2, [pc, #560]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70
 8001f52:	4b8a      	ldr	r3, [pc, #552]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a89      	ldr	r2, [pc, #548]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	e01c      	b.n	8001f9a <HAL_RCC_OscConfig+0x5a6>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x58e>
 8001f68:	4b84      	ldr	r3, [pc, #528]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	4a83      	ldr	r2, [pc, #524]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	6713      	str	r3, [r2, #112]	; 0x70
 8001f74:	4b81      	ldr	r3, [pc, #516]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	4a80      	ldr	r2, [pc, #512]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f80:	e00b      	b.n	8001f9a <HAL_RCC_OscConfig+0x5a6>
 8001f82:	4b7e      	ldr	r3, [pc, #504]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f86:	4a7d      	ldr	r2, [pc, #500]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8e:	4b7b      	ldr	r3, [pc, #492]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	4a7a      	ldr	r2, [pc, #488]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d015      	beq.n	8001fce <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7fe feaf 	bl	8000d04 <HAL_GetTick>
 8001fa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe feab 	bl	8000d04 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e122      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fc0:	4b6e      	ldr	r3, [pc, #440]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ee      	beq.n	8001faa <HAL_RCC_OscConfig+0x5b6>
 8001fcc:	e014      	b.n	8001ff8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7fe fe99 	bl	8000d04 <HAL_GetTick>
 8001fd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe fe95 	bl	8000d04 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e10c      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fec:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ee      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8101 	beq.w	8002204 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002002:	4b5e      	ldr	r3, [pc, #376]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800200a:	2b18      	cmp	r3, #24
 800200c:	f000 80bc 	beq.w	8002188 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2b02      	cmp	r3, #2
 8002016:	f040 8095 	bne.w	8002144 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b58      	ldr	r3, [pc, #352]	; (800217c <HAL_RCC_OscConfig+0x788>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a57      	ldr	r2, [pc, #348]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8002020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7fe fe6d 	bl	8000d04 <HAL_GetTick>
 800202a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202e:	f7fe fe69 	bl	8000d04 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e0e2      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002040:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f0      	bne.n	800202e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b4b      	ldr	r3, [pc, #300]	; (800217c <HAL_RCC_OscConfig+0x788>)
 800204e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002050:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_RCC_OscConfig+0x78c>)
 8002052:	4013      	ands	r3, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	430a      	orrs	r2, r1
 8002060:	4946      	ldr	r1, [pc, #280]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8002062:	4313      	orrs	r3, r2
 8002064:	628b      	str	r3, [r1, #40]	; 0x28
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	3b01      	subs	r3, #1
 800206c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	3b01      	subs	r3, #1
 8002076:	025b      	lsls	r3, r3, #9
 8002078:	b29b      	uxth	r3, r3
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	3b01      	subs	r3, #1
 8002082:	041b      	lsls	r3, r3, #16
 8002084:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208e:	3b01      	subs	r3, #1
 8002090:	061b      	lsls	r3, r3, #24
 8002092:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002096:	4939      	ldr	r1, [pc, #228]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8002098:	4313      	orrs	r3, r2
 800209a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800209c:	4b37      	ldr	r3, [pc, #220]	; (800217c <HAL_RCC_OscConfig+0x788>)
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	4a36      	ldr	r2, [pc, #216]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020a8:	4b34      	ldr	r3, [pc, #208]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ac:	4b35      	ldr	r3, [pc, #212]	; (8002184 <HAL_RCC_OscConfig+0x790>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020b4:	00d2      	lsls	r2, r2, #3
 80020b6:	4931      	ldr	r1, [pc, #196]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020bc:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	f023 020c 	bic.w	r2, r3, #12
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	492c      	ldr	r1, [pc, #176]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f023 0202 	bic.w	r2, r3, #2
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4928      	ldr	r1, [pc, #160]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020e0:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	4a25      	ldr	r2, [pc, #148]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	4a22      	ldr	r2, [pc, #136]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	4a1f      	ldr	r2, [pc, #124]	; (800217c <HAL_RCC_OscConfig+0x788>)
 80020fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_RCC_OscConfig+0x788>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8002116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fdf2 	bl	8000d04 <HAL_GetTick>
 8002120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe fdee 	bl	8000d04 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e067      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x730>
 8002142:	e05f      	b.n	8002204 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_RCC_OscConfig+0x788>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_RCC_OscConfig+0x788>)
 800214a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe fdd8 	bl	8000d04 <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe fdd4 	bl	8000d04 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e04d      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <HAL_RCC_OscConfig+0x788>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x764>
 8002176:	e045      	b.n	8002204 <HAL_RCC_OscConfig+0x810>
 8002178:	58024800 	.word	0x58024800
 800217c:	58024400 	.word	0x58024400
 8002180:	fffffc0c 	.word	0xfffffc0c
 8002184:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_RCC_OscConfig+0x81c>)
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_RCC_OscConfig+0x81c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	2b01      	cmp	r3, #1
 800219a:	d031      	beq.n	8002200 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f003 0203 	and.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d12a      	bne.n	8002200 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d122      	bne.n	8002200 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d11a      	bne.n	8002200 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	0a5b      	lsrs	r3, r3, #9
 80021ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d111      	bne.n	8002200 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	0c1b      	lsrs	r3, r3, #16
 80021e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d108      	bne.n	8002200 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	0e1b      	lsrs	r3, r3, #24
 80021f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3730      	adds	r7, #48	; 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	58024400 	.word	0x58024400

08002214 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e19c      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002228:	4b8a      	ldr	r3, [pc, #552]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d910      	bls.n	8002258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b87      	ldr	r3, [pc, #540]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 020f 	bic.w	r2, r3, #15
 800223e:	4985      	ldr	r1, [pc, #532]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b83      	ldr	r3, [pc, #524]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e184      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d010      	beq.n	8002286 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	4b7b      	ldr	r3, [pc, #492]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002270:	429a      	cmp	r2, r3
 8002272:	d908      	bls.n	8002286 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002274:	4b78      	ldr	r3, [pc, #480]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	4975      	ldr	r1, [pc, #468]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002282:	4313      	orrs	r3, r2
 8002284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d010      	beq.n	80022b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	4b70      	ldr	r3, [pc, #448]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800229e:	429a      	cmp	r2, r3
 80022a0:	d908      	bls.n	80022b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022a2:	4b6d      	ldr	r3, [pc, #436]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	496a      	ldr	r1, [pc, #424]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d010      	beq.n	80022e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	4b64      	ldr	r3, [pc, #400]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d908      	bls.n	80022e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022d0:	4b61      	ldr	r3, [pc, #388]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	495e      	ldr	r1, [pc, #376]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	4b59      	ldr	r3, [pc, #356]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d908      	bls.n	8002310 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022fe:	4b56      	ldr	r3, [pc, #344]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4953      	ldr	r1, [pc, #332]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800230c:	4313      	orrs	r3, r2
 800230e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d010      	beq.n	800233e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4b4d      	ldr	r3, [pc, #308]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	429a      	cmp	r2, r3
 800232a:	d908      	bls.n	800233e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f023 020f 	bic.w	r2, r3, #15
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4947      	ldr	r1, [pc, #284]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800233a:	4313      	orrs	r3, r2
 800233c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d055      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800234a:	4b43      	ldr	r3, [pc, #268]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4940      	ldr	r1, [pc, #256]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002358:	4313      	orrs	r3, r2
 800235a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d107      	bne.n	8002374 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002364:	4b3c      	ldr	r3, [pc, #240]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d121      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0f6      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d107      	bne.n	800238c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800237c:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d115      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0ea      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d107      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002394:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0de      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023a4:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0d6      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b4:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f023 0207 	bic.w	r2, r3, #7
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4925      	ldr	r1, [pc, #148]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c6:	f7fe fc9d 	bl	8000d04 <HAL_GetTick>
 80023ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ce:	f7fe fc99 	bl	8000d04 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0be      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e4:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d1eb      	bne.n	80023ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	429a      	cmp	r2, r3
 8002410:	d208      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f023 020f 	bic.w	r2, r3, #15
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <HAL_RCC_ClockConfig+0x244>)
 8002420:	4313      	orrs	r3, r2
 8002422:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d214      	bcs.n	800245c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 020f 	bic.w	r2, r3, #15
 800243a:	4906      	ldr	r1, [pc, #24]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_RCC_ClockConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e086      	b.n	8002562 <HAL_RCC_ClockConfig+0x34e>
 8002454:	52002000 	.word	0x52002000
 8002458:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d010      	beq.n	800248a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	4b3f      	ldr	r3, [pc, #252]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002474:	429a      	cmp	r2, r3
 8002476:	d208      	bcs.n	800248a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002478:	4b3c      	ldr	r3, [pc, #240]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	4939      	ldr	r1, [pc, #228]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 8002486:	4313      	orrs	r3, r2
 8002488:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d010      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	4b34      	ldr	r3, [pc, #208]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d208      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	492e      	ldr	r1, [pc, #184]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d208      	bcs.n	80024e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	4922      	ldr	r1, [pc, #136]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024fe:	429a      	cmp	r2, r3
 8002500:	d208      	bcs.n	8002514 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4917      	ldr	r1, [pc, #92]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 8002510:	4313      	orrs	r3, r2
 8002512:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002514:	f000 f834 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 8002518:	4601      	mov	r1, r0
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	4a12      	ldr	r2, [pc, #72]	; (8002570 <HAL_RCC_ClockConfig+0x35c>)
 8002526:	5cd3      	ldrb	r3, [r2, r3]
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	fa21 f303 	lsr.w	r3, r1, r3
 8002530:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_RCC_ClockConfig+0x358>)
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_RCC_ClockConfig+0x35c>)
 800253c:	5cd3      	ldrb	r3, [r2, r3]
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_RCC_ClockConfig+0x360>)
 800254a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_RCC_ClockConfig+0x364>)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_RCC_ClockConfig+0x368>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fb8a 	bl	8000c70 <HAL_InitTick>
 800255c:	4603      	mov	r3, r0
 800255e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	58024400 	.word	0x58024400
 8002570:	08003978 	.word	0x08003978
 8002574:	20000004 	.word	0x20000004
 8002578:	20000000 	.word	0x20000000
 800257c:	2001a908 	.word	0x2001a908

08002580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002586:	4baf      	ldr	r3, [pc, #700]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800258e:	2b18      	cmp	r3, #24
 8002590:	f200 814e 	bhi.w	8002830 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002594:	a201      	add	r2, pc, #4	; (adr r2, 800259c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	08002601 	.word	0x08002601
 80025a0:	08002831 	.word	0x08002831
 80025a4:	08002831 	.word	0x08002831
 80025a8:	08002831 	.word	0x08002831
 80025ac:	08002831 	.word	0x08002831
 80025b0:	08002831 	.word	0x08002831
 80025b4:	08002831 	.word	0x08002831
 80025b8:	08002831 	.word	0x08002831
 80025bc:	08002627 	.word	0x08002627
 80025c0:	08002831 	.word	0x08002831
 80025c4:	08002831 	.word	0x08002831
 80025c8:	08002831 	.word	0x08002831
 80025cc:	08002831 	.word	0x08002831
 80025d0:	08002831 	.word	0x08002831
 80025d4:	08002831 	.word	0x08002831
 80025d8:	08002831 	.word	0x08002831
 80025dc:	0800262d 	.word	0x0800262d
 80025e0:	08002831 	.word	0x08002831
 80025e4:	08002831 	.word	0x08002831
 80025e8:	08002831 	.word	0x08002831
 80025ec:	08002831 	.word	0x08002831
 80025f0:	08002831 	.word	0x08002831
 80025f4:	08002831 	.word	0x08002831
 80025f8:	08002831 	.word	0x08002831
 80025fc:	08002633 	.word	0x08002633
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002600:	4b90      	ldr	r3, [pc, #576]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800260c:	4b8d      	ldr	r3, [pc, #564]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	4a8c      	ldr	r2, [pc, #560]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
 800261c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800261e:	e10a      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002620:	4b89      	ldr	r3, [pc, #548]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002622:	61bb      	str	r3, [r7, #24]
    break;
 8002624:	e107      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002626:	4b89      	ldr	r3, [pc, #548]	; (800284c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002628:	61bb      	str	r3, [r7, #24]
    break;
 800262a:	e104      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800262c:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800262e:	61bb      	str	r3, [r7, #24]
    break;
 8002630:	e101      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002632:	4b84      	ldr	r3, [pc, #528]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800263c:	4b81      	ldr	r3, [pc, #516]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002646:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002648:	4b7e      	ldr	r3, [pc, #504]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002652:	4b7c      	ldr	r3, [pc, #496]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002656:	08db      	lsrs	r3, r3, #3
 8002658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80da 	beq.w	800282a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d05a      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x1b2>
 800267c:	2b01      	cmp	r3, #1
 800267e:	d302      	bcc.n	8002686 <HAL_RCC_GetSysClockFreq+0x106>
 8002680:	2b02      	cmp	r3, #2
 8002682:	d078      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002684:	e099      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002686:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d02d      	beq.n	80026ee <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002692:	4b6c      	ldr	r3, [pc, #432]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	08db      	lsrs	r3, r3, #3
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	4a6a      	ldr	r2, [pc, #424]	; (8002848 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800269e:	fa22 f303 	lsr.w	r3, r2, r3
 80026a2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026bc:	4b61      	ldr	r3, [pc, #388]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80026d0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002854 <HAL_RCC_GetSysClockFreq+0x2d4>
 80026d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80026ec:	e087      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002858 <HAL_RCC_GetSysClockFreq+0x2d8>
 80026fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002700:	4b50      	ldr	r3, [pc, #320]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002710:	ed97 6a02 	vldr	s12, [r7, #8]
 8002714:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002854 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800271c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002730:	e065      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800285c <HAL_RCC_GetSysClockFreq+0x2dc>
 8002740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002744:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274c:	ee07 3a90 	vmov	s15, r3
 8002750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002754:	ed97 6a02 	vldr	s12, [r7, #8]
 8002758:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002854 <HAL_RCC_GetSysClockFreq+0x2d4>
 800275c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800276c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002770:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002774:	e043      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002780:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002788:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002798:	ed97 6a02 	vldr	s12, [r7, #8]
 800279c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002854 <HAL_RCC_GetSysClockFreq+0x2d4>
 80027a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027b8:	e021      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	ee07 3a90 	vmov	s15, r3
 80027c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800285c <HAL_RCC_GetSysClockFreq+0x2dc>
 80027c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80027e0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002854 <HAL_RCC_GetSysClockFreq+0x2d4>
 80027e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027fc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	0a5b      	lsrs	r3, r3, #9
 8002804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002808:	3301      	adds	r3, #1
 800280a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002816:	edd7 6a07 	vldr	s13, [r7, #28]
 800281a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800281e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002822:	ee17 3a90 	vmov	r3, s15
 8002826:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002828:	e005      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
    break;
 800282e:	e002      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002832:	61bb      	str	r3, [r7, #24]
    break;
 8002834:	bf00      	nop
  }

  return sysclockfreq;
 8002836:	69bb      	ldr	r3, [r7, #24]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3724      	adds	r7, #36	; 0x24
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	58024400 	.word	0x58024400
 8002848:	03d09000 	.word	0x03d09000
 800284c:	003d0900 	.word	0x003d0900
 8002850:	017d7840 	.word	0x017d7840
 8002854:	46000000 	.word	0x46000000
 8002858:	4c742400 	.word	0x4c742400
 800285c:	4a742400 	.word	0x4a742400
 8002860:	4bbebc20 	.word	0x4bbebc20

08002864 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800286c:	2300      	movs	r3, #0
 800286e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002870:	2300      	movs	r3, #0
 8002872:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d03d      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002888:	d013      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800288a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800288e:	d802      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002894:	e01f      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800289a:	d013      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800289c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028a0:	d01c      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80028a2:	e018      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a4:	4baf      	ldr	r3, [pc, #700]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	4aae      	ldr	r2, [pc, #696]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80028b0:	e015      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2102      	movs	r1, #2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fec1 	bl	8003640 <RCCEx_PLL2_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80028c2:	e00c      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3324      	adds	r3, #36	; 0x24
 80028c8:	2102      	movs	r1, #2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 ff6a 	bl	80037a4 <RCCEx_PLL3_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80028d4:	e003      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	75fb      	strb	r3, [r7, #23]
      break;
 80028da:	e000      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80028dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028de:	7dfb      	ldrb	r3, [r7, #23]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028e4:	4b9f      	ldr	r3, [pc, #636]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f0:	499c      	ldr	r1, [pc, #624]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	650b      	str	r3, [r1, #80]	; 0x50
 80028f6:	e001      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d03d      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	2b04      	cmp	r3, #4
 800290e:	d826      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002910:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002916:	bf00      	nop
 8002918:	0800292d 	.word	0x0800292d
 800291c:	0800293b 	.word	0x0800293b
 8002920:	0800294d 	.word	0x0800294d
 8002924:	08002965 	.word	0x08002965
 8002928:	08002965 	.word	0x08002965
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800292c:	4b8d      	ldr	r3, [pc, #564]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	4a8c      	ldr	r2, [pc, #560]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002938:	e015      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fe7d 	bl	8003640 <RCCEx_PLL2_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800294a:	e00c      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3324      	adds	r3, #36	; 0x24
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f000 ff26 	bl	80037a4 <RCCEx_PLL3_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800295c:	e003      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
      break;
 8002962:	e000      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800296c:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800296e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002970:	f023 0207 	bic.w	r2, r3, #7
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	497a      	ldr	r1, [pc, #488]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800297a:	4313      	orrs	r3, r2
 800297c:	650b      	str	r3, [r1, #80]	; 0x50
 800297e:	e001      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298c:	2b00      	cmp	r3, #0
 800298e:	d03e      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	2b80      	cmp	r3, #128	; 0x80
 8002996:	d01c      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d804      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d00d      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80029a4:	e01e      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80029a6:	2bc0      	cmp	r3, #192	; 0xc0
 80029a8:	d01f      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x186>
 80029aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ae:	d01e      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80029b0:	e018      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b2:	4b6c      	ldr	r3, [pc, #432]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	4a6b      	ldr	r2, [pc, #428]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80029be:	e017      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fe3a 	bl	8003640 <RCCEx_PLL2_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80029d0:	e00e      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3324      	adds	r3, #36	; 0x24
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fee3 	bl	80037a4 <RCCEx_PLL3_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80029e2:	e005      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	75fb      	strb	r3, [r7, #23]
      break;
 80029e8:	e002      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80029ea:	bf00      	nop
 80029ec:	e000      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80029ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80029f6:	4b5b      	ldr	r3, [pc, #364]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	4958      	ldr	r1, [pc, #352]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	650b      	str	r3, [r1, #80]	; 0x50
 8002a08:	e001      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d044      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a24:	d01f      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a2a:	d805      	bhi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a34:	d00e      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002a36:	e01f      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002a38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a3c:	d01f      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a42:	d01e      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002a44:	e018      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	4a46      	ldr	r2, [pc, #280]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a52:	e017      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fdf0 	bl	8003640 <RCCEx_PLL2_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a64:	e00e      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3324      	adds	r3, #36	; 0x24
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fe99 	bl	80037a4 <RCCEx_PLL3_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a76:	e005      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a7c:	e002      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e000      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a8a:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a98:	4932      	ldr	r1, [pc, #200]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	658b      	str	r3, [r1, #88]	; 0x58
 8002a9e:	e001      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d044      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002aba:	d01f      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ac0:	d805      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002ac6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aca:	d00e      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002acc:	e01f      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002ace:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ad2:	d01f      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002ad4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad8:	d01e      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002ada:	e018      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	4a20      	ldr	r2, [pc, #128]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ae8:	e017      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fda5 	bl	8003640 <RCCEx_PLL2_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002afa:	e00e      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3324      	adds	r3, #36	; 0x24
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fe4e 	bl	80037a4 <RCCEx_PLL3_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b0c:	e005      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	75fb      	strb	r3, [r7, #23]
      break;
 8002b12:	e002      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002b14:	bf00      	nop
 8002b16:	e000      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b2e:	490d      	ldr	r1, [pc, #52]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	658b      	str	r3, [r1, #88]	; 0x58
 8002b34:	e001      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d035      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d00c      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d802      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01b      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002b56:	e017      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d00c      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002b5c:	2b30      	cmp	r3, #48	; 0x30
 8002b5e:	d018      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002b60:	e012      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002b62:	bf00      	nop
 8002b64:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b68:	4baf      	ldr	r3, [pc, #700]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	4aae      	ldr	r2, [pc, #696]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b74:	e00e      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fd5f 	bl	8003640 <RCCEx_PLL2_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b86:	e005      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b8c:	e002      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e000      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b9a:	4ba3      	ldr	r3, [pc, #652]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba6:	49a0      	ldr	r1, [pc, #640]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002bac:	e001      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d042      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc6:	d01f      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bcc:	d805      	bhi.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002bd8:	e01f      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002bda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bde:	d01f      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be4:	d01e      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002be6:	e018      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002be8:	4b8f      	ldr	r3, [pc, #572]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	4a8e      	ldr	r2, [pc, #568]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bf4:	e017      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fd1f 	bl	8003640 <RCCEx_PLL2_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c06:	e00e      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3324      	adds	r3, #36	; 0x24
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fdc8 	bl	80037a4 <RCCEx_PLL3_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c18:	e005      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c1e:	e002      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002c20:	bf00      	nop
 8002c22:	e000      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c2c:	4b7e      	ldr	r3, [pc, #504]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c30:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	497b      	ldr	r1, [pc, #492]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	650b      	str	r3, [r1, #80]	; 0x50
 8002c3e:	e001      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d042      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c58:	d01b      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c5e:	d805      	bhi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d022      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c6a:	e01b      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c70:	d01d      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002c72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c76:	d01c      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002c78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c7c:	d01b      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002c7e:	e011      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fcda 	bl	8003640 <RCCEx_PLL2_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c90:	e012      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3324      	adds	r3, #36	; 0x24
 8002c96:	2101      	movs	r1, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fd83 	bl	80037a4 <RCCEx_PLL3_Config>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ca2:	e009      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca8:	e006      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002caa:	bf00      	nop
 8002cac:	e004      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e002      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002cbe:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cca:	4957      	ldr	r1, [pc, #348]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	650b      	str	r3, [r1, #80]	; 0x50
 8002cd0:	e001      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
 8002cd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d044      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cec:	d01b      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf2:	d805      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d022      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002cf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002cfe:	e01b      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d04:	d01d      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0a:	d01c      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002d0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d10:	d01b      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002d12:	e011      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fc90 	bl	8003640 <RCCEx_PLL2_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d24:	e012      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3324      	adds	r3, #36	; 0x24
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fd39 	bl	80037a4 <RCCEx_PLL3_Config>
 8002d32:	4603      	mov	r3, r0
 8002d34:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d36:	e009      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d3c:	e006      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10a      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d52:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d60:	4931      	ldr	r1, [pc, #196]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	658b      	str	r3, [r1, #88]	; 0x58
 8002d66:	e001      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
 8002d6a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d02d      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d80:	d005      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d86:	d009      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002d8c:	e00f      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	4a25      	ldr	r2, [pc, #148]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d9a:	e00c      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	2101      	movs	r1, #1
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fc4c 	bl	8003640 <RCCEx_PLL2_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002dac:	e003      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	75fb      	strb	r3, [r7, #23]
      break;
 8002db2:	e000      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc8:	4917      	ldr	r1, [pc, #92]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	650b      	str	r3, [r1, #80]	; 0x50
 8002dce:	e001      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d035      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d81b      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e2d 	.word	0x08002e2d
 8002df4:	08002e01 	.word	0x08002e01
 8002df8:	08002e0f 	.word	0x08002e0f
 8002dfc:	08002e2d 	.word	0x08002e2d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e0c:	e00f      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2102      	movs	r1, #2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fc13 	bl	8003640 <RCCEx_PLL2_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e1e:	e006      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	75fb      	strb	r3, [r7, #23]
      break;
 8002e24:	e003      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400
      break;
 8002e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e34:	4bba      	ldr	r3, [pc, #744]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	f023 0203 	bic.w	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	49b7      	ldr	r1, [pc, #732]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e46:	e001      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8086 	beq.w	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e5a:	4bb2      	ldr	r3, [pc, #712]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4ab1      	ldr	r2, [pc, #708]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e66:	f7fd ff4d 	bl	8000d04 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e6c:	e009      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6e:	f7fd ff49 	bl	8000d04 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b64      	cmp	r3, #100	; 0x64
 8002e7a:	d902      	bls.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	75fb      	strb	r3, [r7, #23]
        break;
 8002e80:	e005      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e82:	4ba8      	ldr	r3, [pc, #672]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0ef      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d166      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e94:	4ba2      	ldr	r3, [pc, #648]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e9e:	4053      	eors	r3, r2
 8002ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d013      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ea8:	4b9d      	ldr	r3, [pc, #628]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eb2:	4b9b      	ldr	r3, [pc, #620]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a9a      	ldr	r2, [pc, #616]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ebe:	4b98      	ldr	r3, [pc, #608]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a97      	ldr	r2, [pc, #604]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002eca:	4a95      	ldr	r2, [pc, #596]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eda:	d115      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fd ff12 	bl	8000d04 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ee2:	e00b      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fd ff0e 	bl	8000d04 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d902      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	75fb      	strb	r3, [r7, #23]
            break;
 8002efa:	e005      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002efc:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ed      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d126      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f1c:	d10d      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002f1e:	4b80      	ldr	r3, [pc, #512]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f2c:	0919      	lsrs	r1, r3, #4
 8002f2e:	4b7e      	ldr	r3, [pc, #504]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002f30:	400b      	ands	r3, r1
 8002f32:	497b      	ldr	r1, [pc, #492]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	610b      	str	r3, [r1, #16]
 8002f38:	e005      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002f3a:	4b79      	ldr	r3, [pc, #484]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	4a78      	ldr	r2, [pc, #480]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f44:	6113      	str	r3, [r2, #16]
 8002f46:	4b76      	ldr	r3, [pc, #472]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f54:	4972      	ldr	r1, [pc, #456]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	670b      	str	r3, [r1, #112]	; 0x70
 8002f5a:	e004      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	75bb      	strb	r3, [r7, #22]
 8002f60:	e001      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d07d      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f76:	2b28      	cmp	r3, #40	; 0x28
 8002f78:	d866      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002f7a:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f80:	0800304f 	.word	0x0800304f
 8002f84:	08003049 	.word	0x08003049
 8002f88:	08003049 	.word	0x08003049
 8002f8c:	08003049 	.word	0x08003049
 8002f90:	08003049 	.word	0x08003049
 8002f94:	08003049 	.word	0x08003049
 8002f98:	08003049 	.word	0x08003049
 8002f9c:	08003049 	.word	0x08003049
 8002fa0:	08003025 	.word	0x08003025
 8002fa4:	08003049 	.word	0x08003049
 8002fa8:	08003049 	.word	0x08003049
 8002fac:	08003049 	.word	0x08003049
 8002fb0:	08003049 	.word	0x08003049
 8002fb4:	08003049 	.word	0x08003049
 8002fb8:	08003049 	.word	0x08003049
 8002fbc:	08003049 	.word	0x08003049
 8002fc0:	08003037 	.word	0x08003037
 8002fc4:	08003049 	.word	0x08003049
 8002fc8:	08003049 	.word	0x08003049
 8002fcc:	08003049 	.word	0x08003049
 8002fd0:	08003049 	.word	0x08003049
 8002fd4:	08003049 	.word	0x08003049
 8002fd8:	08003049 	.word	0x08003049
 8002fdc:	08003049 	.word	0x08003049
 8002fe0:	0800304f 	.word	0x0800304f
 8002fe4:	08003049 	.word	0x08003049
 8002fe8:	08003049 	.word	0x08003049
 8002fec:	08003049 	.word	0x08003049
 8002ff0:	08003049 	.word	0x08003049
 8002ff4:	08003049 	.word	0x08003049
 8002ff8:	08003049 	.word	0x08003049
 8002ffc:	08003049 	.word	0x08003049
 8003000:	0800304f 	.word	0x0800304f
 8003004:	08003049 	.word	0x08003049
 8003008:	08003049 	.word	0x08003049
 800300c:	08003049 	.word	0x08003049
 8003010:	08003049 	.word	0x08003049
 8003014:	08003049 	.word	0x08003049
 8003018:	08003049 	.word	0x08003049
 800301c:	08003049 	.word	0x08003049
 8003020:	0800304f 	.word	0x0800304f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	2101      	movs	r1, #1
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fb08 	bl	8003640 <RCCEx_PLL2_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003034:	e00c      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3324      	adds	r3, #36	; 0x24
 800303a:	2101      	movs	r1, #1
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fbb1 	bl	80037a4 <RCCEx_PLL3_Config>
 8003042:	4603      	mov	r3, r0
 8003044:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003046:	e003      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	75fb      	strb	r3, [r7, #23]
      break;
 800304c:	e000      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800304e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003056:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003062:	492f      	ldr	r1, [pc, #188]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003064:	4313      	orrs	r3, r2
 8003066:	654b      	str	r3, [r1, #84]	; 0x54
 8003068:	e001      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d037      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307e:	2b05      	cmp	r3, #5
 8003080:	d820      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003082:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	080030cb 	.word	0x080030cb
 800308c:	080030a1 	.word	0x080030a1
 8003090:	080030b3 	.word	0x080030b3
 8003094:	080030cb 	.word	0x080030cb
 8003098:	080030cb 	.word	0x080030cb
 800309c:	080030cb 	.word	0x080030cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3304      	adds	r3, #4
 80030a4:	2101      	movs	r1, #1
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 faca 	bl	8003640 <RCCEx_PLL2_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80030b0:	e00c      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3324      	adds	r3, #36	; 0x24
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fb73 	bl	80037a4 <RCCEx_PLL3_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80030c2:	e003      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
      break;
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80030ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80030d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d6:	f023 0207 	bic.w	r2, r3, #7
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030de:	4910      	ldr	r1, [pc, #64]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	654b      	str	r3, [r1, #84]	; 0x54
 80030e4:	e001      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d040      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d827      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	08003157 	.word	0x08003157
 800310c:	0800312d 	.word	0x0800312d
 8003110:	0800313f 	.word	0x0800313f
 8003114:	08003157 	.word	0x08003157
 8003118:	08003157 	.word	0x08003157
 800311c:	08003157 	.word	0x08003157
 8003120:	58024400 	.word	0x58024400
 8003124:	58024800 	.word	0x58024800
 8003128:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	2101      	movs	r1, #1
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fa84 	bl	8003640 <RCCEx_PLL2_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800313c:	e00c      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3324      	adds	r3, #36	; 0x24
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fb2d 	bl	80037a4 <RCCEx_PLL3_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800314e:	e003      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	75fb      	strb	r3, [r7, #23]
      break;
 8003154:	e000      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800315e:	4bb2      	ldr	r3, [pc, #712]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	f023 0207 	bic.w	r2, r3, #7
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	49ae      	ldr	r1, [pc, #696]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800316e:	4313      	orrs	r3, r2
 8003170:	658b      	str	r3, [r1, #88]	; 0x58
 8003172:	e001      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d044      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800318a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800318e:	d01b      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003194:	d805      	bhi.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d022      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800319a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80031a0:	e01b      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x976>
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a6:	d01d      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80031a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ac:	d01c      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80031ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031b2:	d01b      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x988>
 80031b4:	e011      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fa3f 	bl	8003640 <RCCEx_PLL2_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80031c6:	e012      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3324      	adds	r3, #36	; 0x24
 80031cc:	2102      	movs	r1, #2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fae8 	bl	80037a4 <RCCEx_PLL3_Config>
 80031d4:	4603      	mov	r3, r0
 80031d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80031d8:	e009      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	75fb      	strb	r3, [r7, #23]
      break;
 80031de:	e006      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80031e0:	bf00      	nop
 80031e2:	e004      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80031e4:	bf00      	nop
 80031e6:	e002      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80031ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031f4:	4b8c      	ldr	r3, [pc, #560]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003202:	4989      	ldr	r1, [pc, #548]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003204:	4313      	orrs	r3, r2
 8003206:	654b      	str	r3, [r1, #84]	; 0x54
 8003208:	e001      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d044      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003224:	d01b      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322a:	d805      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d022      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003236:	e01b      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323c:	d01d      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800323e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003242:	d01c      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003244:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003248:	d01b      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800324a:	e011      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f9f4 	bl	8003640 <RCCEx_PLL2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800325c:	e012      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3324      	adds	r3, #36	; 0x24
 8003262:	2102      	movs	r1, #2
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fa9d 	bl	80037a4 <RCCEx_PLL3_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800326e:	e009      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
      break;
 8003274:	e006      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003276:	bf00      	nop
 8003278:	e004      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800328a:	4b67      	ldr	r3, [pc, #412]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003298:	4963      	ldr	r1, [pc, #396]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	658b      	str	r3, [r1, #88]	; 0x58
 800329e:	e001      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d044      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ba:	d01b      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80032bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c0:	d805      	bhi.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d022      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80032c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80032cc:	e01b      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80032ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d2:	d01d      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80032d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032d8:	d01c      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80032da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032de:	d01b      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80032e0:	e011      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f9a9 	bl	8003640 <RCCEx_PLL2_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032f2:	e012      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3324      	adds	r3, #36	; 0x24
 80032f8:	2102      	movs	r1, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fa52 	bl	80037a4 <RCCEx_PLL3_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003304:	e009      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	75fb      	strb	r3, [r7, #23]
      break;
 800330a:	e006      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800330c:	bf00      	nop
 800330e:	e004      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003310:	bf00      	nop
 8003312:	e002      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003314:	bf00      	nop
 8003316:	e000      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003320:	4b41      	ldr	r3, [pc, #260]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800332e:	493e      	ldr	r1, [pc, #248]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	658b      	str	r3, [r1, #88]	; 0x58
 8003334:	e001      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003350:	d10a      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3324      	adds	r3, #36	; 0x24
 8003356:	2102      	movs	r1, #2
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fa23 	bl	80037a4 <RCCEx_PLL3_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003368:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003376:	492c      	ldr	r1, [pc, #176]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003392:	d10a      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3324      	adds	r3, #36	; 0x24
 8003398:	2102      	movs	r1, #2
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fa02 	bl	80037a4 <RCCEx_PLL3_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033aa:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b8:	491b      	ldr	r1, [pc, #108]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d032      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d00d      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80033d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033da:	d016      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d111      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f92a 	bl	8003640 <RCCEx_PLL2_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033f0:	e00c      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3324      	adds	r3, #36	; 0x24
 80033f6:	2102      	movs	r1, #2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 f9d3 	bl	80037a4 <RCCEx_PLL3_Config>
 80033fe:	4603      	mov	r3, r0
 8003400:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003402:	e003      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	75fb      	strb	r3, [r7, #23]
      break;
 8003408:	e000      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800340a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003416:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003420:	4901      	ldr	r1, [pc, #4]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	658b      	str	r3, [r1, #88]	; 0x58
 8003426:	e003      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02f      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003446:	d00c      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800344c:	d015      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800344e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003452:	d10f      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003454:	4b79      	ldr	r3, [pc, #484]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	4a78      	ldr	r2, [pc, #480]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800345a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003460:	e00c      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3324      	adds	r3, #36	; 0x24
 8003466:	2101      	movs	r1, #1
 8003468:	4618      	mov	r0, r3
 800346a:	f000 f99b 	bl	80037a4 <RCCEx_PLL3_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003472:	e003      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	75fb      	strb	r3, [r7, #23]
      break;
 8003478:	e000      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800347a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003482:	4b6e      	ldr	r3, [pc, #440]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003490:	496a      	ldr	r1, [pc, #424]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	654b      	str	r3, [r1, #84]	; 0x54
 8003496:	e001      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d029      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b4:	d007      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80034b6:	e00f      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b8:	4b60      	ldr	r3, [pc, #384]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	4a5f      	ldr	r2, [pc, #380]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034c4:	e00b      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2102      	movs	r1, #2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f8b7 	bl	8003640 <RCCEx_PLL2_Config>
 80034d2:	4603      	mov	r3, r0
 80034d4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034d6:	e002      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	75fb      	strb	r3, [r7, #23]
      break;
 80034dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034e4:	4b55      	ldr	r3, [pc, #340]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f0:	4952      	ldr	r1, [pc, #328]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034f6:	e001      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3324      	adds	r3, #36	; 0x24
 800350c:	2102      	movs	r1, #2
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f948 	bl	80037a4 <RCCEx_PLL3_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02f      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800352e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003532:	d00c      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003538:	d802      	bhi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d011      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800353e:	e00d      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003544:	d00f      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800354a:	d00e      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800354c:	e006      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354e:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	4a3a      	ldr	r2, [pc, #232]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800355a:	e007      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	75fb      	strb	r3, [r7, #23]
      break;
 8003560:	e004      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003562:	bf00      	nop
 8003564:	e002      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800356a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003572:	4b32      	ldr	r3, [pc, #200]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357e:	492f      	ldr	r1, [pc, #188]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003580:	4313      	orrs	r3, r2
 8003582:	654b      	str	r3, [r1, #84]	; 0x54
 8003584:	e001      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003596:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4926      	ldr	r1, [pc, #152]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d009      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035c2:	491e      	ldr	r1, [pc, #120]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80035d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e0:	4916      	ldr	r1, [pc, #88]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035f2:	4b12      	ldr	r3, [pc, #72]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	4a11      	ldr	r2, [pc, #68]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80035f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035fc:	6113      	str	r3, [r2, #16]
 80035fe:	4b0f      	ldr	r3, [pc, #60]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003608:	490c      	ldr	r1, [pc, #48]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	da08      	bge.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003622:	4906      	ldr	r1, [pc, #24]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003624:	4313      	orrs	r3, r2
 8003626:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003628:	7dbb      	ldrb	r3, [r7, #22]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	58024400 	.word	0x58024400

08003640 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800364e:	4b53      	ldr	r3, [pc, #332]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b03      	cmp	r3, #3
 8003658:	d101      	bne.n	800365e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e099      	b.n	8003792 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800365e:	4b4f      	ldr	r3, [pc, #316]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a4e      	ldr	r2, [pc, #312]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003664:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366a:	f7fd fb4b 	bl	8000d04 <HAL_GetTick>
 800366e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003670:	e008      	b.n	8003684 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003672:	f7fd fb47 	bl	8000d04 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e086      	b.n	8003792 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003684:	4b45      	ldr	r3, [pc, #276]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003690:	4b42      	ldr	r3, [pc, #264]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	031b      	lsls	r3, r3, #12
 800369e:	493f      	ldr	r1, [pc, #252]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	628b      	str	r3, [r1, #40]	; 0x28
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	025b      	lsls	r3, r3, #9
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	3b01      	subs	r3, #1
 80036c0:	041b      	lsls	r3, r3, #16
 80036c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036d4:	4931      	ldr	r1, [pc, #196]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80036da:	4b30      	ldr	r3, [pc, #192]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	492d      	ldr	r1, [pc, #180]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80036ec:	4b2b      	ldr	r3, [pc, #172]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	f023 0220 	bic.w	r2, r3, #32
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	4928      	ldr	r1, [pc, #160]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80036fe:	4b27      	ldr	r3, [pc, #156]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	4a26      	ldr	r2, [pc, #152]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003704:	f023 0310 	bic.w	r3, r3, #16
 8003708:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 800370c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <RCCEx_PLL2_Config+0x160>)
 8003710:	4013      	ands	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	69d2      	ldr	r2, [r2, #28]
 8003716:	00d2      	lsls	r2, r2, #3
 8003718:	4920      	ldr	r1, [pc, #128]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	4a1e      	ldr	r2, [pc, #120]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003724:	f043 0310 	orr.w	r3, r3, #16
 8003728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d106      	bne.n	800373e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	4a19      	ldr	r2, [pc, #100]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003736:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800373a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800373c:	e00f      	b.n	800375e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d106      	bne.n	8003752 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003744:	4b15      	ldr	r3, [pc, #84]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4a14      	ldr	r2, [pc, #80]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 800374a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800374e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003750:	e005      	b.n	800375e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	4a11      	ldr	r2, [pc, #68]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800375c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a0e      	ldr	r2, [pc, #56]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003764:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376a:	f7fd facb 	bl	8000d04 <HAL_GetTick>
 800376e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003770:	e008      	b.n	8003784 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003772:	f7fd fac7 	bl	8000d04 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e006      	b.n	8003792 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <RCCEx_PLL2_Config+0x15c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	58024400 	.word	0x58024400
 80037a0:	ffff0007 	.word	0xffff0007

080037a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037b2:	4b53      	ldr	r3, [pc, #332]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d101      	bne.n	80037c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e099      	b.n	80038f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80037c2:	4b4f      	ldr	r3, [pc, #316]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ce:	f7fd fa99 	bl	8000d04 <HAL_GetTick>
 80037d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037d4:	e008      	b.n	80037e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037d6:	f7fd fa95 	bl	8000d04 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e086      	b.n	80038f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037e8:	4b45      	ldr	r3, [pc, #276]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1f0      	bne.n	80037d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80037f4:	4b42      	ldr	r3, [pc, #264]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	051b      	lsls	r3, r3, #20
 8003802:	493f      	ldr	r1, [pc, #252]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 8003804:	4313      	orrs	r3, r2
 8003806:	628b      	str	r3, [r1, #40]	; 0x28
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	3b01      	subs	r3, #1
 800380e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	3b01      	subs	r3, #1
 8003818:	025b      	lsls	r3, r3, #9
 800381a:	b29b      	uxth	r3, r3
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	3b01      	subs	r3, #1
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	3b01      	subs	r3, #1
 8003832:	061b      	lsls	r3, r3, #24
 8003834:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003838:	4931      	ldr	r1, [pc, #196]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 800383a:	4313      	orrs	r3, r2
 800383c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800383e:	4b30      	ldr	r3, [pc, #192]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	492d      	ldr	r1, [pc, #180]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 800384c:	4313      	orrs	r3, r2
 800384e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003850:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	4928      	ldr	r1, [pc, #160]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 800385e:	4313      	orrs	r3, r2
 8003860:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003862:	4b27      	ldr	r3, [pc, #156]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	4a26      	ldr	r2, [pc, #152]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 8003868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800386c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800386e:	4b24      	ldr	r3, [pc, #144]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 8003870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <RCCEx_PLL3_Config+0x160>)
 8003874:	4013      	ands	r3, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	69d2      	ldr	r2, [r2, #28]
 800387a:	00d2      	lsls	r2, r2, #3
 800387c:	4920      	ldr	r1, [pc, #128]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003882:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 8003888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003894:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	4a19      	ldr	r2, [pc, #100]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 800389a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800389e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038a0:	e00f      	b.n	80038c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d106      	bne.n	80038b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	4a14      	ldr	r2, [pc, #80]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80038ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038b4:	e005      	b.n	80038c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	4a11      	ldr	r2, [pc, #68]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80038bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ce:	f7fd fa19 	bl	8000d04 <HAL_GetTick>
 80038d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80038d4:	e008      	b.n	80038e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80038d6:	f7fd fa15 	bl	8000d04 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e006      	b.n	80038f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <RCCEx_PLL3_Config+0x15c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	58024400 	.word	0x58024400
 8003904:	ffff0007 	.word	0xffff0007

08003908 <__libc_init_array>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4e0d      	ldr	r6, [pc, #52]	; (8003940 <__libc_init_array+0x38>)
 800390c:	4c0d      	ldr	r4, [pc, #52]	; (8003944 <__libc_init_array+0x3c>)
 800390e:	1ba4      	subs	r4, r4, r6
 8003910:	10a4      	asrs	r4, r4, #2
 8003912:	2500      	movs	r5, #0
 8003914:	42a5      	cmp	r5, r4
 8003916:	d109      	bne.n	800392c <__libc_init_array+0x24>
 8003918:	4e0b      	ldr	r6, [pc, #44]	; (8003948 <__libc_init_array+0x40>)
 800391a:	4c0c      	ldr	r4, [pc, #48]	; (800394c <__libc_init_array+0x44>)
 800391c:	f000 f820 	bl	8003960 <_init>
 8003920:	1ba4      	subs	r4, r4, r6
 8003922:	10a4      	asrs	r4, r4, #2
 8003924:	2500      	movs	r5, #0
 8003926:	42a5      	cmp	r5, r4
 8003928:	d105      	bne.n	8003936 <__libc_init_array+0x2e>
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003930:	4798      	blx	r3
 8003932:	3501      	adds	r5, #1
 8003934:	e7ee      	b.n	8003914 <__libc_init_array+0xc>
 8003936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800393a:	4798      	blx	r3
 800393c:	3501      	adds	r5, #1
 800393e:	e7f2      	b.n	8003926 <__libc_init_array+0x1e>
 8003940:	08003988 	.word	0x08003988
 8003944:	08003988 	.word	0x08003988
 8003948:	08003988 	.word	0x08003988
 800394c:	0800398c 	.word	0x0800398c

08003950 <memset>:
 8003950:	4402      	add	r2, r0
 8003952:	4603      	mov	r3, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	d100      	bne.n	800395a <memset+0xa>
 8003958:	4770      	bx	lr
 800395a:	f803 1b01 	strb.w	r1, [r3], #1
 800395e:	e7f9      	b.n	8003954 <memset+0x4>

08003960 <_init>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr

0800396c <_fini>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr
